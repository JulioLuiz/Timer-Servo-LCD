
TIMER_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007838  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001750  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009158  08009158  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009160  08009160  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000080  080091e8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080091e8  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ba5  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f4  00000000  00000000  00032c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00034d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022481  00000000  00000000  00035c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000115d0  00000000  00000000  000580d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d277b  00000000  00000000  000696a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0013be24  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000e38  00000000  00000000  0013be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004414  00000000  00000000  0013ccb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080079f0 	.word	0x080079f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080079f0 	.word	0x080079f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f004 fc0d 	bl	8004dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f8b7 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 fa11 	bl	80009dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f9e5 	bl	8000988 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005be:	f000 f91f 	bl	8000800 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005c2:	f000 f993 	bl	80008ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80005c6:	210c      	movs	r1, #12
 80005c8:	484e      	ldr	r0, [pc, #312]	; (8000704 <main+0x15c>)
 80005ca:	f005 fdbd 	bl	8006148 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR4 = Encoder;
 80005ce:	4b4e      	ldr	r3, [pc, #312]	; (8000708 <main+0x160>)
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	4b4c      	ldr	r3, [pc, #304]	; (8000704 <main+0x15c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	641a      	str	r2, [r3, #64]	; 0x40



  tft_gpio_init(); //Inicializa os GPIOs do LCD (evita uso do CubeMX)
 80005d8:	f004 fb5c 	bl	8004c94 <tft_gpio_init>
  HAL_TIM_Base_Start(&htim3); //Inicializa o Timer1 (base de tempo de us do LCD)
 80005dc:	484b      	ldr	r0, [pc, #300]	; (800070c <main+0x164>)
 80005de:	f005 fcf1 	bl	8005fc4 <HAL_TIM_Base_Start>
  HAL_Delay(100);
 80005e2:	2064      	movs	r0, #100	; 0x64
 80005e4:	f004 fc64 	bl	8004eb0 <HAL_Delay>
  tft_init(tft_readID()); //Inicializa o LCD de acordo com seu ID
 80005e8:	f002 f814 	bl	8002614 <readID>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fc8a 	bl	8001f08 <tft_init>
  setRotation(1); //Ajusta a orientação da tela
 80005f4:	2001      	movs	r0, #1
 80005f6:	f002 ff3d 	bl	8003474 <setRotation>
  HAL_Delay(1000);
 80005fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fe:	f004 fc57 	bl	8004eb0 <HAL_Delay>
  fillScreen(BLACK); //Preenche a tela em uma só cor
 8000602:	2000      	movs	r0, #0
 8000604:	f003 fd0c 	bl	8004020 <fillScreen>

  printnewtstr(
 8000608:	4b41      	ldr	r3, [pc, #260]	; (8000710 <main+0x168>)
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2301      	movs	r3, #1
 800060e:	4a41      	ldr	r2, [pc, #260]	; (8000714 <main+0x16c>)
 8000610:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f004 fa9f 	bl	8004b58 <printnewtstr>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(cGraus, "%d", Encoder);
 800061a:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <main+0x160>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	493d      	ldr	r1, [pc, #244]	; (8000718 <main+0x170>)
 8000622:	483e      	ldr	r0, [pc, #248]	; (800071c <main+0x174>)
 8000624:	f006 fdb6 	bl	8007194 <siprintf>
	  printnewtstr(200, YELLOW, &mono18x7bold, 1,(uint8_t *) cGraus);
 8000628:	4b3c      	ldr	r3, [pc, #240]	; (800071c <main+0x174>)
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2301      	movs	r3, #1
 800062e:	4a39      	ldr	r2, [pc, #228]	; (8000714 <main+0x16c>)
 8000630:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000634:	20c8      	movs	r0, #200	; 0xc8
 8000636:	f004 fa8f 	bl	8004b58 <printnewtstr>
	  htim2.Instance->CCR4 = Encoder;
 800063a:	4b33      	ldr	r3, [pc, #204]	; (8000708 <main+0x160>)
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	4b31      	ldr	r3, [pc, #196]	; (8000704 <main+0x15c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	641a      	str	r2, [r3, #64]	; 0x40

if (Encoder <= 240 && Encoder >= 60)
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <main+0x160>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2bf0      	cmp	r3, #240	; 0xf0
 800064a:	d84b      	bhi.n	80006e4 <main+0x13c>
 800064c:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <main+0x160>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b3b      	cmp	r3, #59	; 0x3b
 8000652:	d947      	bls.n	80006e4 <main+0x13c>
{
	  if((!HAL_GPIO_ReadPin(Sinal1_GPIO_Port, Sinal1_Pin))	&&	(HAL_GPIO_ReadPin(Sinal2_GPIO_Port, Sinal2_Pin)))
 8000654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000658:	4831      	ldr	r0, [pc, #196]	; (8000720 <main+0x178>)
 800065a:	f004 fec7 	bl	80053ec <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d11b      	bne.n	800069c <main+0xf4>
 8000664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000668:	482d      	ldr	r0, [pc, #180]	; (8000720 <main+0x178>)
 800066a:	f004 febf 	bl	80053ec <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d013      	beq.n	800069c <main+0xf4>
	  {
		  HAL_Delay(100);
 8000674:	2064      	movs	r0, #100	; 0x64
 8000676:	f004 fc1b 	bl	8004eb0 <HAL_Delay>
		  printnewtstr_bc(200, BLACK, BLACK, &mono18x7bold, 1,(uint8_t *) cGraus);
 800067a:	4b28      	ldr	r3, [pc, #160]	; (800071c <main+0x174>)
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2301      	movs	r3, #1
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	4b24      	ldr	r3, [pc, #144]	; (8000714 <main+0x16c>)
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	20c8      	movs	r0, #200	; 0xc8
 800068a:	f004 fa99 	bl	8004bc0 <printnewtstr_bc>
		  Encoder +=10;
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <main+0x160>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	330a      	adds	r3, #10
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <main+0x160>)
 8000698:	701a      	strb	r2, [r3, #0]
	  if((!HAL_GPIO_ReadPin(Sinal1_GPIO_Port, Sinal1_Pin))	&&	(HAL_GPIO_ReadPin(Sinal2_GPIO_Port, Sinal2_Pin)))
 800069a:	e031      	b.n	8000700 <main+0x158>

	  }
	  else if((HAL_GPIO_ReadPin(Sinal1_GPIO_Port, Sinal1_Pin)) && (!HAL_GPIO_ReadPin(Sinal2_GPIO_Port, Sinal2_Pin)))
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	481f      	ldr	r0, [pc, #124]	; (8000720 <main+0x178>)
 80006a2:	f004 fea3 	bl	80053ec <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d029      	beq.n	8000700 <main+0x158>
 80006ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b0:	481b      	ldr	r0, [pc, #108]	; (8000720 <main+0x178>)
 80006b2:	f004 fe9b 	bl	80053ec <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d121      	bne.n	8000700 <main+0x158>
	  {
		  HAL_Delay(100);
 80006bc:	2064      	movs	r0, #100	; 0x64
 80006be:	f004 fbf7 	bl	8004eb0 <HAL_Delay>
		  printnewtstr_bc(200, BLACK, BLACK, &mono18x7bold, 1, (uint8_t *)cGraus);
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <main+0x174>)
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <main+0x16c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	20c8      	movs	r0, #200	; 0xc8
 80006d2:	f004 fa75 	bl	8004bc0 <printnewtstr_bc>
		  Encoder -= 10;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <main+0x160>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3b0a      	subs	r3, #10
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <main+0x160>)
 80006e0:	701a      	strb	r2, [r3, #0]
	  if((!HAL_GPIO_ReadPin(Sinal1_GPIO_Port, Sinal1_Pin))	&&	(HAL_GPIO_ReadPin(Sinal2_GPIO_Port, Sinal2_Pin)))
 80006e2:	e00d      	b.n	8000700 <main+0x158>
	  }
}
else {
		printnewtstr_bc(200, BLACK, BLACK, &mono18x7bold, 1, (uint8_t *)cGraus);
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <main+0x174>)
 80006e6:	9301      	str	r3, [sp, #4]
 80006e8:	2301      	movs	r3, #1
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <main+0x16c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	20c8      	movs	r0, #200	; 0xc8
 80006f4:	f004 fa64 	bl	8004bc0 <printnewtstr_bc>
		Encoder = 60;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <main+0x160>)
 80006fa:	223c      	movs	r2, #60	; 0x3c
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	e78c      	b.n	800061a <main+0x72>
	  if((!HAL_GPIO_ReadPin(Sinal1_GPIO_Port, Sinal1_Pin))	&&	(HAL_GPIO_ReadPin(Sinal2_GPIO_Port, Sinal2_Pin)))
 8000700:	bf00      	nop
	  sprintf(cGraus, "%d", Encoder);
 8000702:	e78a      	b.n	800061a <main+0x72>
 8000704:	20000100 	.word	0x20000100
 8000708:	20000000 	.word	0x20000000
 800070c:	200000b8 	.word	0x200000b8
 8000710:	08007a08 	.word	0x08007a08
 8000714:	08008bfc 	.word	0x08008bfc
 8000718:	08007a14 	.word	0x08007a14
 800071c:	2000018c 	.word	0x2000018c
 8000720:	40020000 	.word	0x40020000

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2234      	movs	r2, #52	; 0x34
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f006 fd26 	bl	8007184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <SystemClock_Config+0xd4>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a29      	ldr	r2, [pc, #164]	; (80007f8 <SystemClock_Config+0xd4>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <SystemClock_Config+0xd4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <SystemClock_Config+0xd8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000770:	4a22      	ldr	r2, [pc, #136]	; (80007fc <SystemClock_Config+0xd8>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b20      	ldr	r3, [pc, #128]	; (80007fc <SystemClock_Config+0xd8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000798:	2310      	movs	r3, #16
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800079c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a2:	2304      	movs	r3, #4
 80007a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4618      	mov	r0, r3
 80007b4:	f005 f918 	bl	80059e8 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007be:	f000 f989 	bl	8000ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2102      	movs	r1, #2
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 fe36 	bl	8005450 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ea:	f000 f973 	bl	8000ad4 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	; 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	; 0x38
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
 800082c:	615a      	str	r2, [r3, #20]
 800082e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000830:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 8000838:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <MX_TIM2_Init+0xe8>)
 800083a:	f44f 7252 	mov.w	r2, #840	; 0x348
 800083e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000848:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800084c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800085a:	4823      	ldr	r0, [pc, #140]	; (80008e8 <MX_TIM2_Init+0xe8>)
 800085c:	f005 fb62 	bl	8005f24 <HAL_TIM_Base_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000866:	f000 f935 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000874:	4619      	mov	r1, r3
 8000876:	481c      	ldr	r0, [pc, #112]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000878:	f005 fdf0 	bl	800645c <HAL_TIM_ConfigClockSource>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000882:	f000 f927 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000886:	4818      	ldr	r0, [pc, #96]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000888:	f005 fc04 	bl	8006094 <HAL_TIM_PWM_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000892:	f000 f91f 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	4619      	mov	r1, r3
 80008a4:	4810      	ldr	r0, [pc, #64]	; (80008e8 <MX_TIM2_Init+0xe8>)
 80008a6:	f006 f9b1 	bl	8006c0c <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008b0:	f000 f910 	bl	8000ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b4:	2360      	movs	r3, #96	; 0x60
 80008b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	220c      	movs	r2, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <MX_TIM2_Init+0xe8>)
 80008cc:	f005 fd04 	bl	80062d8 <HAL_TIM_PWM_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80008d6:	f000 f8fd 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <MX_TIM2_Init+0xe8>)
 80008dc:	f000 f95e 	bl	8000b9c <HAL_TIM_MspPostInit>

}
 80008e0:	bf00      	nop
 80008e2:	3738      	adds	r7, #56	; 0x38
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000100 	.word	0x20000100

080008ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_TIM3_Init+0x94>)
 800090a:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <MX_TIM3_Init+0x98>)
 800090c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_TIM3_Init+0x94>)
 8000910:	2253      	movs	r2, #83	; 0x53
 8000912:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_TIM3_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_TIM3_Init+0x94>)
 800091c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000920:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_TIM3_Init+0x94>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_TIM3_Init+0x94>)
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800092e:	4814      	ldr	r0, [pc, #80]	; (8000980 <MX_TIM3_Init+0x94>)
 8000930:	f005 faf8 	bl	8005f24 <HAL_TIM_Base_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f8cb 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_TIM3_Init+0x94>)
 800094c:	f005 fd86 	bl	800645c <HAL_TIM_ConfigClockSource>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 f8bd 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <MX_TIM3_Init+0x94>)
 8000968:	f006 f950 	bl	8006c0c <HAL_TIMEx_MasterConfigSynchronization>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000972:	f000 f8af 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000b8 	.word	0x200000b8
 8000984:	40000400 	.word	0x40000400

08000988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_USART2_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 8000994:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f006 f9a0 	bl	8006d04 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ca:	f000 f883 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000148 	.word	0x20000148
 80009d8:	40004400 	.word	0x40004400

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <MX_GPIO_Init+0xec>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a33      	ldr	r2, [pc, #204]	; (8000ac8 <MX_GPIO_Init+0xec>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a2c      	ldr	r2, [pc, #176]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a25      	ldr	r2, [pc, #148]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	4819      	ldr	r0, [pc, #100]	; (8000acc <MX_GPIO_Init+0xf0>)
 8000a68:	f004 fcd8 	bl	800541c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <MX_GPIO_Init+0xf4>)
 8000a84:	f004 fb1e 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <MX_GPIO_Init+0xf0>)
 8000aa0:	f004 fb10 	bl	80050c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sinal2_Pin Sinal1_Pin */
  GPIO_InitStruct.Pin = Sinal2_Pin|Sinal1_Pin;
 8000aa4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aaa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_GPIO_Init+0xf0>)
 8000abc:	f004 fb02 	bl	80050c4 <HAL_GPIO_Init>

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020800 	.word	0x40020800

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b1e:	2007      	movs	r0, #7
 8000b20:	f004 fa9c 	bl	800505c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b40:	d10e      	bne.n	8000b60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_TIM_Base_MspInit+0x64>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <HAL_TIM_Base_MspInit+0x64>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_TIM_Base_MspInit+0x64>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b5e:	e012      	b.n	8000b86 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <HAL_TIM_Base_MspInit+0x68>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d10d      	bne.n	8000b86 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_TIM_Base_MspInit+0x64>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_TIM_Base_MspInit+0x64>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_TIM_Base_MspInit+0x64>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40000400 	.word	0x40000400

08000b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bbc:	d11d      	bne.n	8000bfa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_TIM_MspPostInit+0x68>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_TIM_MspPostInit+0x68>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_TIM_MspPostInit+0x68>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <HAL_TIM_MspPostInit+0x6c>)
 8000bf6:	f004 fa65 	bl	80050c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_UART_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12b      	bne.n	8000c86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_UART_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c66:	230c      	movs	r3, #12
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c76:	2307      	movs	r3, #7
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_UART_MspInit+0x8c>)
 8000c82:	f004 fa1f 	bl	80050c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f004 f8c2 	bl	8004e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f006 fa06 	bl	8007130 <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20020000 	.word	0x20020000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	2000009c 	.word	0x2000009c
 8000d58:	200001c0 	.word	0x200001c0

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f004 fb42 	bl	800541c <HAL_GPIO_WritePin>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000dac:	887b      	ldrh	r3, [r7, #2]
 8000dae:	2201      	movs	r2, #1
 8000db0:	4619      	mov	r1, r3
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f004 fb32 	bl	800541c <HAL_GPIO_WritePin>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000dcc:	887b      	ldrh	r3, [r7, #2]
 8000dce:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f004 f970 	bl	80050c4 <HAL_GPIO_Init>
}
 8000de4:	bf00      	nop
 8000de6:	3720      	adds	r7, #32
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000df8:	887b      	ldrh	r3, [r7, #2]
 8000dfa:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f004 f958 	bl	80050c4 <HAL_GPIO_Init>
}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <width+0x14>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008

08000e34 <height>:

uint16_t height(void)
{ return _height; }
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <height+0x14>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2000000a 	.word	0x2000000a

08000e4c <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8000e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	b29b      	uxth	r3, r3
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8000e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	115b      	asrs	r3, r3, #5
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	f003 0320 	and.w	r3, r3, #32
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	105b      	asrs	r3, r3, #1
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	b29b      	uxth	r3, r3
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	121b      	asrs	r3, r3, #8
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f023 0307 	bic.w	r3, r3, #7
 8000ee2:	b2db      	uxtb	r3, r3
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	10db      	asrs	r3, r3, #3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	f023 0303 	bic.w	r3, r3, #3
 8000f04:	b2db      	uxtb	r3, r3
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	b2db      	uxtb	r3, r3
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	71bb      	strb	r3, [r7, #6]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	717b      	strb	r3, [r7, #5]
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f4a:	f023 0307 	bic.w	r3, r3, #7
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	797b      	ldrb	r3, [r7, #5]
 8000f62:	08db      	lsrs	r3, r3, #3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af02      	add	r7, sp, #8
 8000f80:	4603      	mov	r3, r0
 8000f82:	460a      	mov	r2, r1
 8000f84:	80fb      	strh	r3, [r7, #6]
 8000f86:	4613      	mov	r3, r2
 8000f88:	80bb      	strh	r3, [r7, #4]
 8000f8a:	f107 020e 	add.w	r2, r7, #14
 8000f8e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f92:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000f96:	2301      	movs	r3, #1
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f001 fc7a 	bl	8002894 <readGRAM>
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	80fb      	strh	r3, [r7, #6]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	80bb      	strh	r3, [r7, #4]
 8000fba:	88ba      	ldrh	r2, [r7, #4]
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f973 	bl	80012ac <writecmddata>
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	6039      	str	r1, [r7, #0]
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	717b      	strb	r3, [r7, #5]
 8000fde:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fab6 	bl	8001558 <WriteCmdParamN>
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <setReadDir>:
uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffc:	4811      	ldr	r0, [pc, #68]	; (8001044 <setReadDir+0x50>)
 8000ffe:	f7ff fedf 	bl	8000dc0 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <setReadDir+0x54>)
 8001006:	f7ff fedb 	bl	8000dc0 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 800100a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100e:	480d      	ldr	r0, [pc, #52]	; (8001044 <setReadDir+0x50>)
 8001010:	f7ff fed6 	bl	8000dc0 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8001014:	2108      	movs	r1, #8
 8001016:	480d      	ldr	r0, [pc, #52]	; (800104c <setReadDir+0x58>)
 8001018:	f7ff fed2 	bl	8000dc0 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 800101c:	2120      	movs	r1, #32
 800101e:	480b      	ldr	r0, [pc, #44]	; (800104c <setReadDir+0x58>)
 8001020:	f7ff fece 	bl	8000dc0 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8001024:	2110      	movs	r1, #16
 8001026:	4809      	ldr	r0, [pc, #36]	; (800104c <setReadDir+0x58>)
 8001028:	f7ff feca 	bl	8000dc0 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 800102c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <setReadDir+0x58>)
 8001032:	f7ff fec5 	bl	8000dc0 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8001036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103a:	4802      	ldr	r0, [pc, #8]	; (8001044 <setReadDir+0x50>)
 800103c:	f7ff fec0 	bl	8000dc0 <PIN_INPUT>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020000 	.word	0x40020000
 8001048:	40020800 	.word	0x40020800
 800104c:	40020400 	.word	0x40020400

08001050 <setWriteDir>:

void setWriteDir (void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8001054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001058:	4811      	ldr	r0, [pc, #68]	; (80010a0 <setWriteDir+0x50>)
 800105a:	f7ff fec7 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <setWriteDir+0x54>)
 8001062:	f7ff fec3 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8001066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <setWriteDir+0x50>)
 800106c:	f7ff febe 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8001070:	2108      	movs	r1, #8
 8001072:	480d      	ldr	r0, [pc, #52]	; (80010a8 <setWriteDir+0x58>)
 8001074:	f7ff feba 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8001078:	2120      	movs	r1, #32
 800107a:	480b      	ldr	r0, [pc, #44]	; (80010a8 <setWriteDir+0x58>)
 800107c:	f7ff feb6 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8001080:	2110      	movs	r1, #16
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <setWriteDir+0x58>)
 8001084:	f7ff feb2 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8001088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <setWriteDir+0x58>)
 800108e:	f7ff fead 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	4802      	ldr	r0, [pc, #8]	; (80010a0 <setWriteDir+0x50>)
 8001098:	f7ff fea8 	bl	8000dec <PIN_OUTPUT>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020400 	.word	0x40020400

080010ac <write24>:
    CS_IDLE;
}


static void write24(uint16_t color)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff08 	bl	8000ece <color565_to_r>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff13 	bl	8000ef0 <color565_to_g>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff1e 	bl	8000f12 <color565_to_b>
 80010d6:	4603      	mov	r3, r0
 80010d8:	737b      	strb	r3, [r7, #13]
    write8(r);
 80010da:	4b71      	ldr	r3, [pc, #452]	; (80012a0 <write24+0x1f4>)
 80010dc:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80010e0:	619a      	str	r2, [r3, #24]
 80010e2:	4b70      	ldr	r3, [pc, #448]	; (80012a4 <write24+0x1f8>)
 80010e4:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80010e8:	619a      	str	r2, [r3, #24]
 80010ea:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <write24+0x1fc>)
 80010ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010f0:	619a      	str	r2, [r3, #24]
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001102:	431a      	orrs	r2, r3
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	025b      	lsls	r3, r3, #9
 8001108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800110c:	431a      	orrs	r2, r3
 800110e:	4b64      	ldr	r3, [pc, #400]	; (80012a0 <write24+0x1f4>)
 8001110:	619a      	str	r2, [r3, #24]
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	105b      	asrs	r3, r3, #1
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	431a      	orrs	r2, r3
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	f003 0320 	and.w	r3, r3, #32
 800112c:	431a      	orrs	r2, r3
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	431a      	orrs	r2, r3
 8001136:	4b5b      	ldr	r3, [pc, #364]	; (80012a4 <write24+0x1f8>)
 8001138:	619a      	str	r2, [r3, #24]
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	019b      	lsls	r3, r3, #6
 800113e:	4a5a      	ldr	r2, [pc, #360]	; (80012a8 <write24+0x1fc>)
 8001140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001144:	6193      	str	r3, [r2, #24]
 8001146:	2102      	movs	r1, #2
 8001148:	4855      	ldr	r0, [pc, #340]	; (80012a0 <write24+0x1f4>)
 800114a:	f7ff fe19 	bl	8000d80 <PIN_LOW>
 800114e:	2102      	movs	r1, #2
 8001150:	4853      	ldr	r0, [pc, #332]	; (80012a0 <write24+0x1f4>)
 8001152:	f7ff fe15 	bl	8000d80 <PIN_LOW>
 8001156:	2102      	movs	r1, #2
 8001158:	4851      	ldr	r0, [pc, #324]	; (80012a0 <write24+0x1f4>)
 800115a:	f7ff fe11 	bl	8000d80 <PIN_LOW>
 800115e:	2102      	movs	r1, #2
 8001160:	484f      	ldr	r0, [pc, #316]	; (80012a0 <write24+0x1f4>)
 8001162:	f7ff fe1d 	bl	8000da0 <PIN_HIGH>
 8001166:	2102      	movs	r1, #2
 8001168:	484d      	ldr	r0, [pc, #308]	; (80012a0 <write24+0x1f4>)
 800116a:	f7ff fe19 	bl	8000da0 <PIN_HIGH>
    write8(g);
 800116e:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <write24+0x1f4>)
 8001170:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <write24+0x1f8>)
 8001178:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800117c:	619a      	str	r2, [r3, #24]
 800117e:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <write24+0x1fc>)
 8001180:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001184:	619a      	str	r2, [r3, #24]
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001196:	431a      	orrs	r2, r3
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	025b      	lsls	r3, r3, #9
 800119c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a0:	431a      	orrs	r2, r3
 80011a2:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <write24+0x1f4>)
 80011a4:	619a      	str	r2, [r3, #24]
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	105b      	asrs	r3, r3, #1
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	431a      	orrs	r2, r3
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	f003 0320 	and.w	r3, r3, #32
 80011c0:	431a      	orrs	r2, r3
 80011c2:	7bbb      	ldrb	r3, [r7, #14]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	431a      	orrs	r2, r3
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <write24+0x1f8>)
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	019b      	lsls	r3, r3, #6
 80011d2:	4a35      	ldr	r2, [pc, #212]	; (80012a8 <write24+0x1fc>)
 80011d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d8:	6193      	str	r3, [r2, #24]
 80011da:	2102      	movs	r1, #2
 80011dc:	4830      	ldr	r0, [pc, #192]	; (80012a0 <write24+0x1f4>)
 80011de:	f7ff fdcf 	bl	8000d80 <PIN_LOW>
 80011e2:	2102      	movs	r1, #2
 80011e4:	482e      	ldr	r0, [pc, #184]	; (80012a0 <write24+0x1f4>)
 80011e6:	f7ff fdcb 	bl	8000d80 <PIN_LOW>
 80011ea:	2102      	movs	r1, #2
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <write24+0x1f4>)
 80011ee:	f7ff fdc7 	bl	8000d80 <PIN_LOW>
 80011f2:	2102      	movs	r1, #2
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <write24+0x1f4>)
 80011f6:	f7ff fdd3 	bl	8000da0 <PIN_HIGH>
 80011fa:	2102      	movs	r1, #2
 80011fc:	4828      	ldr	r0, [pc, #160]	; (80012a0 <write24+0x1f4>)
 80011fe:	f7ff fdcf 	bl	8000da0 <PIN_HIGH>
    write8(b);
 8001202:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <write24+0x1f4>)
 8001204:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <write24+0x1f8>)
 800120c:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001210:	619a      	str	r2, [r3, #24]
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <write24+0x1fc>)
 8001214:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001218:	619a      	str	r2, [r3, #24]
 800121a:	7b7b      	ldrb	r3, [r7, #13]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001222:	7b7b      	ldrb	r3, [r7, #13]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122a:	431a      	orrs	r2, r3
 800122c:	7b7b      	ldrb	r3, [r7, #13]
 800122e:	025b      	lsls	r3, r3, #9
 8001230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001234:	431a      	orrs	r2, r3
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <write24+0x1f4>)
 8001238:	619a      	str	r2, [r3, #24]
 800123a:	7b7b      	ldrb	r3, [r7, #13]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001242:	7b7b      	ldrb	r3, [r7, #13]
 8001244:	105b      	asrs	r3, r3, #1
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	431a      	orrs	r2, r3
 800124c:	7b7b      	ldrb	r3, [r7, #13]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	f003 0320 	and.w	r3, r3, #32
 8001254:	431a      	orrs	r2, r3
 8001256:	7b7b      	ldrb	r3, [r7, #13]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	431a      	orrs	r2, r3
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <write24+0x1f8>)
 8001260:	619a      	str	r2, [r3, #24]
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	019b      	lsls	r3, r3, #6
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <write24+0x1fc>)
 8001268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	2102      	movs	r1, #2
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <write24+0x1f4>)
 8001272:	f7ff fd85 	bl	8000d80 <PIN_LOW>
 8001276:	2102      	movs	r1, #2
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <write24+0x1f4>)
 800127a:	f7ff fd81 	bl	8000d80 <PIN_LOW>
 800127e:	2102      	movs	r1, #2
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <write24+0x1f4>)
 8001282:	f7ff fd7d 	bl	8000d80 <PIN_LOW>
 8001286:	2102      	movs	r1, #2
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <write24+0x1f4>)
 800128a:	f7ff fd89 	bl	8000da0 <PIN_HIGH>
 800128e:	2102      	movs	r1, #2
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <write24+0x1f4>)
 8001292:	f7ff fd85 	bl	8000da0 <PIN_HIGH>
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800

080012ac <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	460a      	mov	r2, r1
 80012b6:	80fb      	strh	r3, [r7, #6]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 80012bc:	2101      	movs	r1, #1
 80012be:	48a3      	ldr	r0, [pc, #652]	; (800154c <writecmddata+0x2a0>)
 80012c0:	f7ff fd5e 	bl	8000d80 <PIN_LOW>
    WriteCmd(cmd);
 80012c4:	2110      	movs	r1, #16
 80012c6:	48a2      	ldr	r0, [pc, #648]	; (8001550 <writecmddata+0x2a4>)
 80012c8:	f7ff fd5a 	bl	8000d80 <PIN_LOW>
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	73bb      	strb	r3, [r7, #14]
 80012d8:	4b9d      	ldr	r3, [pc, #628]	; (8001550 <writecmddata+0x2a4>)
 80012da:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80012de:	619a      	str	r2, [r3, #24]
 80012e0:	4b9a      	ldr	r3, [pc, #616]	; (800154c <writecmddata+0x2a0>)
 80012e2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80012e6:	619a      	str	r2, [r3, #24]
 80012e8:	4b9a      	ldr	r3, [pc, #616]	; (8001554 <writecmddata+0x2a8>)
 80012ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012ee:	619a      	str	r2, [r3, #24]
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001300:	431a      	orrs	r2, r3
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	025b      	lsls	r3, r3, #9
 8001306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800130a:	431a      	orrs	r2, r3
 800130c:	4b90      	ldr	r3, [pc, #576]	; (8001550 <writecmddata+0x2a4>)
 800130e:	619a      	str	r2, [r3, #24]
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	105b      	asrs	r3, r3, #1
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	431a      	orrs	r2, r3
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	f003 0320 	and.w	r3, r3, #32
 800132a:	431a      	orrs	r2, r3
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	431a      	orrs	r2, r3
 8001334:	4b85      	ldr	r3, [pc, #532]	; (800154c <writecmddata+0x2a0>)
 8001336:	619a      	str	r2, [r3, #24]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	019b      	lsls	r3, r3, #6
 800133c:	4a85      	ldr	r2, [pc, #532]	; (8001554 <writecmddata+0x2a8>)
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	2102      	movs	r1, #2
 8001346:	4882      	ldr	r0, [pc, #520]	; (8001550 <writecmddata+0x2a4>)
 8001348:	f7ff fd1a 	bl	8000d80 <PIN_LOW>
 800134c:	2102      	movs	r1, #2
 800134e:	4880      	ldr	r0, [pc, #512]	; (8001550 <writecmddata+0x2a4>)
 8001350:	f7ff fd16 	bl	8000d80 <PIN_LOW>
 8001354:	2102      	movs	r1, #2
 8001356:	487e      	ldr	r0, [pc, #504]	; (8001550 <writecmddata+0x2a4>)
 8001358:	f7ff fd12 	bl	8000d80 <PIN_LOW>
 800135c:	2102      	movs	r1, #2
 800135e:	487c      	ldr	r0, [pc, #496]	; (8001550 <writecmddata+0x2a4>)
 8001360:	f7ff fd1e 	bl	8000da0 <PIN_HIGH>
 8001364:	2102      	movs	r1, #2
 8001366:	487a      	ldr	r0, [pc, #488]	; (8001550 <writecmddata+0x2a4>)
 8001368:	f7ff fd1a 	bl	8000da0 <PIN_HIGH>
 800136c:	4b78      	ldr	r3, [pc, #480]	; (8001550 <writecmddata+0x2a4>)
 800136e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001372:	619a      	str	r2, [r3, #24]
 8001374:	4b75      	ldr	r3, [pc, #468]	; (800154c <writecmddata+0x2a0>)
 8001376:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800137a:	619a      	str	r2, [r3, #24]
 800137c:	4b75      	ldr	r3, [pc, #468]	; (8001554 <writecmddata+0x2a8>)
 800137e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800138c:	7bbb      	ldrb	r3, [r7, #14]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	431a      	orrs	r2, r3
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	025b      	lsls	r3, r3, #9
 800139a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800139e:	431a      	orrs	r2, r3
 80013a0:	4b6b      	ldr	r3, [pc, #428]	; (8001550 <writecmddata+0x2a4>)
 80013a2:	619a      	str	r2, [r3, #24]
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80013ac:	7bbb      	ldrb	r3, [r7, #14]
 80013ae:	105b      	asrs	r3, r3, #1
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	431a      	orrs	r2, r3
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	f003 0320 	and.w	r3, r3, #32
 80013be:	431a      	orrs	r2, r3
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	431a      	orrs	r2, r3
 80013c8:	4b60      	ldr	r3, [pc, #384]	; (800154c <writecmddata+0x2a0>)
 80013ca:	619a      	str	r2, [r3, #24]
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	019b      	lsls	r3, r3, #6
 80013d0:	4a60      	ldr	r2, [pc, #384]	; (8001554 <writecmddata+0x2a8>)
 80013d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	2102      	movs	r1, #2
 80013da:	485d      	ldr	r0, [pc, #372]	; (8001550 <writecmddata+0x2a4>)
 80013dc:	f7ff fcd0 	bl	8000d80 <PIN_LOW>
 80013e0:	2102      	movs	r1, #2
 80013e2:	485b      	ldr	r0, [pc, #364]	; (8001550 <writecmddata+0x2a4>)
 80013e4:	f7ff fccc 	bl	8000d80 <PIN_LOW>
 80013e8:	2102      	movs	r1, #2
 80013ea:	4859      	ldr	r0, [pc, #356]	; (8001550 <writecmddata+0x2a4>)
 80013ec:	f7ff fcc8 	bl	8000d80 <PIN_LOW>
 80013f0:	2102      	movs	r1, #2
 80013f2:	4857      	ldr	r0, [pc, #348]	; (8001550 <writecmddata+0x2a4>)
 80013f4:	f7ff fcd4 	bl	8000da0 <PIN_HIGH>
 80013f8:	2102      	movs	r1, #2
 80013fa:	4855      	ldr	r0, [pc, #340]	; (8001550 <writecmddata+0x2a4>)
 80013fc:	f7ff fcd0 	bl	8000da0 <PIN_HIGH>
 8001400:	2110      	movs	r1, #16
 8001402:	4853      	ldr	r0, [pc, #332]	; (8001550 <writecmddata+0x2a4>)
 8001404:	f7ff fccc 	bl	8000da0 <PIN_HIGH>
    WriteData(dat);
 8001408:	88bb      	ldrh	r3, [r7, #4]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	b29b      	uxth	r3, r3
 800140e:	737b      	strb	r3, [r7, #13]
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	733b      	strb	r3, [r7, #12]
 8001414:	4b4e      	ldr	r3, [pc, #312]	; (8001550 <writecmddata+0x2a4>)
 8001416:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	4b4b      	ldr	r3, [pc, #300]	; (800154c <writecmddata+0x2a0>)
 800141e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001422:	619a      	str	r2, [r3, #24]
 8001424:	4b4b      	ldr	r3, [pc, #300]	; (8001554 <writecmddata+0x2a8>)
 8001426:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800142a:	619a      	str	r2, [r3, #24]
 800142c:	7b7b      	ldrb	r3, [r7, #13]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001434:	7b7b      	ldrb	r3, [r7, #13]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143c:	431a      	orrs	r2, r3
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	025b      	lsls	r3, r3, #9
 8001442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001446:	431a      	orrs	r2, r3
 8001448:	4b41      	ldr	r3, [pc, #260]	; (8001550 <writecmddata+0x2a4>)
 800144a:	619a      	str	r2, [r3, #24]
 800144c:	7b7b      	ldrb	r3, [r7, #13]
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	105b      	asrs	r3, r3, #1
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	431a      	orrs	r2, r3
 800145e:	7b7b      	ldrb	r3, [r7, #13]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	431a      	orrs	r2, r3
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	431a      	orrs	r2, r3
 8001470:	4b36      	ldr	r3, [pc, #216]	; (800154c <writecmddata+0x2a0>)
 8001472:	619a      	str	r2, [r3, #24]
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	019b      	lsls	r3, r3, #6
 8001478:	4a36      	ldr	r2, [pc, #216]	; (8001554 <writecmddata+0x2a8>)
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	2102      	movs	r1, #2
 8001482:	4833      	ldr	r0, [pc, #204]	; (8001550 <writecmddata+0x2a4>)
 8001484:	f7ff fc7c 	bl	8000d80 <PIN_LOW>
 8001488:	2102      	movs	r1, #2
 800148a:	4831      	ldr	r0, [pc, #196]	; (8001550 <writecmddata+0x2a4>)
 800148c:	f7ff fc78 	bl	8000d80 <PIN_LOW>
 8001490:	2102      	movs	r1, #2
 8001492:	482f      	ldr	r0, [pc, #188]	; (8001550 <writecmddata+0x2a4>)
 8001494:	f7ff fc74 	bl	8000d80 <PIN_LOW>
 8001498:	2102      	movs	r1, #2
 800149a:	482d      	ldr	r0, [pc, #180]	; (8001550 <writecmddata+0x2a4>)
 800149c:	f7ff fc80 	bl	8000da0 <PIN_HIGH>
 80014a0:	2102      	movs	r1, #2
 80014a2:	482b      	ldr	r0, [pc, #172]	; (8001550 <writecmddata+0x2a4>)
 80014a4:	f7ff fc7c 	bl	8000da0 <PIN_HIGH>
 80014a8:	4b29      	ldr	r3, [pc, #164]	; (8001550 <writecmddata+0x2a4>)
 80014aa:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80014ae:	619a      	str	r2, [r3, #24]
 80014b0:	4b26      	ldr	r3, [pc, #152]	; (800154c <writecmddata+0x2a0>)
 80014b2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <writecmddata+0x2a8>)
 80014ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014be:	619a      	str	r2, [r3, #24]
 80014c0:	7b3b      	ldrb	r3, [r7, #12]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80014c8:	7b3b      	ldrb	r3, [r7, #12]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d0:	431a      	orrs	r2, r3
 80014d2:	7b3b      	ldrb	r3, [r7, #12]
 80014d4:	025b      	lsls	r3, r3, #9
 80014d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014da:	431a      	orrs	r2, r3
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <writecmddata+0x2a4>)
 80014de:	619a      	str	r2, [r3, #24]
 80014e0:	7b3b      	ldrb	r3, [r7, #12]
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80014e8:	7b3b      	ldrb	r3, [r7, #12]
 80014ea:	105b      	asrs	r3, r3, #1
 80014ec:	f003 0310 	and.w	r3, r3, #16
 80014f0:	431a      	orrs	r2, r3
 80014f2:	7b3b      	ldrb	r3, [r7, #12]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	f003 0320 	and.w	r3, r3, #32
 80014fa:	431a      	orrs	r2, r3
 80014fc:	7b3b      	ldrb	r3, [r7, #12]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	431a      	orrs	r2, r3
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <writecmddata+0x2a0>)
 8001506:	619a      	str	r2, [r3, #24]
 8001508:	7b3b      	ldrb	r3, [r7, #12]
 800150a:	019b      	lsls	r3, r3, #6
 800150c:	4a11      	ldr	r2, [pc, #68]	; (8001554 <writecmddata+0x2a8>)
 800150e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	2102      	movs	r1, #2
 8001516:	480e      	ldr	r0, [pc, #56]	; (8001550 <writecmddata+0x2a4>)
 8001518:	f7ff fc32 	bl	8000d80 <PIN_LOW>
 800151c:	2102      	movs	r1, #2
 800151e:	480c      	ldr	r0, [pc, #48]	; (8001550 <writecmddata+0x2a4>)
 8001520:	f7ff fc2e 	bl	8000d80 <PIN_LOW>
 8001524:	2102      	movs	r1, #2
 8001526:	480a      	ldr	r0, [pc, #40]	; (8001550 <writecmddata+0x2a4>)
 8001528:	f7ff fc2a 	bl	8000d80 <PIN_LOW>
 800152c:	2102      	movs	r1, #2
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <writecmddata+0x2a4>)
 8001530:	f7ff fc36 	bl	8000da0 <PIN_HIGH>
 8001534:	2102      	movs	r1, #2
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <writecmddata+0x2a4>)
 8001538:	f7ff fc32 	bl	8000da0 <PIN_HIGH>
    CS_IDLE;
 800153c:	2101      	movs	r1, #1
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <writecmddata+0x2a0>)
 8001540:	f7ff fc2e 	bl	8000da0 <PIN_HIGH>
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40020400 	.word	0x40020400
 8001550:	40020000 	.word	0x40020000
 8001554:	40020800 	.word	0x40020800

08001558 <WriteCmdParamN>:


static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	603a      	str	r2, [r7, #0]
 8001562:	80fb      	strh	r3, [r7, #6]
 8001564:	460b      	mov	r3, r1
 8001566:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8001568:	2101      	movs	r1, #1
 800156a:	4853      	ldr	r0, [pc, #332]	; (80016b8 <WriteCmdParamN+0x160>)
 800156c:	f7ff fc08 	bl	8000d80 <PIN_LOW>
    WriteCmd(cmd);
 8001570:	2110      	movs	r1, #16
 8001572:	4852      	ldr	r0, [pc, #328]	; (80016bc <WriteCmdParamN+0x164>)
 8001574:	f7ff fc04 	bl	8000d80 <PIN_LOW>
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	b29b      	uxth	r3, r3
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	73bb      	strb	r3, [r7, #14]
 8001584:	4b4d      	ldr	r3, [pc, #308]	; (80016bc <WriteCmdParamN+0x164>)
 8001586:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <WriteCmdParamN+0x160>)
 800158e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001592:	619a      	str	r2, [r3, #24]
 8001594:	4b4a      	ldr	r3, [pc, #296]	; (80016c0 <WriteCmdParamN+0x168>)
 8001596:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800159a:	619a      	str	r2, [r3, #24]
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ac:	431a      	orrs	r2, r3
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	025b      	lsls	r3, r3, #9
 80015b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b6:	431a      	orrs	r2, r3
 80015b8:	4b40      	ldr	r3, [pc, #256]	; (80016bc <WriteCmdParamN+0x164>)
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	105b      	asrs	r3, r3, #1
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	431a      	orrs	r2, r3
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	431a      	orrs	r2, r3
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	431a      	orrs	r2, r3
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <WriteCmdParamN+0x160>)
 80015e2:	619a      	str	r2, [r3, #24]
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	019b      	lsls	r3, r3, #6
 80015e8:	4a35      	ldr	r2, [pc, #212]	; (80016c0 <WriteCmdParamN+0x168>)
 80015ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	2102      	movs	r1, #2
 80015f2:	4832      	ldr	r0, [pc, #200]	; (80016bc <WriteCmdParamN+0x164>)
 80015f4:	f7ff fbc4 	bl	8000d80 <PIN_LOW>
 80015f8:	2102      	movs	r1, #2
 80015fa:	4830      	ldr	r0, [pc, #192]	; (80016bc <WriteCmdParamN+0x164>)
 80015fc:	f7ff fbc0 	bl	8000d80 <PIN_LOW>
 8001600:	2102      	movs	r1, #2
 8001602:	482e      	ldr	r0, [pc, #184]	; (80016bc <WriteCmdParamN+0x164>)
 8001604:	f7ff fbbc 	bl	8000d80 <PIN_LOW>
 8001608:	2102      	movs	r1, #2
 800160a:	482c      	ldr	r0, [pc, #176]	; (80016bc <WriteCmdParamN+0x164>)
 800160c:	f7ff fbc8 	bl	8000da0 <PIN_HIGH>
 8001610:	2102      	movs	r1, #2
 8001612:	482a      	ldr	r0, [pc, #168]	; (80016bc <WriteCmdParamN+0x164>)
 8001614:	f7ff fbc4 	bl	8000da0 <PIN_HIGH>
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <WriteCmdParamN+0x164>)
 800161a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800161e:	619a      	str	r2, [r3, #24]
 8001620:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <WriteCmdParamN+0x160>)
 8001622:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001626:	619a      	str	r2, [r3, #24]
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <WriteCmdParamN+0x168>)
 800162a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800162e:	619a      	str	r2, [r3, #24]
 8001630:	7bbb      	ldrb	r3, [r7, #14]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001638:	7bbb      	ldrb	r3, [r7, #14]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001640:	431a      	orrs	r2, r3
 8001642:	7bbb      	ldrb	r3, [r7, #14]
 8001644:	025b      	lsls	r3, r3, #9
 8001646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164a:	431a      	orrs	r2, r3
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <WriteCmdParamN+0x164>)
 800164e:	619a      	str	r2, [r3, #24]
 8001650:	7bbb      	ldrb	r3, [r7, #14]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001658:	7bbb      	ldrb	r3, [r7, #14]
 800165a:	105b      	asrs	r3, r3, #1
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	431a      	orrs	r2, r3
 8001662:	7bbb      	ldrb	r3, [r7, #14]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	431a      	orrs	r2, r3
 800166c:	7bbb      	ldrb	r3, [r7, #14]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	431a      	orrs	r2, r3
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <WriteCmdParamN+0x160>)
 8001676:	619a      	str	r2, [r3, #24]
 8001678:	7bbb      	ldrb	r3, [r7, #14]
 800167a:	019b      	lsls	r3, r3, #6
 800167c:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <WriteCmdParamN+0x168>)
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	2102      	movs	r1, #2
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <WriteCmdParamN+0x164>)
 8001688:	f7ff fb7a 	bl	8000d80 <PIN_LOW>
 800168c:	2102      	movs	r1, #2
 800168e:	480b      	ldr	r0, [pc, #44]	; (80016bc <WriteCmdParamN+0x164>)
 8001690:	f7ff fb76 	bl	8000d80 <PIN_LOW>
 8001694:	2102      	movs	r1, #2
 8001696:	4809      	ldr	r0, [pc, #36]	; (80016bc <WriteCmdParamN+0x164>)
 8001698:	f7ff fb72 	bl	8000d80 <PIN_LOW>
 800169c:	2102      	movs	r1, #2
 800169e:	4807      	ldr	r0, [pc, #28]	; (80016bc <WriteCmdParamN+0x164>)
 80016a0:	f7ff fb7e 	bl	8000da0 <PIN_HIGH>
 80016a4:	2102      	movs	r1, #2
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <WriteCmdParamN+0x164>)
 80016a8:	f7ff fb7a 	bl	8000da0 <PIN_HIGH>
 80016ac:	2110      	movs	r1, #16
 80016ae:	4803      	ldr	r0, [pc, #12]	; (80016bc <WriteCmdParamN+0x164>)
 80016b0:	f7ff fb76 	bl	8000da0 <PIN_HIGH>
    while (N-- > 0) {
 80016b4:	e104      	b.n	80018c0 <WriteCmdParamN+0x368>
 80016b6:	bf00      	nop
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	603a      	str	r2, [r7, #0]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	737b      	strb	r3, [r7, #13]
        write8(u8);
 80016ce:	4b85      	ldr	r3, [pc, #532]	; (80018e4 <WriteCmdParamN+0x38c>)
 80016d0:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80016d4:	619a      	str	r2, [r3, #24]
 80016d6:	4b84      	ldr	r3, [pc, #528]	; (80018e8 <WriteCmdParamN+0x390>)
 80016d8:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80016dc:	619a      	str	r2, [r3, #24]
 80016de:	4b83      	ldr	r3, [pc, #524]	; (80018ec <WriteCmdParamN+0x394>)
 80016e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016e4:	619a      	str	r2, [r3, #24]
 80016e6:	7b7b      	ldrb	r3, [r7, #13]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	431a      	orrs	r2, r3
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001700:	431a      	orrs	r2, r3
 8001702:	4b78      	ldr	r3, [pc, #480]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001704:	619a      	str	r2, [r3, #24]
 8001706:	7b7b      	ldrb	r3, [r7, #13]
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800170e:	7b7b      	ldrb	r3, [r7, #13]
 8001710:	105b      	asrs	r3, r3, #1
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	431a      	orrs	r2, r3
 8001718:	7b7b      	ldrb	r3, [r7, #13]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	f003 0320 	and.w	r3, r3, #32
 8001720:	431a      	orrs	r2, r3
 8001722:	7b7b      	ldrb	r3, [r7, #13]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	431a      	orrs	r2, r3
 800172a:	4b6f      	ldr	r3, [pc, #444]	; (80018e8 <WriteCmdParamN+0x390>)
 800172c:	619a      	str	r2, [r3, #24]
 800172e:	7b7b      	ldrb	r3, [r7, #13]
 8001730:	019b      	lsls	r3, r3, #6
 8001732:	4a6e      	ldr	r2, [pc, #440]	; (80018ec <WriteCmdParamN+0x394>)
 8001734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001738:	6193      	str	r3, [r2, #24]
 800173a:	2102      	movs	r1, #2
 800173c:	4869      	ldr	r0, [pc, #420]	; (80018e4 <WriteCmdParamN+0x38c>)
 800173e:	f7ff fb1f 	bl	8000d80 <PIN_LOW>
 8001742:	2102      	movs	r1, #2
 8001744:	4867      	ldr	r0, [pc, #412]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001746:	f7ff fb1b 	bl	8000d80 <PIN_LOW>
 800174a:	2102      	movs	r1, #2
 800174c:	4865      	ldr	r0, [pc, #404]	; (80018e4 <WriteCmdParamN+0x38c>)
 800174e:	f7ff fb17 	bl	8000d80 <PIN_LOW>
 8001752:	2102      	movs	r1, #2
 8001754:	4863      	ldr	r0, [pc, #396]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001756:	f7ff fb23 	bl	8000da0 <PIN_HIGH>
 800175a:	2102      	movs	r1, #2
 800175c:	4861      	ldr	r0, [pc, #388]	; (80018e4 <WriteCmdParamN+0x38c>)
 800175e:	f7ff fb1f 	bl	8000da0 <PIN_HIGH>
        if (N && is8347) {
 8001762:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80aa 	beq.w	80018c0 <WriteCmdParamN+0x368>
 800176c:	4b60      	ldr	r3, [pc, #384]	; (80018f0 <WriteCmdParamN+0x398>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80a5 	beq.w	80018c0 <WriteCmdParamN+0x368>
            cmd++;
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	3301      	adds	r3, #1
 800177a:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 800177c:	2110      	movs	r1, #16
 800177e:	4859      	ldr	r0, [pc, #356]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001780:	f7ff fafe 	bl	8000d80 <PIN_LOW>
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	b29b      	uxth	r3, r3
 800178a:	733b      	strb	r3, [r7, #12]
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	72fb      	strb	r3, [r7, #11]
 8001790:	4b54      	ldr	r3, [pc, #336]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001792:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001796:	619a      	str	r2, [r3, #24]
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <WriteCmdParamN+0x390>)
 800179a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800179e:	619a      	str	r2, [r3, #24]
 80017a0:	4b52      	ldr	r3, [pc, #328]	; (80018ec <WriteCmdParamN+0x394>)
 80017a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017a6:	619a      	str	r2, [r3, #24]
 80017a8:	7b3b      	ldrb	r3, [r7, #12]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80017b0:	7b3b      	ldrb	r3, [r7, #12]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	431a      	orrs	r2, r3
 80017ba:	7b3b      	ldrb	r3, [r7, #12]
 80017bc:	025b      	lsls	r3, r3, #9
 80017be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c2:	431a      	orrs	r2, r3
 80017c4:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <WriteCmdParamN+0x38c>)
 80017c6:	619a      	str	r2, [r3, #24]
 80017c8:	7b3b      	ldrb	r3, [r7, #12]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80017d0:	7b3b      	ldrb	r3, [r7, #12]
 80017d2:	105b      	asrs	r3, r3, #1
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	431a      	orrs	r2, r3
 80017da:	7b3b      	ldrb	r3, [r7, #12]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	431a      	orrs	r2, r3
 80017e4:	7b3b      	ldrb	r3, [r7, #12]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	431a      	orrs	r2, r3
 80017ec:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <WriteCmdParamN+0x390>)
 80017ee:	619a      	str	r2, [r3, #24]
 80017f0:	7b3b      	ldrb	r3, [r7, #12]
 80017f2:	019b      	lsls	r3, r3, #6
 80017f4:	4a3d      	ldr	r2, [pc, #244]	; (80018ec <WriteCmdParamN+0x394>)
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	2102      	movs	r1, #2
 80017fe:	4839      	ldr	r0, [pc, #228]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001800:	f7ff fabe 	bl	8000d80 <PIN_LOW>
 8001804:	2102      	movs	r1, #2
 8001806:	4837      	ldr	r0, [pc, #220]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001808:	f7ff faba 	bl	8000d80 <PIN_LOW>
 800180c:	2102      	movs	r1, #2
 800180e:	4835      	ldr	r0, [pc, #212]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001810:	f7ff fab6 	bl	8000d80 <PIN_LOW>
 8001814:	2102      	movs	r1, #2
 8001816:	4833      	ldr	r0, [pc, #204]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001818:	f7ff fac2 	bl	8000da0 <PIN_HIGH>
 800181c:	2102      	movs	r1, #2
 800181e:	4831      	ldr	r0, [pc, #196]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001820:	f7ff fabe 	bl	8000da0 <PIN_HIGH>
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001826:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800182a:	619a      	str	r2, [r3, #24]
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <WriteCmdParamN+0x390>)
 800182e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001832:	619a      	str	r2, [r3, #24]
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <WriteCmdParamN+0x394>)
 8001836:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800183a:	619a      	str	r2, [r3, #24]
 800183c:	7afb      	ldrb	r3, [r7, #11]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001844:	7afb      	ldrb	r3, [r7, #11]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184c:	431a      	orrs	r2, r3
 800184e:	7afb      	ldrb	r3, [r7, #11]
 8001850:	025b      	lsls	r3, r3, #9
 8001852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001856:	431a      	orrs	r2, r3
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <WriteCmdParamN+0x38c>)
 800185a:	619a      	str	r2, [r3, #24]
 800185c:	7afb      	ldrb	r3, [r7, #11]
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001864:	7afb      	ldrb	r3, [r7, #11]
 8001866:	105b      	asrs	r3, r3, #1
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	431a      	orrs	r2, r3
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	431a      	orrs	r2, r3
 8001878:	7afb      	ldrb	r3, [r7, #11]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	431a      	orrs	r2, r3
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <WriteCmdParamN+0x390>)
 8001882:	619a      	str	r2, [r3, #24]
 8001884:	7afb      	ldrb	r3, [r7, #11]
 8001886:	019b      	lsls	r3, r3, #6
 8001888:	4a18      	ldr	r2, [pc, #96]	; (80018ec <WriteCmdParamN+0x394>)
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	2102      	movs	r1, #2
 8001892:	4814      	ldr	r0, [pc, #80]	; (80018e4 <WriteCmdParamN+0x38c>)
 8001894:	f7ff fa74 	bl	8000d80 <PIN_LOW>
 8001898:	2102      	movs	r1, #2
 800189a:	4812      	ldr	r0, [pc, #72]	; (80018e4 <WriteCmdParamN+0x38c>)
 800189c:	f7ff fa70 	bl	8000d80 <PIN_LOW>
 80018a0:	2102      	movs	r1, #2
 80018a2:	4810      	ldr	r0, [pc, #64]	; (80018e4 <WriteCmdParamN+0x38c>)
 80018a4:	f7ff fa6c 	bl	8000d80 <PIN_LOW>
 80018a8:	2102      	movs	r1, #2
 80018aa:	480e      	ldr	r0, [pc, #56]	; (80018e4 <WriteCmdParamN+0x38c>)
 80018ac:	f7ff fa78 	bl	8000da0 <PIN_HIGH>
 80018b0:	2102      	movs	r1, #2
 80018b2:	480c      	ldr	r0, [pc, #48]	; (80018e4 <WriteCmdParamN+0x38c>)
 80018b4:	f7ff fa74 	bl	8000da0 <PIN_HIGH>
 80018b8:	2110      	movs	r1, #16
 80018ba:	480a      	ldr	r0, [pc, #40]	; (80018e4 <WriteCmdParamN+0x38c>)
 80018bc:	f7ff fa70 	bl	8000da0 <PIN_HIGH>
    while (N-- > 0) {
 80018c0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	3a01      	subs	r2, #1
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	717a      	strb	r2, [r7, #5]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f73f aef9 	bgt.w	80016c4 <WriteCmdParamN+0x16c>
        }
    }
    CS_IDLE;
 80018d2:	2101      	movs	r1, #1
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <WriteCmdParamN+0x390>)
 80018d6:	f7ff fa63 	bl	8000da0 <PIN_HIGH>
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020800 	.word	0x40020800
 80018f0:	200000a1 	.word	0x200000a1

080018f4 <WriteCmdParam4>:


static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4604      	mov	r4, r0
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4623      	mov	r3, r4
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	4603      	mov	r3, r0
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	460b      	mov	r3, r1
 800190c:	717b      	strb	r3, [r7, #5]
 800190e:	4613      	mov	r3, r2
 8001910:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	733b      	strb	r3, [r7, #12]
 8001916:	797b      	ldrb	r3, [r7, #5]
 8001918:	737b      	strb	r3, [r7, #13]
 800191a:	793b      	ldrb	r3, [r7, #4]
 800191c:	73bb      	strb	r3, [r7, #14]
 800191e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001922:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	b29b      	uxth	r3, r3
 8001928:	f107 020c 	add.w	r2, r7, #12
 800192c:	2104      	movs	r1, #4
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fe12 	bl	8001558 <WriteCmdParamN>
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}

0800193c <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F

static void init_table(const void *table, int16_t size)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 800194c:	e046      	b.n	80019dc <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	627a      	str	r2, [r7, #36]	; 0x24
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	627a      	str	r2, [r7, #36]	; 0x24
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 8001966:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800196a:	2b7f      	cmp	r3, #127	; 0x7f
 800196c:	d108      	bne.n	8001980 <init_table+0x44>
        {
            delay(len);
 800196e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001972:	4618      	mov	r0, r3
 8001974:	f003 f976 	bl	8004c64 <delay>
            len = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800197e:	e024      	b.n	80019ca <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8001980:	2300      	movs	r3, #0
 8001982:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001986:	e010      	b.n	80019aa <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	627a      	str	r2, [r7, #36]	; 0x24
 800198e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001992:	7819      	ldrb	r1, [r3, #0]
 8001994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001998:	4413      	add	r3, r2
 800199a:	460a      	mov	r2, r1
 800199c:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 80019a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019a4:	3301      	adds	r3, #1
 80019a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019aa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80019ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d3e8      	bcc.n	8001988 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 80019b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80019c0:	f107 0208 	add.w	r2, r7, #8
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fdc7 	bl	8001558 <WriteCmdParamN>
        }
        size -= len + 2;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b02      	subs	r3, #2
 80019d8:	b29b      	uxth	r3, r3
 80019da:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 80019dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	dcb4      	bgt.n	800194e <init_table+0x12>
    }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 80019fe:	e01d      	b.n	8001a3c <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1c9a      	adds	r2, r3, #2
 8001a04:	60fa      	str	r2, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1c9a      	adds	r2, r3, #2
 8001a0e:	60fa      	str	r2, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8001a14:	897b      	ldrh	r3, [r7, #10]
 8001a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d104      	bne.n	8001a28 <init_table16+0x3a>
            delay(d);
 8001a1e:	893b      	ldrh	r3, [r7, #8]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 f91f 	bl	8004c64 <delay>
 8001a26:	e005      	b.n	8001a34 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8001a28:	893a      	ldrh	r2, [r7, #8]
 8001a2a:	897b      	ldrh	r3, [r7, #10]
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fc3c 	bl	80012ac <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	3b04      	subs	r3, #4
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8001a3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	dcdd      	bgt.n	8001a00 <init_table16+0x12>
    }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <reset>:


void reset(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    done_reset = 1;
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <reset+0x88>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8001a5a:	f7ff faf9 	bl	8001050 <setWriteDir>
    CTL_INIT();
 8001a5e:	2101      	movs	r1, #1
 8001a60:	481e      	ldr	r0, [pc, #120]	; (8001adc <reset+0x8c>)
 8001a62:	f7ff f9c3 	bl	8000dec <PIN_OUTPUT>
 8001a66:	2102      	movs	r1, #2
 8001a68:	481c      	ldr	r0, [pc, #112]	; (8001adc <reset+0x8c>)
 8001a6a:	f7ff f9bf 	bl	8000dec <PIN_OUTPUT>
 8001a6e:	2110      	movs	r1, #16
 8001a70:	481a      	ldr	r0, [pc, #104]	; (8001adc <reset+0x8c>)
 8001a72:	f7ff f9bb 	bl	8000dec <PIN_OUTPUT>
 8001a76:	2101      	movs	r1, #1
 8001a78:	4819      	ldr	r0, [pc, #100]	; (8001ae0 <reset+0x90>)
 8001a7a:	f7ff f9b7 	bl	8000dec <PIN_OUTPUT>
 8001a7e:	2102      	movs	r1, #2
 8001a80:	4818      	ldr	r0, [pc, #96]	; (8001ae4 <reset+0x94>)
 8001a82:	f7ff f9b3 	bl	8000dec <PIN_OUTPUT>
    CS_IDLE;
 8001a86:	2101      	movs	r1, #1
 8001a88:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <reset+0x90>)
 8001a8a:	f7ff f989 	bl	8000da0 <PIN_HIGH>
    RD_IDLE;
 8001a8e:	2101      	movs	r1, #1
 8001a90:	4812      	ldr	r0, [pc, #72]	; (8001adc <reset+0x8c>)
 8001a92:	f7ff f985 	bl	8000da0 <PIN_HIGH>
    WR_IDLE;
 8001a96:	2102      	movs	r1, #2
 8001a98:	4810      	ldr	r0, [pc, #64]	; (8001adc <reset+0x8c>)
 8001a9a:	f7ff f981 	bl	8000da0 <PIN_HIGH>
    RESET_IDLE;
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4810      	ldr	r0, [pc, #64]	; (8001ae4 <reset+0x94>)
 8001aa2:	f7ff f97d 	bl	8000da0 <PIN_HIGH>
    delay(50);
 8001aa6:	2032      	movs	r0, #50	; 0x32
 8001aa8:	f003 f8dc 	bl	8004c64 <delay>
    RESET_ACTIVE;
 8001aac:	2102      	movs	r1, #2
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <reset+0x94>)
 8001ab0:	f7ff f966 	bl	8000d80 <PIN_LOW>
    delay(100);
 8001ab4:	2064      	movs	r0, #100	; 0x64
 8001ab6:	f003 f8d5 	bl	8004c64 <delay>
    RESET_IDLE;
 8001aba:	2102      	movs	r1, #2
 8001abc:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <reset+0x94>)
 8001abe:	f7ff f96f 	bl	8000da0 <PIN_HIGH>
    delay(1000);	//delay(100);	Poloni (28/05) Vide manual ILI9340 pg. 220
 8001ac2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ac6:	f003 f8cd 	bl	8004c64 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8001aca:	2100      	movs	r1, #0
 8001acc:	20b0      	movs	r0, #176	; 0xb0
 8001ace:	f7ff fa6c 	bl	8000faa <WriteCmdData>
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200000a0 	.word	0x200000a0
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020800 	.word	0x40020800

08001ae8 <read16bits>:


static uint16_t read16bits(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8001aee:	2101      	movs	r1, #1
 8001af0:	4873      	ldr	r0, [pc, #460]	; (8001cc0 <read16bits+0x1d8>)
 8001af2:	f7ff f955 	bl	8000da0 <PIN_HIGH>
 8001af6:	2101      	movs	r1, #1
 8001af8:	4871      	ldr	r0, [pc, #452]	; (8001cc0 <read16bits+0x1d8>)
 8001afa:	f7ff f941 	bl	8000d80 <PIN_LOW>
 8001afe:	2101      	movs	r1, #1
 8001b00:	486f      	ldr	r0, [pc, #444]	; (8001cc0 <read16bits+0x1d8>)
 8001b02:	f7ff f93d 	bl	8000d80 <PIN_LOW>
 8001b06:	2101      	movs	r1, #1
 8001b08:	486d      	ldr	r0, [pc, #436]	; (8001cc0 <read16bits+0x1d8>)
 8001b0a:	f7ff f939 	bl	8000d80 <PIN_LOW>
 8001b0e:	2101      	movs	r1, #1
 8001b10:	486b      	ldr	r0, [pc, #428]	; (8001cc0 <read16bits+0x1d8>)
 8001b12:	f7ff f935 	bl	8000d80 <PIN_LOW>
 8001b16:	2101      	movs	r1, #1
 8001b18:	4869      	ldr	r0, [pc, #420]	; (8001cc0 <read16bits+0x1d8>)
 8001b1a:	f7ff f931 	bl	8000d80 <PIN_LOW>
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4867      	ldr	r0, [pc, #412]	; (8001cc0 <read16bits+0x1d8>)
 8001b22:	f7ff f92d 	bl	8000d80 <PIN_LOW>
 8001b26:	2101      	movs	r1, #1
 8001b28:	4865      	ldr	r0, [pc, #404]	; (8001cc0 <read16bits+0x1d8>)
 8001b2a:	f7ff f929 	bl	8000d80 <PIN_LOW>
 8001b2e:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <read16bits+0x1d8>)
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <read16bits+0x1dc>)
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <read16bits+0x1dc>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f003 0320 	and.w	r3, r3, #32
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b58      	ldr	r3, [pc, #352]	; (8001cc4 <read16bits+0x1dc>)
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <read16bits+0x1dc>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <read16bits+0x1d8>)
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	4b4c      	ldr	r3, [pc, #304]	; (8001cc8 <read16bits+0x1e0>)
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	099b      	lsrs	r3, r3, #6
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	4b45      	ldr	r3, [pc, #276]	; (8001cc0 <read16bits+0x1d8>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	0a5b      	lsrs	r3, r3, #9
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	80fb      	strh	r3, [r7, #6]
 8001bba:	2101      	movs	r1, #1
 8001bbc:	4840      	ldr	r0, [pc, #256]	; (8001cc0 <read16bits+0x1d8>)
 8001bbe:	f7ff f8ef 	bl	8000da0 <PIN_HIGH>
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	483e      	ldr	r0, [pc, #248]	; (8001cc0 <read16bits+0x1d8>)
 8001bc6:	f7ff f8eb 	bl	8000da0 <PIN_HIGH>
    READ_8(lo);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	483c      	ldr	r0, [pc, #240]	; (8001cc0 <read16bits+0x1d8>)
 8001bce:	f7ff f8e7 	bl	8000da0 <PIN_HIGH>
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	483a      	ldr	r0, [pc, #232]	; (8001cc0 <read16bits+0x1d8>)
 8001bd6:	f7ff f8d3 	bl	8000d80 <PIN_LOW>
 8001bda:	2101      	movs	r1, #1
 8001bdc:	4838      	ldr	r0, [pc, #224]	; (8001cc0 <read16bits+0x1d8>)
 8001bde:	f7ff f8cf 	bl	8000d80 <PIN_LOW>
 8001be2:	2101      	movs	r1, #1
 8001be4:	4836      	ldr	r0, [pc, #216]	; (8001cc0 <read16bits+0x1d8>)
 8001be6:	f7ff f8cb 	bl	8000d80 <PIN_LOW>
 8001bea:	2101      	movs	r1, #1
 8001bec:	4834      	ldr	r0, [pc, #208]	; (8001cc0 <read16bits+0x1d8>)
 8001bee:	f7ff f8c7 	bl	8000d80 <PIN_LOW>
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4832      	ldr	r0, [pc, #200]	; (8001cc0 <read16bits+0x1d8>)
 8001bf6:	f7ff f8c3 	bl	8000d80 <PIN_LOW>
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4830      	ldr	r0, [pc, #192]	; (8001cc0 <read16bits+0x1d8>)
 8001bfe:	f7ff f8bf 	bl	8000d80 <PIN_LOW>
 8001c02:	2101      	movs	r1, #1
 8001c04:	482e      	ldr	r0, [pc, #184]	; (8001cc0 <read16bits+0x1d8>)
 8001c06:	f7ff f8bb 	bl	8000d80 <PIN_LOW>
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <read16bits+0x1d8>)
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <read16bits+0x1dc>)
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <read16bits+0x1dc>)
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <read16bits+0x1dc>)
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	085b      	lsrs	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <read16bits+0x1dc>)
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <read16bits+0x1d8>)
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <read16bits+0x1e0>)
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	099b      	lsrs	r3, r3, #6
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <read16bits+0x1d8>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	0a5b      	lsrs	r3, r3, #9
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4313      	orrs	r3, r2
 8001c94:	717b      	strb	r3, [r7, #5]
 8001c96:	2101      	movs	r1, #1
 8001c98:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <read16bits+0x1d8>)
 8001c9a:	f7ff f881 	bl	8000da0 <PIN_HIGH>
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <read16bits+0x1d8>)
 8001ca2:	f7ff f87d 	bl	8000da0 <PIN_HIGH>
    return (ret << 8) | lo;
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	797b      	ldrb	r3, [r7, #5]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	b29b      	uxth	r3, r3
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40020800 	.word	0x40020800

08001ccc <readReg>:


uint16_t readReg(uint16_t reg, int8_t index)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	80fb      	strh	r3, [r7, #6]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8001cdc:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <readReg+0x1a8>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <readReg+0x1c>
        reset();
 8001ce4:	f7ff feb4 	bl	8001a50 <reset>
    CS_ACTIVE;
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4863      	ldr	r0, [pc, #396]	; (8001e78 <readReg+0x1ac>)
 8001cec:	f7ff f848 	bl	8000d80 <PIN_LOW>
    WriteCmd(reg);
 8001cf0:	2110      	movs	r1, #16
 8001cf2:	4862      	ldr	r0, [pc, #392]	; (8001e7c <readReg+0x1b0>)
 8001cf4:	f7ff f844 	bl	8000d80 <PIN_LOW>
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	73bb      	strb	r3, [r7, #14]
 8001d04:	4b5d      	ldr	r3, [pc, #372]	; (8001e7c <readReg+0x1b0>)
 8001d06:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001d0a:	619a      	str	r2, [r3, #24]
 8001d0c:	4b5a      	ldr	r3, [pc, #360]	; (8001e78 <readReg+0x1ac>)
 8001d0e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001d12:	619a      	str	r2, [r3, #24]
 8001d14:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <readReg+0x1b4>)
 8001d16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d1a:	619a      	str	r2, [r3, #24]
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	025b      	lsls	r3, r3, #9
 8001d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d36:	431a      	orrs	r2, r3
 8001d38:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <readReg+0x1b0>)
 8001d3a:	619a      	str	r2, [r3, #24]
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	105b      	asrs	r3, r3, #1
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	431a      	orrs	r2, r3
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <readReg+0x1ac>)
 8001d62:	619a      	str	r2, [r3, #24]
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	019b      	lsls	r3, r3, #6
 8001d68:	4a45      	ldr	r2, [pc, #276]	; (8001e80 <readReg+0x1b4>)
 8001d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	2102      	movs	r1, #2
 8001d72:	4842      	ldr	r0, [pc, #264]	; (8001e7c <readReg+0x1b0>)
 8001d74:	f7ff f804 	bl	8000d80 <PIN_LOW>
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4840      	ldr	r0, [pc, #256]	; (8001e7c <readReg+0x1b0>)
 8001d7c:	f7ff f800 	bl	8000d80 <PIN_LOW>
 8001d80:	2102      	movs	r1, #2
 8001d82:	483e      	ldr	r0, [pc, #248]	; (8001e7c <readReg+0x1b0>)
 8001d84:	f7fe fffc 	bl	8000d80 <PIN_LOW>
 8001d88:	2102      	movs	r1, #2
 8001d8a:	483c      	ldr	r0, [pc, #240]	; (8001e7c <readReg+0x1b0>)
 8001d8c:	f7ff f808 	bl	8000da0 <PIN_HIGH>
 8001d90:	2102      	movs	r1, #2
 8001d92:	483a      	ldr	r0, [pc, #232]	; (8001e7c <readReg+0x1b0>)
 8001d94:	f7ff f804 	bl	8000da0 <PIN_HIGH>
 8001d98:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <readReg+0x1b0>)
 8001d9a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001d9e:	619a      	str	r2, [r3, #24]
 8001da0:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <readReg+0x1ac>)
 8001da2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001da6:	619a      	str	r2, [r3, #24]
 8001da8:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <readReg+0x1b4>)
 8001daa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001dae:	619a      	str	r2, [r3, #24]
 8001db0:	7bbb      	ldrb	r3, [r7, #14]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001db8:	7bbb      	ldrb	r3, [r7, #14]
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	7bbb      	ldrb	r3, [r7, #14]
 8001dc4:	025b      	lsls	r3, r3, #9
 8001dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <readReg+0x1b0>)
 8001dce:	619a      	str	r2, [r3, #24]
 8001dd0:	7bbb      	ldrb	r3, [r7, #14]
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001dd8:	7bbb      	ldrb	r3, [r7, #14]
 8001dda:	105b      	asrs	r3, r3, #1
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	431a      	orrs	r2, r3
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	431a      	orrs	r2, r3
 8001dec:	7bbb      	ldrb	r3, [r7, #14]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	431a      	orrs	r2, r3
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <readReg+0x1ac>)
 8001df6:	619a      	str	r2, [r3, #24]
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	019b      	lsls	r3, r3, #6
 8001dfc:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <readReg+0x1b4>)
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	2102      	movs	r1, #2
 8001e06:	481d      	ldr	r0, [pc, #116]	; (8001e7c <readReg+0x1b0>)
 8001e08:	f7fe ffba 	bl	8000d80 <PIN_LOW>
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	481b      	ldr	r0, [pc, #108]	; (8001e7c <readReg+0x1b0>)
 8001e10:	f7fe ffb6 	bl	8000d80 <PIN_LOW>
 8001e14:	2102      	movs	r1, #2
 8001e16:	4819      	ldr	r0, [pc, #100]	; (8001e7c <readReg+0x1b0>)
 8001e18:	f7fe ffb2 	bl	8000d80 <PIN_LOW>
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4817      	ldr	r0, [pc, #92]	; (8001e7c <readReg+0x1b0>)
 8001e20:	f7fe ffbe 	bl	8000da0 <PIN_HIGH>
 8001e24:	2102      	movs	r1, #2
 8001e26:	4815      	ldr	r0, [pc, #84]	; (8001e7c <readReg+0x1b0>)
 8001e28:	f7fe ffba 	bl	8000da0 <PIN_HIGH>
 8001e2c:	2110      	movs	r1, #16
 8001e2e:	4813      	ldr	r0, [pc, #76]	; (8001e7c <readReg+0x1b0>)
 8001e30:	f7fe ffb6 	bl	8000da0 <PIN_HIGH>
    setReadDir();
 8001e34:	f7ff f8de 	bl	8000ff4 <setReadDir>
    delay(1);    //1us should be adequate
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f002 ff13 	bl	8004c64 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8001e3e:	f7ff fe53 	bl	8001ae8 <read16bits>
 8001e42:	4603      	mov	r3, r0
 8001e44:	81bb      	strh	r3, [r7, #12]
 8001e46:	797b      	ldrb	r3, [r7, #5]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	717b      	strb	r3, [r7, #5]
 8001e4e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	daf3      	bge.n	8001e3e <readReg+0x172>
    RD_IDLE;
 8001e56:	2101      	movs	r1, #1
 8001e58:	4808      	ldr	r0, [pc, #32]	; (8001e7c <readReg+0x1b0>)
 8001e5a:	f7fe ffa1 	bl	8000da0 <PIN_HIGH>
    CS_IDLE;
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <readReg+0x1ac>)
 8001e62:	f7fe ff9d 	bl	8000da0 <PIN_HIGH>
    setWriteDir();
 8001e66:	f7ff f8f3 	bl	8001050 <setWriteDir>
    return ret;
 8001e6a:	89bb      	ldrh	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200000a0 	.word	0x200000a0
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40020800 	.word	0x40020800

08001e84 <readReg32>:


uint32_t readReg32(uint16_t reg)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff1a 	bl	8001ccc <readReg>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff13 	bl	8001ccc <readReg>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8001eaa:	89fb      	ldrh	r3, [r7, #14]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	89bb      	ldrh	r3, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <readReg40>:


uint32_t readReg40(uint16_t reg)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff feff 	bl	8001ccc <readReg>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fef8 	bl	8001ccc <readReg>
 8001edc:	4603      	mov	r3, r0
 8001ede:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fef1 	bl	8001ccc <readReg>
 8001eea:	4603      	mov	r3, r0
 8001eec:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8001eee:	89fb      	ldrh	r3, [r7, #14]
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	89ba      	ldrh	r2, [r7, #12]
 8001ef4:	0212      	lsls	r2, r2, #8
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	897a      	ldrh	r2, [r7, #10]
 8001efa:	0a12      	lsrs	r2, r2, #8
 8001efc:	b292      	uxth	r2, r2
 8001efe:	4313      	orrs	r3, r2
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <tft_init>:


void tft_init(uint16_t ID)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8001f1a:	4be1      	ldr	r3, [pc, #900]	; (80022a0 <tft_init+0x398>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8001f20:	4ae0      	ldr	r2, [pc, #896]	; (80022a4 <tft_init+0x39c>)
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	8013      	strh	r3, [r2, #0]
 8001f26:	4bdf      	ldr	r3, [pc, #892]	; (80022a4 <tft_init+0x39c>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	f24c 5205 	movw	r2, #50437	; 0xc505
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	f000 82cc 	beq.w	80024cc <tft_init+0x5c4>
 8001f34:	f24c 5205 	movw	r2, #50437	; 0xc505
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	f300 8303 	bgt.w	8002544 <tft_init+0x63c>
 8001f3e:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001f42:	4293      	cmp	r3, r2
 8001f44:	f000 82cb 	beq.w	80024de <tft_init+0x5d6>
 8001f48:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	f300 82f9 	bgt.w	8002544 <tft_init+0x63c>
 8001f52:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001f56:	4293      	cmp	r3, r2
 8001f58:	f000 82b8 	beq.w	80024cc <tft_init+0x5c4>
 8001f5c:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001f60:	4293      	cmp	r3, r2
 8001f62:	f300 82ef 	bgt.w	8002544 <tft_init+0x63c>
 8001f66:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	f000 8239 	beq.w	80023e2 <tft_init+0x4da>
 8001f70:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001f74:	4293      	cmp	r3, r2
 8001f76:	f300 82e5 	bgt.w	8002544 <tft_init+0x63c>
 8001f7a:	f249 4288 	movw	r2, #38024	; 0x9488
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	f300 82e0 	bgt.w	8002544 <tft_init+0x63c>
 8001f84:	f249 4287 	movw	r2, #38023	; 0x9487
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	f280 8288 	bge.w	800249e <tft_init+0x596>
 8001f8e:	f249 4286 	movw	r2, #38022	; 0x9486
 8001f92:	4293      	cmp	r3, r2
 8001f94:	f000 8269 	beq.w	800246a <tft_init+0x562>
 8001f98:	f249 4286 	movw	r2, #38022	; 0x9486
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	f300 82d1 	bgt.w	8002544 <tft_init+0x63c>
 8001fa2:	f249 4281 	movw	r2, #38017	; 0x9481
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	f000 8248 	beq.w	800243c <tft_init+0x534>
 8001fac:	f249 4281 	movw	r2, #38017	; 0x9481
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	f300 82c7 	bgt.w	8002544 <tft_init+0x63c>
 8001fb6:	f249 3241 	movw	r2, #37697	; 0x9341
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	f300 82c2 	bgt.w	8002544 <tft_init+0x63c>
 8001fc0:	f249 3202 	movw	r2, #37634	; 0x9302
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	f280 80a5 	bge.w	8002114 <tft_init+0x20c>
 8001fca:	f249 0290 	movw	r2, #37008	; 0x9090
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	f000 818f 	beq.w	80022f2 <tft_init+0x3ea>
 8001fd4:	f249 0290 	movw	r2, #37008	; 0x9090
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	f300 82b3 	bgt.w	8002544 <tft_init+0x63c>
 8001fde:	f248 3257 	movw	r2, #33623	; 0x8357
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	f000 8180 	beq.w	80022e8 <tft_init+0x3e0>
 8001fe8:	f248 3257 	movw	r2, #33623	; 0x8357
 8001fec:	4293      	cmp	r3, r2
 8001fee:	f300 82a9 	bgt.w	8002544 <tft_init+0x63c>
 8001ff2:	f248 0231 	movw	r2, #32817	; 0x8031
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	f000 816d 	beq.w	80022d6 <tft_init+0x3ce>
 8001ffc:	f248 0231 	movw	r2, #32817	; 0x8031
 8002000:	4293      	cmp	r3, r2
 8002002:	f300 829f 	bgt.w	8002544 <tft_init+0x63c>
 8002006:	f247 7296 	movw	r2, #30614	; 0x7796
 800200a:	4293      	cmp	r3, r2
 800200c:	f000 8242 	beq.w	8002494 <tft_init+0x58c>
 8002010:	f247 7296 	movw	r2, #30614	; 0x7796
 8002014:	4293      	cmp	r3, r2
 8002016:	f300 8295 	bgt.w	8002544 <tft_init+0x63c>
 800201a:	f247 7293 	movw	r2, #30611	; 0x7793
 800201e:	4293      	cmp	r3, r2
 8002020:	f000 825d 	beq.w	80024de <tft_init+0x5d6>
 8002024:	f247 7293 	movw	r2, #30611	; 0x7793
 8002028:	4293      	cmp	r3, r2
 800202a:	f300 828b 	bgt.w	8002544 <tft_init+0x63c>
 800202e:	f247 7289 	movw	r2, #30601	; 0x7789
 8002032:	4293      	cmp	r3, r2
 8002034:	f000 8146 	beq.w	80022c4 <tft_init+0x3bc>
 8002038:	f247 7289 	movw	r2, #30601	; 0x7789
 800203c:	4293      	cmp	r3, r2
 800203e:	f300 8281 	bgt.w	8002544 <tft_init+0x63c>
 8002042:	f646 0209 	movw	r2, #26633	; 0x6809
 8002046:	4293      	cmp	r3, r2
 8002048:	f000 8194 	beq.w	8002374 <tft_init+0x46c>
 800204c:	f646 0209 	movw	r2, #26633	; 0x6809
 8002050:	4293      	cmp	r3, r2
 8002052:	f300 8277 	bgt.w	8002544 <tft_init+0x63c>
 8002056:	f245 4208 	movw	r2, #21512	; 0x5408
 800205a:	4293      	cmp	r3, r2
 800205c:	f000 817a 	beq.w	8002354 <tft_init+0x44c>
 8002060:	f245 4208 	movw	r2, #21512	; 0x5408
 8002064:	4293      	cmp	r3, r2
 8002066:	f300 826d 	bgt.w	8002544 <tft_init+0x63c>
 800206a:	f245 3210 	movw	r2, #21264	; 0x5310
 800206e:	4293      	cmp	r3, r2
 8002070:	f000 8100 	beq.w	8002274 <tft_init+0x36c>
 8002074:	f245 3210 	movw	r2, #21264	; 0x5310
 8002078:	4293      	cmp	r3, r2
 800207a:	f300 8263 	bgt.w	8002544 <tft_init+0x63c>
 800207e:	f242 0253 	movw	r2, #8275	; 0x2053
 8002082:	4293      	cmp	r3, r2
 8002084:	f000 81a8 	beq.w	80023d8 <tft_init+0x4d0>
 8002088:	f242 0253 	movw	r2, #8275	; 0x2053
 800208c:	4293      	cmp	r3, r2
 800208e:	f300 8259 	bgt.w	8002544 <tft_init+0x63c>
 8002092:	f241 6202 	movw	r2, #5634	; 0x1602
 8002096:	4293      	cmp	r3, r2
 8002098:	f000 8195 	beq.w	80023c6 <tft_init+0x4be>
 800209c:	f241 6202 	movw	r2, #5634	; 0x1602
 80020a0:	4293      	cmp	r3, r2
 80020a2:	f300 824f 	bgt.w	8002544 <tft_init+0x63c>
 80020a6:	f241 5281 	movw	r2, #5505	; 0x1581
 80020aa:	4293      	cmp	r3, r2
 80020ac:	f000 81c1 	beq.w	8002432 <tft_init+0x52a>
 80020b0:	f241 5281 	movw	r2, #5505	; 0x1581
 80020b4:	4293      	cmp	r3, r2
 80020b6:	f300 8245 	bgt.w	8002544 <tft_init+0x63c>
 80020ba:	f241 5226 	movw	r2, #5414	; 0x1526
 80020be:	4293      	cmp	r3, r2
 80020c0:	f000 80cf 	beq.w	8002262 <tft_init+0x35a>
 80020c4:	f241 5226 	movw	r2, #5414	; 0x1526
 80020c8:	4293      	cmp	r3, r2
 80020ca:	f300 823b 	bgt.w	8002544 <tft_init+0x63c>
 80020ce:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80020d2:	f000 80bd 	beq.w	8002250 <tft_init+0x348>
 80020d6:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80020da:	f300 8233 	bgt.w	8002544 <tft_init+0x63c>
 80020de:	f241 5211 	movw	r2, #5393	; 0x1511
 80020e2:	4293      	cmp	r3, r2
 80020e4:	f000 80a0 	beq.w	8002228 <tft_init+0x320>
 80020e8:	f241 5211 	movw	r2, #5393	; 0x1511
 80020ec:	4293      	cmp	r3, r2
 80020ee:	f300 8229 	bgt.w	8002544 <tft_init+0x63c>
 80020f2:	f241 5205 	movw	r2, #5381	; 0x1505
 80020f6:	4293      	cmp	r3, r2
 80020f8:	f000 8131 	beq.w	800235e <tft_init+0x456>
 80020fc:	f241 5205 	movw	r2, #5381	; 0x1505
 8002100:	4293      	cmp	r3, r2
 8002102:	f300 821f 	bgt.w	8002544 <tft_init+0x63c>
 8002106:	2b01      	cmp	r3, #1
 8002108:	f000 811f 	beq.w	800234a <tft_init+0x442>
 800210c:	2b99      	cmp	r3, #153	; 0x99
 800210e:	f000 8107 	beq.w	8002320 <tft_init+0x418>
 8002112:	e217      	b.n	8002544 <tft_init+0x63c>
 8002114:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 8002118:	3b02      	subs	r3, #2
 800211a:	2b3f      	cmp	r3, #63	; 0x3f
 800211c:	f200 8212 	bhi.w	8002544 <tft_init+0x63c>
 8002120:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <tft_init+0x220>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	080023ed 	.word	0x080023ed
 800212c:	08002545 	.word	0x08002545
 8002130:	08002545 	.word	0x08002545
 8002134:	08002545 	.word	0x08002545
 8002138:	08002545 	.word	0x08002545
 800213c:	08002545 	.word	0x08002545
 8002140:	08002545 	.word	0x08002545
 8002144:	08002545 	.word	0x08002545
 8002148:	08002545 	.word	0x08002545
 800214c:	08002545 	.word	0x08002545
 8002150:	08002545 	.word	0x08002545
 8002154:	08002545 	.word	0x08002545
 8002158:	08002545 	.word	0x08002545
 800215c:	08002545 	.word	0x08002545
 8002160:	08002545 	.word	0x08002545
 8002164:	08002545 	.word	0x08002545
 8002168:	08002545 	.word	0x08002545
 800216c:	08002545 	.word	0x08002545
 8002170:	08002545 	.word	0x08002545
 8002174:	08002545 	.word	0x08002545
 8002178:	08002545 	.word	0x08002545
 800217c:	08002545 	.word	0x08002545
 8002180:	08002545 	.word	0x08002545
 8002184:	08002545 	.word	0x08002545
 8002188:	08002545 	.word	0x08002545
 800218c:	08002545 	.word	0x08002545
 8002190:	08002545 	.word	0x08002545
 8002194:	08002545 	.word	0x08002545
 8002198:	08002545 	.word	0x08002545
 800219c:	08002545 	.word	0x08002545
 80021a0:	0800235f 	.word	0x0800235f
 80021a4:	08002545 	.word	0x08002545
 80021a8:	08002545 	.word	0x08002545
 80021ac:	08002545 	.word	0x08002545
 80021b0:	08002545 	.word	0x08002545
 80021b4:	0800237f 	.word	0x0800237f
 80021b8:	08002545 	.word	0x08002545
 80021bc:	0800239f 	.word	0x0800239f
 80021c0:	0800237f 	.word	0x0800237f
 80021c4:	08002401 	.word	0x08002401
 80021c8:	08002545 	.word	0x08002545
 80021cc:	08002545 	.word	0x08002545
 80021d0:	08002545 	.word	0x08002545
 80021d4:	08002545 	.word	0x08002545
 80021d8:	08002545 	.word	0x08002545
 80021dc:	08002545 	.word	0x08002545
 80021e0:	08002545 	.word	0x08002545
 80021e4:	08002389 	.word	0x08002389
 80021e8:	08002545 	.word	0x08002545
 80021ec:	08002545 	.word	0x08002545
 80021f0:	08002545 	.word	0x08002545
 80021f4:	08002389 	.word	0x08002389
 80021f8:	08002545 	.word	0x08002545
 80021fc:	08002545 	.word	0x08002545
 8002200:	080023f7 	.word	0x080023f7
 8002204:	08002545 	.word	0x08002545
 8002208:	08002545 	.word	0x08002545
 800220c:	08002545 	.word	0x08002545
 8002210:	08002545 	.word	0x08002545
 8002214:	08002545 	.word	0x08002545
 8002218:	08002545 	.word	0x08002545
 800221c:	08002545 	.word	0x08002545
 8002220:	08002417 	.word	0x08002417
 8002224:	08002421 	.word	0x08002421
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8002228:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <tft_init+0x3a0>)
 800222a:	2203      	movs	r2, #3
 800222c:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 800222e:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <tft_init+0x3a4>)
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	2303      	movs	r3, #3
 8002234:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <tft_init+0x3a8>)
 8002238:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002240:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <tft_init+0x3ac>)
 8002244:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800224c:	801a      	strh	r2, [r3, #0]
        break;
 800224e:	e17f      	b.n	8002550 <tft_init+0x648>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <tft_init+0x3a0>)
 8002252:	f240 4213 	movw	r2, #1043	; 0x413
 8002256:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8002258:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <tft_init+0x3b0>)
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	2306      	movs	r3, #6
 800225e:	837b      	strh	r3, [r7, #26]
        break;
 8002260:	e176      	b.n	8002550 <tft_init+0x648>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <tft_init+0x3a0>)
 8002264:	f240 4213 	movw	r2, #1043	; 0x413
 8002268:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 800226a:	4b14      	ldr	r3, [pc, #80]	; (80022bc <tft_init+0x3b4>)
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	230c      	movs	r3, #12
 8002270:	837b      	strh	r3, [r7, #26]
        break;
 8002272:	e16d      	b.n	8002550 <tft_init+0x648>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <tft_init+0x3a0>)
 8002276:	f640 6213 	movw	r2, #3603	; 0xe13
 800227a:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <tft_init+0x3b8>)
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	2302      	movs	r3, #2
 8002282:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <tft_init+0x3a8>)
 8002286:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800228e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <tft_init+0x3ac>)
 8002292:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800229a:	801a      	strh	r2, [r3, #0]
        break;
 800229c:	e158      	b.n	8002550 <tft_init+0x648>
 800229e:	bf00      	nop
 80022a0:	200001a6 	.word	0x200001a6
 80022a4:	200001a4 	.word	0x200001a4
 80022a8:	20000196 	.word	0x20000196
 80022ac:	08008c20 	.word	0x08008c20
 80022b0:	08000e35 	.word	0x08000e35
 80022b4:	08000e1d 	.word	0x08000e1d
 80022b8:	08008c24 	.word	0x08008c24
 80022bc:	08008c2c 	.word	0x08008c2c
 80022c0:	08008c38 	.word	0x08008c38
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80022c4:	4b8d      	ldr	r3, [pc, #564]	; (80024fc <tft_init+0x5f4>)
 80022c6:	f240 4213 	movw	r2, #1043	; 0x413
 80022ca:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 80022cc:	4b8c      	ldr	r3, [pc, #560]	; (8002500 <tft_init+0x5f8>)
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	2341      	movs	r3, #65	; 0x41
 80022d2:	837b      	strh	r3, [r7, #26]
        break;
 80022d4:	e13c      	b.n	8002550 <tft_init+0x648>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80022d6:	4b89      	ldr	r3, [pc, #548]	; (80024fc <tft_init+0x5f4>)
 80022d8:	f241 4213 	movw	r2, #5139	; 0x1413
 80022dc:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80022de:	4b89      	ldr	r3, [pc, #548]	; (8002504 <tft_init+0x5fc>)
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	2312      	movs	r3, #18
 80022e4:	837b      	strh	r3, [r7, #26]
        break;
 80022e6:	e133      	b.n	8002550 <tft_init+0x648>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80022e8:	4b84      	ldr	r3, [pc, #528]	; (80024fc <tft_init+0x5f4>)
 80022ea:	f241 4203 	movw	r2, #5123	; 0x1403
 80022ee:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 80022f0:	e003      	b.n	80022fa <tft_init+0x3f2>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80022f2:	4b82      	ldr	r3, [pc, #520]	; (80024fc <tft_init+0x5f4>)
 80022f4:	f241 4213 	movw	r2, #5139	; 0x1413
 80022f8:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 80022fe:	4b82      	ldr	r3, [pc, #520]	; (8002508 <tft_init+0x600>)
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	2302      	movs	r3, #2
 8002304:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002306:	4b81      	ldr	r3, [pc, #516]	; (800250c <tft_init+0x604>)
 8002308:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002310:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002312:	4b7f      	ldr	r3, [pc, #508]	; (8002510 <tft_init+0x608>)
 8002314:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800231c:	801a      	strh	r2, [r3, #0]
        break;
 800231e:	e117      	b.n	8002550 <tft_init+0x648>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8002320:	4b76      	ldr	r3, [pc, #472]	; (80024fc <tft_init+0x5f4>)
 8002322:	f241 4213 	movw	r2, #5139	; 0x1413
 8002326:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8002328:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <tft_init+0x60c>)
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	231d      	movs	r3, #29
 800232e:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002330:	4b76      	ldr	r3, [pc, #472]	; (800250c <tft_init+0x604>)
 8002332:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800233a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800233c:	4b74      	ldr	r3, [pc, #464]	; (8002510 <tft_init+0x608>)
 800233e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002346:	801a      	strh	r2, [r3, #0]
        break;
 8002348:	e102      	b.n	8002550 <tft_init+0x648>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 800234a:	4b6c      	ldr	r3, [pc, #432]	; (80024fc <tft_init+0x5f4>)
 800234c:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002350:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8002352:	e008      	b.n	8002366 <tft_init+0x45e>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8002354:	4b69      	ldr	r3, [pc, #420]	; (80024fc <tft_init+0x5f4>)
 8002356:	f241 0204 	movw	r2, #4100	; 0x1004
 800235a:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 800235c:	e003      	b.n	8002366 <tft_init+0x45e>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 800235e:	4b67      	ldr	r3, [pc, #412]	; (80024fc <tft_init+0x5f4>)
 8002360:	f241 0204 	movw	r2, #4100	; 0x1004
 8002364:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 8002366:	2301      	movs	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 800236a:	21d8      	movs	r1, #216	; 0xd8
 800236c:	486a      	ldr	r0, [pc, #424]	; (8002518 <tft_init+0x610>)
 800236e:	f7ff fb3e 	bl	80019ee <init_table16>
        break;
 8002372:	e0ed      	b.n	8002550 <tft_init+0x648>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8002374:	4b61      	ldr	r3, [pc, #388]	; (80024fc <tft_init+0x5f4>)
 8002376:	f241 1202 	movw	r2, #4354	; 0x1102
 800237a:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 800237c:	e008      	b.n	8002390 <tft_init+0x488>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 800237e:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <tft_init+0x5f4>)
 8002380:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002384:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8002386:	e003      	b.n	8002390 <tft_init+0x488>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <tft_init+0x5f4>)
 800238a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800238e:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8002390:	2301      	movs	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8002394:	21cc      	movs	r1, #204	; 0xcc
 8002396:	4861      	ldr	r0, [pc, #388]	; (800251c <tft_init+0x614>)
 8002398:	f7ff fb29 	bl	80019ee <init_table16>
        break;
 800239c:	e0d8      	b.n	8002550 <tft_init+0x648>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800239e:	4b57      	ldr	r3, [pc, #348]	; (80024fc <tft_init+0x5f4>)
 80023a0:	f240 4203 	movw	r2, #1027	; 0x403
 80023a4:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 80023a6:	4b5e      	ldr	r3, [pc, #376]	; (8002520 <tft_init+0x618>)
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	231e      	movs	r3, #30
 80023ac:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80023ae:	4b57      	ldr	r3, [pc, #348]	; (800250c <tft_init+0x604>)
 80023b0:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80023b8:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80023ba:	4b55      	ldr	r3, [pc, #340]	; (8002510 <tft_init+0x608>)
 80023bc:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	22f0      	movs	r2, #240	; 0xf0
 80023c2:	801a      	strh	r2, [r3, #0]
        break;
 80023c4:	e0c4      	b.n	8002550 <tft_init+0x648>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 80023c6:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <tft_init+0x5f4>)
 80023c8:	f240 4203 	movw	r2, #1027	; 0x403
 80023cc:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 80023ce:	4b55      	ldr	r3, [pc, #340]	; (8002524 <tft_init+0x61c>)
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	2306      	movs	r3, #6
 80023d4:	837b      	strh	r3, [r7, #26]
        break;
 80023d6:	e0bb      	b.n	8002550 <tft_init+0x648>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 80023d8:	4b48      	ldr	r3, [pc, #288]	; (80024fc <tft_init+0x5f4>)
 80023da:	f241 4217 	movw	r2, #5143	; 0x1417
 80023de:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80023e0:	e012      	b.n	8002408 <tft_init+0x500>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 80023e2:	4b46      	ldr	r3, [pc, #280]	; (80024fc <tft_init+0x5f4>)
 80023e4:	f241 4213 	movw	r2, #5139	; 0x1413
 80023e8:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80023ea:	e00d      	b.n	8002408 <tft_init+0x500>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80023ec:	4b43      	ldr	r3, [pc, #268]	; (80024fc <tft_init+0x5f4>)
 80023ee:	f240 4203 	movw	r2, #1027	; 0x403
 80023f2:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80023f4:	e008      	b.n	8002408 <tft_init+0x500>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <tft_init+0x5f4>)
 80023f8:	f240 4213 	movw	r2, #1043	; 0x413
 80023fc:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80023fe:	e003      	b.n	8002408 <tft_init+0x500>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8002400:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <tft_init+0x5f4>)
 8002402:	f241 6203 	movw	r2, #5635	; 0x1603
 8002406:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8002408:	2301      	movs	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 800240c:	4b46      	ldr	r3, [pc, #280]	; (8002528 <tft_init+0x620>)
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	2303      	movs	r3, #3
 8002412:	837b      	strh	r3, [r7, #26]
        break;
 8002414:	e09c      	b.n	8002550 <tft_init+0x648>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <tft_init+0x5f4>)
 8002418:	f241 4213 	movw	r2, #5139	; 0x1413
 800241c:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 800241e:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002420:	4b36      	ldr	r3, [pc, #216]	; (80024fc <tft_init+0x5f4>)
 8002422:	f240 4213 	movw	r2, #1043	; 0x413
 8002426:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8002428:	4b40      	ldr	r3, [pc, #256]	; (800252c <tft_init+0x624>)
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	2365      	movs	r3, #101	; 0x65
 800242e:	837b      	strh	r3, [r7, #26]
        break;
 8002430:	e08e      	b.n	8002550 <tft_init+0x648>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8002432:	4b32      	ldr	r3, [pc, #200]	; (80024fc <tft_init+0x5f4>)
 8002434:	f240 4213 	movw	r2, #1043	; 0x413
 8002438:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 800243a:	e003      	b.n	8002444 <tft_init+0x53c>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <tft_init+0x5f4>)
 800243e:	f240 4207 	movw	r2, #1031	; 0x407
 8002442:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8002444:	2301      	movs	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8002448:	4b39      	ldr	r3, [pc, #228]	; (8002530 <tft_init+0x628>)
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	2345      	movs	r3, #69	; 0x45
 800244e:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8002450:	4b2e      	ldr	r3, [pc, #184]	; (800250c <tft_init+0x604>)
 8002452:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800245a:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800245c:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <tft_init+0x608>)
 800245e:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002466:	801a      	strh	r2, [r3, #0]
        break;
 8002468:	e072      	b.n	8002550 <tft_init+0x648>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <tft_init+0x5f4>)
 800246c:	f240 4203 	movw	r2, #1027	; 0x403
 8002470:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <tft_init+0x62c>)
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	233b      	movs	r3, #59	; 0x3b
 8002478:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <tft_init+0x604>)
 800247c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002484:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <tft_init+0x608>)
 8002488:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002490:	801a      	strh	r2, [r3, #0]
        break;
 8002492:	e05d      	b.n	8002550 <tft_init+0x648>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <tft_init+0x5f4>)
 8002496:	f240 4203 	movw	r2, #1027	; 0x403
 800249a:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 800249c:	e003      	b.n	80024a6 <tft_init+0x59e>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <tft_init+0x5f4>)
 80024a0:	f240 4213 	movw	r2, #1043	; 0x413
 80024a4:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 80024aa:	4b23      	ldr	r3, [pc, #140]	; (8002538 <tft_init+0x630>)
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	232b      	movs	r3, #43	; 0x2b
 80024b0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <tft_init+0x604>)
 80024b4:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024bc:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <tft_init+0x608>)
 80024c0:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024c8:	801a      	strh	r2, [r3, #0]
        break;
 80024ca:	e041      	b.n	8002550 <tft_init+0x648>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <tft_init+0x5f4>)
 80024ce:	f241 0208 	movw	r2, #4104	; 0x1008
 80024d2:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 80024d4:	21b0      	movs	r1, #176	; 0xb0
 80024d6:	4819      	ldr	r0, [pc, #100]	; (800253c <tft_init+0x634>)
 80024d8:	f7ff fa89 	bl	80019ee <init_table16>
        break;
 80024dc:	e038      	b.n	8002550 <tft_init+0x648>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <tft_init+0x5f4>)
 80024e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024e4:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 80024e6:	21c0      	movs	r1, #192	; 0xc0
 80024e8:	4815      	ldr	r0, [pc, #84]	; (8002540 <tft_init+0x638>)
 80024ea:	f7ff fa80 	bl	80019ee <init_table16>
        p16 = (int16_t *) & height;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <tft_init+0x604>)
 80024f0:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80024f8:	801a      	strh	r2, [r3, #0]
        break;
 80024fa:	e029      	b.n	8002550 <tft_init+0x648>
 80024fc:	20000196 	.word	0x20000196
 8002500:	08008c3c 	.word	0x08008c3c
 8002504:	08008c80 	.word	0x08008c80
 8002508:	08008c94 	.word	0x08008c94
 800250c:	08000e35 	.word	0x08000e35
 8002510:	08000e1d 	.word	0x08000e1d
 8002514:	08008c98 	.word	0x08008c98
 8002518:	08008cb8 	.word	0x08008cb8
 800251c:	08008d90 	.word	0x08008d90
 8002520:	08008e5c 	.word	0x08008e5c
 8002524:	08008e7c 	.word	0x08008e7c
 8002528:	08008e84 	.word	0x08008e84
 800252c:	08008e88 	.word	0x08008e88
 8002530:	08008ef0 	.word	0x08008ef0
 8002534:	08008f38 	.word	0x08008f38
 8002538:	08008f74 	.word	0x08008f74
 800253c:	08008fa0 	.word	0x08008fa0
 8002540:	08009050 	.word	0x08009050
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8002544:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <tft_init+0x6f0>)
 8002546:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2200      	movs	r2, #0
 800254c:	801a      	strh	r2, [r3, #0]
        break;
 800254e:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8002550:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <tft_init+0x6f4>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b26      	ldr	r3, [pc, #152]	; (8002600 <tft_init+0x6f8>)
 8002566:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00d      	beq.n	800258a <tft_init+0x682>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 800256e:	2109      	movs	r1, #9
 8002570:	4824      	ldr	r0, [pc, #144]	; (8002604 <tft_init+0x6fc>)
 8002572:	f7ff f9e3 	bl	800193c <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8002576:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800257a:	4619      	mov	r1, r3
 800257c:	69f8      	ldr	r0, [r7, #28]
 800257e:	f7ff f9dd 	bl	800193c <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8002582:	2106      	movs	r1, #6
 8002584:	4820      	ldr	r0, [pc, #128]	; (8002608 <tft_init+0x700>)
 8002586:	f7ff f9d9 	bl	800193c <init_table>
    }
    setRotation(0);             //PORTRAIT
 800258a:	2000      	movs	r0, #0
 800258c:	f000 ff72 	bl	8003474 <setRotation>
    invertDisplay(false);
 8002590:	2000      	movs	r0, #0
 8002592:	f001 fd5f 	bl	8004054 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <tft_init+0x704>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	f249 4288 	movw	r2, #38024	; 0x9488
 800259e:	4293      	cmp	r3, r2
 80025a0:	d125      	bne.n	80025ee <tft_init+0x6e6>
		is555 = 0;
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <tft_init+0x708>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 80025a8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2000      	movs	r0, #0
 80025b0:	f001 f9e6 	bl	8003980 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 80025b4:	2100      	movs	r1, #0
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe fcdf 	bl	8000f7a <readPixel>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	f64f 731f 	movw	r3, #65311	; 0xff1f
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d112      	bne.n	80025ee <tft_init+0x6e6>
			uint8_t pixfmt = 0x06;
 80025c8:	2306      	movs	r3, #6
 80025ca:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 80025cc:	f107 030f 	add.w	r3, r7, #15
 80025d0:	2201      	movs	r2, #1
 80025d2:	4619      	mov	r1, r3
 80025d4:	203a      	movs	r0, #58	; 0x3a
 80025d6:	f7fe fcfa 	bl	8000fce <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <tft_init+0x6f4>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	f023 0310 	bic.w	r3, r3, #16
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <tft_init+0x6f4>)
 80025e6:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <tft_init+0x708>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 80025ee:	bf00      	nop
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	08000e1d 	.word	0x08000e1d
 80025fc:	20000196 	.word	0x20000196
 8002600:	2000019a 	.word	0x2000019a
 8002604:	08009110 	.word	0x08009110
 8002608:	0800911c 	.word	0x0800911c
 800260c:	200001a4 	.word	0x200001a4
 8002610:	200000a2 	.word	0x200000a2

08002614 <readID>:


uint16_t readID(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 800261a:	2100      	movs	r1, #0
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff fb55 	bl	8001ccc <readReg>
 8002622:	4603      	mov	r3, r0
 8002624:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8002626:	89fb      	ldrh	r3, [r7, #14]
 8002628:	f245 4208 	movw	r2, #21512	; 0x5408
 800262c:	4293      	cmp	r3, r2
 800262e:	d102      	bne.n	8002636 <readID+0x22>
        return 0x5408;
 8002630:	f245 4308 	movw	r3, #21512	; 0x5408
 8002634:	e128      	b.n	8002888 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	f245 4220 	movw	r2, #21536	; 0x5420
 800263c:	4293      	cmp	r3, r2
 800263e:	d102      	bne.n	8002646 <readID+0x32>
        return 0x5420;
 8002640:	f245 4320 	movw	r3, #21536	; 0x5420
 8002644:	e120      	b.n	8002888 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8002646:	89fb      	ldrh	r3, [r7, #14]
 8002648:	f648 1289 	movw	r2, #35209	; 0x8989
 800264c:	4293      	cmp	r3, r2
 800264e:	d102      	bne.n	8002656 <readID+0x42>
        return 0x1289;
 8002650:	f241 2389 	movw	r3, #4745	; 0x1289
 8002654:	e118      	b.n	8002888 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8002656:	2100      	movs	r1, #0
 8002658:	2067      	movs	r0, #103	; 0x67
 800265a:	f7ff fb37 	bl	8001ccc <readReg>
 800265e:	4603      	mov	r3, r0
 8002660:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8002662:	89fb      	ldrh	r3, [r7, #14]
 8002664:	f244 7247 	movw	r2, #18247	; 0x4747
 8002668:	4293      	cmp	r3, r2
 800266a:	d102      	bne.n	8002672 <readID+0x5e>
        return 0x8347;
 800266c:	f248 3347 	movw	r3, #33607	; 0x8347
 8002670:	e10a      	b.n	8002888 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8002672:	20a1      	movs	r0, #161	; 0xa1
 8002674:	f7ff fc06 	bl	8001e84 <readReg32>
 8002678:	4603      	mov	r3, r0
 800267a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 800267c:	89fb      	ldrh	r3, [r7, #14]
 800267e:	f246 1201 	movw	r2, #24833	; 0x6101
 8002682:	4293      	cmp	r3, r2
 8002684:	d102      	bne.n	800268c <readID+0x78>
        return 0x1963;
 8002686:	f641 1363 	movw	r3, #6499	; 0x1963
 800268a:	e0fd      	b.n	8002888 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 800268c:	89fb      	ldrh	r3, [r7, #14]
 800268e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002692:	4293      	cmp	r3, r2
 8002694:	d102      	bne.n	800269c <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8002696:	f241 5326 	movw	r3, #5414	; 0x1526
 800269a:	e0f5      	b.n	8002888 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 800269c:	20bf      	movs	r0, #191	; 0xbf
 800269e:	f7ff fc0c 	bl	8001eba <readReg40>
 80026a2:	4603      	mov	r3, r0
 80026a4:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80026a6:	89fb      	ldrh	r3, [r7, #14]
 80026a8:	f248 3257 	movw	r2, #33623	; 0x8357
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d102      	bne.n	80026b6 <readID+0xa2>
        return 0x8357;
 80026b0:	f248 3357 	movw	r3, #33623	; 0x8357
 80026b4:	e0e8      	b.n	8002888 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 80026b6:	89fb      	ldrh	r3, [r7, #14]
 80026b8:	f249 4281 	movw	r2, #38017	; 0x9481
 80026bc:	4293      	cmp	r3, r2
 80026be:	d102      	bne.n	80026c6 <readID+0xb2>
        return 0x9481;
 80026c0:	f249 4381 	movw	r3, #38017	; 0x9481
 80026c4:	e0e0      	b.n	8002888 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	f241 5211 	movw	r2, #5393	; 0x1511
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d102      	bne.n	80026d6 <readID+0xc2>
        return 0x1511;
 80026d0:	f241 5311 	movw	r3, #5393	; 0x1511
 80026d4:	e0d8      	b.n	8002888 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 80026d6:	89fb      	ldrh	r3, [r7, #14]
 80026d8:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80026dc:	d102      	bne.n	80026e4 <readID+0xd0>
        return 0x1520;
 80026de:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 80026e2:	e0d1      	b.n	8002888 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 80026e4:	89fb      	ldrh	r3, [r7, #14]
 80026e6:	f241 5226 	movw	r2, #5414	; 0x1526
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d102      	bne.n	80026f4 <readID+0xe0>
        return 0x1526;
 80026ee:	f241 5326 	movw	r3, #5414	; 0x1526
 80026f2:	e0c9      	b.n	8002888 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 80026f4:	89fb      	ldrh	r3, [r7, #14]
 80026f6:	f241 5281 	movw	r2, #5505	; 0x1581
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d102      	bne.n	8002704 <readID+0xf0>
        return 0x1581;
 80026fe:	f241 5381 	movw	r3, #5505	; 0x1581
 8002702:	e0c1      	b.n	8002888 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8002704:	89fb      	ldrh	r3, [r7, #14]
 8002706:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800270a:	d102      	bne.n	8002712 <readID+0xfe>
        return 0x6814;
 800270c:	f646 0314 	movw	r3, #26644	; 0x6814
 8002710:	e0ba      	b.n	8002888 <readID+0x274>
    ret = readReg32(0xD4);
 8002712:	20d4      	movs	r0, #212	; 0xd4
 8002714:	f7ff fbb6 	bl	8001e84 <readReg32>
 8002718:	4603      	mov	r3, r0
 800271a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 800271c:	89fb      	ldrh	r3, [r7, #14]
 800271e:	f245 3210 	movw	r2, #21264	; 0x5310
 8002722:	4293      	cmp	r3, r2
 8002724:	d102      	bne.n	800272c <readID+0x118>
        return 0x5310;
 8002726:	f245 3310 	movw	r3, #21264	; 0x5310
 800272a:	e0ad      	b.n	8002888 <readID+0x274>
    ret = readReg32(0xD7);
 800272c:	20d7      	movs	r0, #215	; 0xd7
 800272e:	f7ff fba9 	bl	8001e84 <readReg32>
 8002732:	4603      	mov	r3, r0
 8002734:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8002736:	89fb      	ldrh	r3, [r7, #14]
 8002738:	f248 0231 	movw	r2, #32817	; 0x8031
 800273c:	4293      	cmp	r3, r2
 800273e:	d102      	bne.n	8002746 <readID+0x132>
        return 0x8031;
 8002740:	f248 0331 	movw	r3, #32817	; 0x8031
 8002744:	e0a0      	b.n	8002888 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8002746:	20ef      	movs	r0, #239	; 0xef
 8002748:	f7ff fbb7 	bl	8001eba <readReg40>
 800274c:	4603      	mov	r3, r0
 800274e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8002750:	89fb      	ldrh	r3, [r7, #14]
 8002752:	f249 3227 	movw	r2, #37671	; 0x9327
 8002756:	4293      	cmp	r3, r2
 8002758:	d102      	bne.n	8002760 <readID+0x14c>
        return 0x9327;
 800275a:	f249 3327 	movw	r3, #37671	; 0x9327
 800275e:	e093      	b.n	8002888 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8002760:	20fe      	movs	r0, #254	; 0xfe
 8002762:	f7ff fb8f 	bl	8001e84 <readReg32>
 8002766:	4603      	mov	r3, r0
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 800276c:	89fb      	ldrh	r3, [r7, #14]
 800276e:	f242 0253 	movw	r2, #8275	; 0x2053
 8002772:	4293      	cmp	r3, r2
 8002774:	d102      	bne.n	800277c <readID+0x168>
        return 0x2053;
 8002776:	f242 0353 	movw	r3, #8275	; 0x2053
 800277a:	e085      	b.n	8002888 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 800277c:	2004      	movs	r0, #4
 800277e:	f7ff fb81 	bl	8001e84 <readReg32>
 8002782:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	0c1b      	lsrs	r3, r3, #16
 8002788:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d122      	bne.n	80027da <readID+0x1c6>
 8002794:	89fb      	ldrh	r3, [r7, #14]
 8002796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800279a:	d11e      	bne.n	80027da <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 800279c:	4a3c      	ldr	r2, [pc, #240]	; (8002890 <readID+0x27c>)
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	4611      	mov	r1, r2
 80027a4:	8019      	strh	r1, [r3, #0]
 80027a6:	3302      	adds	r3, #2
 80027a8:	0c12      	lsrs	r2, r2, #16
 80027aa:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	2203      	movs	r2, #3
 80027b0:	4619      	mov	r1, r3
 80027b2:	20b9      	movs	r0, #185	; 0xb9
 80027b4:	f7fe fc0b 	bl	8000fce <pushCommand>
        msb = readReg(0xD0,0);
 80027b8:	2100      	movs	r1, #0
 80027ba:	20d0      	movs	r0, #208	; 0xd0
 80027bc:	f7ff fa86 	bl	8001ccc <readReg>
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b99      	cmp	r3, #153	; 0x99
 80027c8:	d101      	bne.n	80027ce <readID+0x1ba>
 80027ca:	2399      	movs	r3, #153	; 0x99
 80027cc:	e05c      	b.n	8002888 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	2b90      	cmp	r3, #144	; 0x90
 80027d2:	d102      	bne.n	80027da <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 80027d4:	f249 0390 	movw	r3, #37008	; 0x9090
 80027d8:	e056      	b.n	8002888 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 80027da:	89fb      	ldrh	r3, [r7, #14]
 80027dc:	f241 5226 	movw	r2, #5414	; 0x1526
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d102      	bne.n	80027ea <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 80027e4:	f241 5326 	movw	r3, #5414	; 0x1526
 80027e8:	e04e      	b.n	8002888 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 80027ea:	89fb      	ldrh	r3, [r7, #14]
 80027ec:	f648 12f0 	movw	r2, #35312	; 0x89f0
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d102      	bne.n	80027fa <readID+0x1e6>
        return 0x7735;
 80027f4:	f247 7335 	movw	r3, #30517	; 0x7735
 80027f8:	e046      	b.n	8002888 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 80027fa:	89fb      	ldrh	r3, [r7, #14]
 80027fc:	f248 5252 	movw	r2, #34130	; 0x8552
 8002800:	4293      	cmp	r3, r2
 8002802:	d102      	bne.n	800280a <readID+0x1f6>
        return 0x7789;
 8002804:	f247 7389 	movw	r3, #30601	; 0x7789
 8002808:	e03e      	b.n	8002888 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002810:	4293      	cmp	r3, r2
 8002812:	d102      	bne.n	800281a <readID+0x206>
        return 0xAC11;
 8002814:	f64a 4311 	movw	r3, #44049	; 0xac11
 8002818:	e036      	b.n	8002888 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 800281a:	20d3      	movs	r0, #211	; 0xd3
 800281c:	f7ff fb32 	bl	8001e84 <readReg32>
 8002820:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8002828:	89fb      	ldrh	r3, [r7, #14]
 800282a:	f249 1263 	movw	r2, #37219	; 0x9163
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <readID+0x222>
 8002832:	89fb      	ldrh	r3, [r7, #14]
 8002834:	e028      	b.n	8002888 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8002836:	20d3      	movs	r0, #211	; 0xd3
 8002838:	f7ff fb24 	bl	8001e84 <readReg32>
 800283c:	4603      	mov	r3, r0
 800283e:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8002840:	89fb      	ldrh	r3, [r7, #14]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b29b      	uxth	r3, r3
 8002846:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	2b93      	cmp	r3, #147	; 0x93
 800284c:	d00b      	beq.n	8002866 <readID+0x252>
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	2b94      	cmp	r3, #148	; 0x94
 8002852:	d008      	beq.n	8002866 <readID+0x252>
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	2b98      	cmp	r3, #152	; 0x98
 8002858:	d005      	beq.n	8002866 <readID+0x252>
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	2b77      	cmp	r3, #119	; 0x77
 800285e:	d002      	beq.n	8002866 <readID+0x252>
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	2b16      	cmp	r3, #22
 8002864:	d101      	bne.n	800286a <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8002866:	89fb      	ldrh	r3, [r7, #14]
 8002868:	e00e      	b.n	8002888 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	2bd3      	cmp	r3, #211	; 0xd3
 800286e:	d004      	beq.n	800287a <readID+0x266>
 8002870:	89fb      	ldrh	r3, [r7, #14]
 8002872:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <readID+0x26a>
        return ret;             //16-bit write-only bus
 800287a:	89fb      	ldrh	r3, [r7, #14]
 800287c:	e004      	b.n	8002888 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 800287e:	2100      	movs	r1, #0
 8002880:	2000      	movs	r0, #0
 8002882:	f7ff fa23 	bl	8001ccc <readReg>
 8002886:	4603      	mov	r3, r0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	08007a18 	.word	0x08007a18

08002894 <readGRAM>:


// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b08b      	sub	sp, #44	; 0x2c
 8002898:	af00      	add	r7, sp, #0
 800289a:	60ba      	str	r2, [r7, #8]
 800289c:	461a      	mov	r2, r3
 800289e:	4603      	mov	r3, r0
 80028a0:	81fb      	strh	r3, [r7, #14]
 80028a2:	460b      	mov	r3, r1
 80028a4:	81bb      	strh	r3, [r7, #12]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <readGRAM+0x88>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80028b4:	fb12 f303 	smulbb	r3, r2, r3
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80028bc:	2300      	movs	r3, #0
 80028be:	843b      	strh	r3, [r7, #32]
 80028c0:	2300      	movs	r3, #0
 80028c2:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <readGRAM+0x8c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <readGRAM+0x48>
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <readGRAM+0x90>)
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <readGRAM+0x48>
        _MR = 0x2E;
 80028d8:	232e      	movs	r3, #46	; 0x2e
 80028da:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <readGRAM+0x94>)
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	f241 6202 	movw	r2, #5634	; 0x1602
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <readGRAM+0x58>
 80028e8:	232e      	movs	r3, #46	; 0x2e
 80028ea:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80028ec:	89fa      	ldrh	r2, [r7, #14]
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	4413      	add	r3, r2
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	b21c      	sxth	r4, r3
 80028fa:	89ba      	ldrh	r2, [r7, #12]
 80028fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80028fe:	4413      	add	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29b      	uxth	r3, r3
 8002906:	b21b      	sxth	r3, r3
 8002908:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800290c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002910:	4622      	mov	r2, r4
 8002912:	f001 f93b 	bl	8003b8c <setAddrWindow>
    while (n > 0) {
 8002916:	f000 bd86 	b.w	8003426 <readGRAM+0xb92>
 800291a:	bf00      	nop
 800291c:	20000194 	.word	0x20000194
 8002920:	200000a1 	.word	0x200000a1
 8002924:	20000196 	.word	0x20000196
 8002928:	200001a4 	.word	0x200001a4
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 800292c:	4ba0      	ldr	r3, [pc, #640]	; (8002bb0 <readGRAM+0x31c>)
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d111      	bne.n	800295c <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 8002938:	4b9e      	ldr	r3, [pc, #632]	; (8002bb4 <readGRAM+0x320>)
 800293a:	8818      	ldrh	r0, [r3, #0]
 800293c:	89fa      	ldrh	r2, [r7, #14]
 800293e:	8bfb      	ldrh	r3, [r7, #30]
 8002940:	4413      	add	r3, r2
 8002942:	b29b      	uxth	r3, r3
 8002944:	4619      	mov	r1, r3
 8002946:	f7fe fb30 	bl	8000faa <WriteCmdData>
            WriteCmdData(_MP, y + row);
 800294a:	4b9b      	ldr	r3, [pc, #620]	; (8002bb8 <readGRAM+0x324>)
 800294c:	8818      	ldrh	r0, [r3, #0]
 800294e:	89ba      	ldrh	r2, [r7, #12]
 8002950:	8c3b      	ldrh	r3, [r7, #32]
 8002952:	4413      	add	r3, r2
 8002954:	b29b      	uxth	r3, r3
 8002956:	4619      	mov	r1, r3
 8002958:	f7fe fb27 	bl	8000faa <WriteCmdData>
        }
        CS_ACTIVE;
 800295c:	2101      	movs	r1, #1
 800295e:	4897      	ldr	r0, [pc, #604]	; (8002bbc <readGRAM+0x328>)
 8002960:	f7fe fa0e 	bl	8000d80 <PIN_LOW>
        WriteCmd(_MR);
 8002964:	2110      	movs	r1, #16
 8002966:	4896      	ldr	r0, [pc, #600]	; (8002bc0 <readGRAM+0x32c>)
 8002968:	f7fe fa0a 	bl	8000d80 <PIN_LOW>
 800296c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	b29b      	uxth	r3, r3
 8002972:	777b      	strb	r3, [r7, #29]
 8002974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002976:	773b      	strb	r3, [r7, #28]
 8002978:	4b91      	ldr	r3, [pc, #580]	; (8002bc0 <readGRAM+0x32c>)
 800297a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800297e:	619a      	str	r2, [r3, #24]
 8002980:	4b8e      	ldr	r3, [pc, #568]	; (8002bbc <readGRAM+0x328>)
 8002982:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002986:	619a      	str	r2, [r3, #24]
 8002988:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <readGRAM+0x330>)
 800298a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800298e:	619a      	str	r2, [r3, #24]
 8002990:	7f7b      	ldrb	r3, [r7, #29]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002998:	7f7b      	ldrb	r3, [r7, #29]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	431a      	orrs	r2, r3
 80029a2:	7f7b      	ldrb	r3, [r7, #29]
 80029a4:	025b      	lsls	r3, r3, #9
 80029a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029aa:	431a      	orrs	r2, r3
 80029ac:	4b84      	ldr	r3, [pc, #528]	; (8002bc0 <readGRAM+0x32c>)
 80029ae:	619a      	str	r2, [r3, #24]
 80029b0:	7f7b      	ldrb	r3, [r7, #29]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80029b8:	7f7b      	ldrb	r3, [r7, #29]
 80029ba:	105b      	asrs	r3, r3, #1
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	431a      	orrs	r2, r3
 80029c2:	7f7b      	ldrb	r3, [r7, #29]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	431a      	orrs	r2, r3
 80029cc:	7f7b      	ldrb	r3, [r7, #29]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	431a      	orrs	r2, r3
 80029d4:	4b79      	ldr	r3, [pc, #484]	; (8002bbc <readGRAM+0x328>)
 80029d6:	619a      	str	r2, [r3, #24]
 80029d8:	7f7b      	ldrb	r3, [r7, #29]
 80029da:	019b      	lsls	r3, r3, #6
 80029dc:	4a79      	ldr	r2, [pc, #484]	; (8002bc4 <readGRAM+0x330>)
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	6193      	str	r3, [r2, #24]
 80029e4:	2102      	movs	r1, #2
 80029e6:	4876      	ldr	r0, [pc, #472]	; (8002bc0 <readGRAM+0x32c>)
 80029e8:	f7fe f9ca 	bl	8000d80 <PIN_LOW>
 80029ec:	2102      	movs	r1, #2
 80029ee:	4874      	ldr	r0, [pc, #464]	; (8002bc0 <readGRAM+0x32c>)
 80029f0:	f7fe f9c6 	bl	8000d80 <PIN_LOW>
 80029f4:	2102      	movs	r1, #2
 80029f6:	4872      	ldr	r0, [pc, #456]	; (8002bc0 <readGRAM+0x32c>)
 80029f8:	f7fe f9c2 	bl	8000d80 <PIN_LOW>
 80029fc:	2102      	movs	r1, #2
 80029fe:	4870      	ldr	r0, [pc, #448]	; (8002bc0 <readGRAM+0x32c>)
 8002a00:	f7fe f9ce 	bl	8000da0 <PIN_HIGH>
 8002a04:	2102      	movs	r1, #2
 8002a06:	486e      	ldr	r0, [pc, #440]	; (8002bc0 <readGRAM+0x32c>)
 8002a08:	f7fe f9ca 	bl	8000da0 <PIN_HIGH>
 8002a0c:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <readGRAM+0x32c>)
 8002a0e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002a12:	619a      	str	r2, [r3, #24]
 8002a14:	4b69      	ldr	r3, [pc, #420]	; (8002bbc <readGRAM+0x328>)
 8002a16:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002a1a:	619a      	str	r2, [r3, #24]
 8002a1c:	4b69      	ldr	r3, [pc, #420]	; (8002bc4 <readGRAM+0x330>)
 8002a1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a22:	619a      	str	r2, [r3, #24]
 8002a24:	7f3b      	ldrb	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002a2c:	7f3b      	ldrb	r3, [r7, #28]
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	431a      	orrs	r2, r3
 8002a36:	7f3b      	ldrb	r3, [r7, #28]
 8002a38:	025b      	lsls	r3, r3, #9
 8002a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	4b5f      	ldr	r3, [pc, #380]	; (8002bc0 <readGRAM+0x32c>)
 8002a42:	619a      	str	r2, [r3, #24]
 8002a44:	7f3b      	ldrb	r3, [r7, #28]
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002a4c:	7f3b      	ldrb	r3, [r7, #28]
 8002a4e:	105b      	asrs	r3, r3, #1
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	431a      	orrs	r2, r3
 8002a56:	7f3b      	ldrb	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	7f3b      	ldrb	r3, [r7, #28]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	431a      	orrs	r2, r3
 8002a68:	4b54      	ldr	r3, [pc, #336]	; (8002bbc <readGRAM+0x328>)
 8002a6a:	619a      	str	r2, [r3, #24]
 8002a6c:	7f3b      	ldrb	r3, [r7, #28]
 8002a6e:	019b      	lsls	r3, r3, #6
 8002a70:	4a54      	ldr	r2, [pc, #336]	; (8002bc4 <readGRAM+0x330>)
 8002a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a76:	6193      	str	r3, [r2, #24]
 8002a78:	2102      	movs	r1, #2
 8002a7a:	4851      	ldr	r0, [pc, #324]	; (8002bc0 <readGRAM+0x32c>)
 8002a7c:	f7fe f980 	bl	8000d80 <PIN_LOW>
 8002a80:	2102      	movs	r1, #2
 8002a82:	484f      	ldr	r0, [pc, #316]	; (8002bc0 <readGRAM+0x32c>)
 8002a84:	f7fe f97c 	bl	8000d80 <PIN_LOW>
 8002a88:	2102      	movs	r1, #2
 8002a8a:	484d      	ldr	r0, [pc, #308]	; (8002bc0 <readGRAM+0x32c>)
 8002a8c:	f7fe f978 	bl	8000d80 <PIN_LOW>
 8002a90:	2102      	movs	r1, #2
 8002a92:	484b      	ldr	r0, [pc, #300]	; (8002bc0 <readGRAM+0x32c>)
 8002a94:	f7fe f984 	bl	8000da0 <PIN_HIGH>
 8002a98:	2102      	movs	r1, #2
 8002a9a:	4849      	ldr	r0, [pc, #292]	; (8002bc0 <readGRAM+0x32c>)
 8002a9c:	f7fe f980 	bl	8000da0 <PIN_HIGH>
 8002aa0:	2110      	movs	r1, #16
 8002aa2:	4847      	ldr	r0, [pc, #284]	; (8002bc0 <readGRAM+0x32c>)
 8002aa4:	f7fe f97c 	bl	8000da0 <PIN_HIGH>
        setReadDir();
 8002aa8:	f7fe faa4 	bl	8000ff4 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8002aac:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <readGRAM+0x31c>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 816d 	bne.w	8002d94 <readGRAM+0x500>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8002aba:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <readGRAM+0x31c>)
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <readGRAM+0x23e>
 8002ac6:	4b40      	ldr	r3, [pc, #256]	; (8002bc8 <readGRAM+0x334>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	f241 2289 	movw	r2, #4745	; 0x1289
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d17c      	bne.n	8002bcc <readGRAM+0x338>
            READ_8(r);
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	483a      	ldr	r0, [pc, #232]	; (8002bc0 <readGRAM+0x32c>)
 8002ad6:	f7fe f963 	bl	8000da0 <PIN_HIGH>
 8002ada:	2101      	movs	r1, #1
 8002adc:	4838      	ldr	r0, [pc, #224]	; (8002bc0 <readGRAM+0x32c>)
 8002ade:	f7fe f94f 	bl	8000d80 <PIN_LOW>
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	4836      	ldr	r0, [pc, #216]	; (8002bc0 <readGRAM+0x32c>)
 8002ae6:	f7fe f94b 	bl	8000d80 <PIN_LOW>
 8002aea:	2101      	movs	r1, #1
 8002aec:	4834      	ldr	r0, [pc, #208]	; (8002bc0 <readGRAM+0x32c>)
 8002aee:	f7fe f947 	bl	8000d80 <PIN_LOW>
 8002af2:	2101      	movs	r1, #1
 8002af4:	4832      	ldr	r0, [pc, #200]	; (8002bc0 <readGRAM+0x32c>)
 8002af6:	f7fe f943 	bl	8000d80 <PIN_LOW>
 8002afa:	2101      	movs	r1, #1
 8002afc:	4830      	ldr	r0, [pc, #192]	; (8002bc0 <readGRAM+0x32c>)
 8002afe:	f7fe f93f 	bl	8000d80 <PIN_LOW>
 8002b02:	2101      	movs	r1, #1
 8002b04:	482e      	ldr	r0, [pc, #184]	; (8002bc0 <readGRAM+0x32c>)
 8002b06:	f7fe f93b 	bl	8000d80 <PIN_LOW>
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	482c      	ldr	r0, [pc, #176]	; (8002bc0 <readGRAM+0x32c>)
 8002b0e:	f7fe f937 	bl	8000d80 <PIN_LOW>
 8002b12:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <readGRAM+0x32c>)
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <readGRAM+0x328>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <readGRAM+0x328>)
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	4313      	orrs	r3, r2
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <readGRAM+0x328>)
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <readGRAM+0x328>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	4313      	orrs	r3, r2
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <readGRAM+0x32c>)
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <readGRAM+0x330>)
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <readGRAM+0x32c>)
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	0a5b      	lsrs	r3, r3, #9
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	75fb      	strb	r3, [r7, #23]
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	4807      	ldr	r0, [pc, #28]	; (8002bc0 <readGRAM+0x32c>)
 8002ba2:	f7fe f8fd 	bl	8000da0 <PIN_HIGH>
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <readGRAM+0x32c>)
 8002baa:	f7fe f8f9 	bl	8000da0 <PIN_HIGH>
 8002bae:	e0f1      	b.n	8002d94 <readGRAM+0x500>
 8002bb0:	20000196 	.word	0x20000196
 8002bb4:	2000019e 	.word	0x2000019e
 8002bb8:	2000019c 	.word	0x2000019c
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	200001a4 	.word	0x200001a4
        } else {
            READ_16(dummy);
 8002bcc:	2101      	movs	r1, #1
 8002bce:	48ac      	ldr	r0, [pc, #688]	; (8002e80 <readGRAM+0x5ec>)
 8002bd0:	f7fe f8e6 	bl	8000da0 <PIN_HIGH>
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	48aa      	ldr	r0, [pc, #680]	; (8002e80 <readGRAM+0x5ec>)
 8002bd8:	f7fe f8d2 	bl	8000d80 <PIN_LOW>
 8002bdc:	2101      	movs	r1, #1
 8002bde:	48a8      	ldr	r0, [pc, #672]	; (8002e80 <readGRAM+0x5ec>)
 8002be0:	f7fe f8ce 	bl	8000d80 <PIN_LOW>
 8002be4:	2101      	movs	r1, #1
 8002be6:	48a6      	ldr	r0, [pc, #664]	; (8002e80 <readGRAM+0x5ec>)
 8002be8:	f7fe f8ca 	bl	8000d80 <PIN_LOW>
 8002bec:	2101      	movs	r1, #1
 8002bee:	48a4      	ldr	r0, [pc, #656]	; (8002e80 <readGRAM+0x5ec>)
 8002bf0:	f7fe f8c6 	bl	8000d80 <PIN_LOW>
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	48a2      	ldr	r0, [pc, #648]	; (8002e80 <readGRAM+0x5ec>)
 8002bf8:	f7fe f8c2 	bl	8000d80 <PIN_LOW>
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	48a0      	ldr	r0, [pc, #640]	; (8002e80 <readGRAM+0x5ec>)
 8002c00:	f7fe f8be 	bl	8000d80 <PIN_LOW>
 8002c04:	2101      	movs	r1, #1
 8002c06:	489e      	ldr	r0, [pc, #632]	; (8002e80 <readGRAM+0x5ec>)
 8002c08:	f7fe f8ba 	bl	8000d80 <PIN_LOW>
 8002c0c:	4b9c      	ldr	r3, [pc, #624]	; (8002e80 <readGRAM+0x5ec>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4b9a      	ldr	r3, [pc, #616]	; (8002e84 <readGRAM+0x5f0>)
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b95      	ldr	r3, [pc, #596]	; (8002e84 <readGRAM+0x5f0>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	4b90      	ldr	r3, [pc, #576]	; (8002e84 <readGRAM+0x5f0>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4b8c      	ldr	r3, [pc, #560]	; (8002e84 <readGRAM+0x5f0>)
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4b87      	ldr	r3, [pc, #540]	; (8002e80 <readGRAM+0x5ec>)
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b84      	ldr	r3, [pc, #528]	; (8002e88 <readGRAM+0x5f4>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4313      	orrs	r3, r2
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4b7e      	ldr	r3, [pc, #504]	; (8002e80 <readGRAM+0x5ec>)
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	0a5b      	lsrs	r3, r3, #9
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	4313      	orrs	r3, r2
 8002c96:	76fb      	strb	r3, [r7, #27]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4879      	ldr	r0, [pc, #484]	; (8002e80 <readGRAM+0x5ec>)
 8002c9c:	f7fe f880 	bl	8000da0 <PIN_HIGH>
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4877      	ldr	r0, [pc, #476]	; (8002e80 <readGRAM+0x5ec>)
 8002ca4:	f7fe f87c 	bl	8000da0 <PIN_HIGH>
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4875      	ldr	r0, [pc, #468]	; (8002e80 <readGRAM+0x5ec>)
 8002cac:	f7fe f878 	bl	8000da0 <PIN_HIGH>
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4873      	ldr	r0, [pc, #460]	; (8002e80 <readGRAM+0x5ec>)
 8002cb4:	f7fe f864 	bl	8000d80 <PIN_LOW>
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4871      	ldr	r0, [pc, #452]	; (8002e80 <readGRAM+0x5ec>)
 8002cbc:	f7fe f860 	bl	8000d80 <PIN_LOW>
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	486f      	ldr	r0, [pc, #444]	; (8002e80 <readGRAM+0x5ec>)
 8002cc4:	f7fe f85c 	bl	8000d80 <PIN_LOW>
 8002cc8:	2101      	movs	r1, #1
 8002cca:	486d      	ldr	r0, [pc, #436]	; (8002e80 <readGRAM+0x5ec>)
 8002ccc:	f7fe f858 	bl	8000d80 <PIN_LOW>
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	486b      	ldr	r0, [pc, #428]	; (8002e80 <readGRAM+0x5ec>)
 8002cd4:	f7fe f854 	bl	8000d80 <PIN_LOW>
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4869      	ldr	r0, [pc, #420]	; (8002e80 <readGRAM+0x5ec>)
 8002cdc:	f7fe f850 	bl	8000d80 <PIN_LOW>
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	4867      	ldr	r0, [pc, #412]	; (8002e80 <readGRAM+0x5ec>)
 8002ce4:	f7fe f84c 	bl	8000d80 <PIN_LOW>
 8002ce8:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <readGRAM+0x5ec>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <readGRAM+0x5f0>)
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	4313      	orrs	r3, r2
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <readGRAM+0x5f0>)
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <readGRAM+0x5f0>)
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <readGRAM+0x5f0>)
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	4b50      	ldr	r3, [pc, #320]	; (8002e80 <readGRAM+0x5ec>)
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	4b4d      	ldr	r3, [pc, #308]	; (8002e88 <readGRAM+0x5f4>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <readGRAM+0x5ec>)
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	0a5b      	lsrs	r3, r3, #9
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	4313      	orrs	r3, r2
 8002d72:	833b      	strh	r3, [r7, #24]
 8002d74:	2101      	movs	r1, #1
 8002d76:	4842      	ldr	r0, [pc, #264]	; (8002e80 <readGRAM+0x5ec>)
 8002d78:	f7fe f812 	bl	8000da0 <PIN_HIGH>
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4840      	ldr	r0, [pc, #256]	; (8002e80 <readGRAM+0x5ec>)
 8002d80:	f7fe f80e 	bl	8000da0 <PIN_HIGH>
 8002d84:	7efb      	ldrb	r3, [r7, #27]
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	b21a      	sxth	r2, r3
 8002d8a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	b21b      	sxth	r3, r3
 8002d92:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8002d94:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <readGRAM+0x5f8>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	f241 5211 	movw	r2, #5393	; 0x1511
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	f040 830f 	bne.w	80033c0 <readGRAM+0xb2c>
 8002da2:	2101      	movs	r1, #1
 8002da4:	4836      	ldr	r0, [pc, #216]	; (8002e80 <readGRAM+0x5ec>)
 8002da6:	f7fd fffb 	bl	8000da0 <PIN_HIGH>
 8002daa:	2101      	movs	r1, #1
 8002dac:	4834      	ldr	r0, [pc, #208]	; (8002e80 <readGRAM+0x5ec>)
 8002dae:	f7fd ffe7 	bl	8000d80 <PIN_LOW>
 8002db2:	2101      	movs	r1, #1
 8002db4:	4832      	ldr	r0, [pc, #200]	; (8002e80 <readGRAM+0x5ec>)
 8002db6:	f7fd ffe3 	bl	8000d80 <PIN_LOW>
 8002dba:	2101      	movs	r1, #1
 8002dbc:	4830      	ldr	r0, [pc, #192]	; (8002e80 <readGRAM+0x5ec>)
 8002dbe:	f7fd ffdf 	bl	8000d80 <PIN_LOW>
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	482e      	ldr	r0, [pc, #184]	; (8002e80 <readGRAM+0x5ec>)
 8002dc6:	f7fd ffdb 	bl	8000d80 <PIN_LOW>
 8002dca:	2101      	movs	r1, #1
 8002dcc:	482c      	ldr	r0, [pc, #176]	; (8002e80 <readGRAM+0x5ec>)
 8002dce:	f7fd ffd7 	bl	8000d80 <PIN_LOW>
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	482a      	ldr	r0, [pc, #168]	; (8002e80 <readGRAM+0x5ec>)
 8002dd6:	f7fd ffd3 	bl	8000d80 <PIN_LOW>
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4828      	ldr	r0, [pc, #160]	; (8002e80 <readGRAM+0x5ec>)
 8002dde:	f7fd ffcf 	bl	8000d80 <PIN_LOW>
 8002de2:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <readGRAM+0x5ec>)
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <readGRAM+0x5f0>)
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <readGRAM+0x5f0>)
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	4313      	orrs	r3, r2
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <readGRAM+0x5f0>)
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	085b      	lsrs	r3, r3, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	4313      	orrs	r3, r2
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <readGRAM+0x5f0>)
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <readGRAM+0x5ec>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	4313      	orrs	r3, r2
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <readGRAM+0x5f4>)
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <readGRAM+0x5ec>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	0a5b      	lsrs	r3, r3, #9
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	75fb      	strb	r3, [r7, #23]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4803      	ldr	r0, [pc, #12]	; (8002e80 <readGRAM+0x5ec>)
 8002e72:	f7fd ff95 	bl	8000da0 <PIN_HIGH>
 8002e76:	2101      	movs	r1, #1
 8002e78:	4801      	ldr	r0, [pc, #4]	; (8002e80 <readGRAM+0x5ec>)
 8002e7a:	f7fd ff91 	bl	8000da0 <PIN_HIGH>
        while (n)
 8002e7e:	e29f      	b.n	80033c0 <readGRAM+0xb2c>
 8002e80:	40020000 	.word	0x40020000
 8002e84:	40020400 	.word	0x40020400
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	200001a4 	.word	0x200001a4
        {
            if (_lcd_capable & READ_24BITS)
 8002e90:	4bab      	ldr	r3, [pc, #684]	; (8003140 <readGRAM+0x8ac>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 816b 	beq.w	8003174 <readGRAM+0x8e0>
            {
                READ_8(r);
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	48a8      	ldr	r0, [pc, #672]	; (8003144 <readGRAM+0x8b0>)
 8002ea2:	f7fd ff7d 	bl	8000da0 <PIN_HIGH>
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	48a6      	ldr	r0, [pc, #664]	; (8003144 <readGRAM+0x8b0>)
 8002eaa:	f7fd ff69 	bl	8000d80 <PIN_LOW>
 8002eae:	2101      	movs	r1, #1
 8002eb0:	48a4      	ldr	r0, [pc, #656]	; (8003144 <readGRAM+0x8b0>)
 8002eb2:	f7fd ff65 	bl	8000d80 <PIN_LOW>
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	48a2      	ldr	r0, [pc, #648]	; (8003144 <readGRAM+0x8b0>)
 8002eba:	f7fd ff61 	bl	8000d80 <PIN_LOW>
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	48a0      	ldr	r0, [pc, #640]	; (8003144 <readGRAM+0x8b0>)
 8002ec2:	f7fd ff5d 	bl	8000d80 <PIN_LOW>
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	489e      	ldr	r0, [pc, #632]	; (8003144 <readGRAM+0x8b0>)
 8002eca:	f7fd ff59 	bl	8000d80 <PIN_LOW>
 8002ece:	2101      	movs	r1, #1
 8002ed0:	489c      	ldr	r0, [pc, #624]	; (8003144 <readGRAM+0x8b0>)
 8002ed2:	f7fd ff55 	bl	8000d80 <PIN_LOW>
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	489a      	ldr	r0, [pc, #616]	; (8003144 <readGRAM+0x8b0>)
 8002eda:	f7fd ff51 	bl	8000d80 <PIN_LOW>
 8002ede:	4b99      	ldr	r3, [pc, #612]	; (8003144 <readGRAM+0x8b0>)
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	4b96      	ldr	r3, [pc, #600]	; (8003148 <readGRAM+0x8b4>)
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4313      	orrs	r3, r2
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4b92      	ldr	r3, [pc, #584]	; (8003148 <readGRAM+0x8b4>)
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4b8d      	ldr	r3, [pc, #564]	; (8003148 <readGRAM+0x8b4>)
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	085b      	lsrs	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	4b88      	ldr	r3, [pc, #544]	; (8003148 <readGRAM+0x8b4>)
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	4313      	orrs	r3, r2
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	4b83      	ldr	r3, [pc, #524]	; (8003144 <readGRAM+0x8b0>)
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	4313      	orrs	r3, r2
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4b81      	ldr	r3, [pc, #516]	; (800314c <readGRAM+0x8b8>)
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	099b      	lsrs	r3, r3, #6
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4313      	orrs	r3, r2
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	4b7a      	ldr	r3, [pc, #488]	; (8003144 <readGRAM+0x8b0>)
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	0a5b      	lsrs	r3, r3, #9
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	4313      	orrs	r3, r2
 8002f68:	75fb      	strb	r3, [r7, #23]
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	4875      	ldr	r0, [pc, #468]	; (8003144 <readGRAM+0x8b0>)
 8002f6e:	f7fd ff17 	bl	8000da0 <PIN_HIGH>
 8002f72:	2101      	movs	r1, #1
 8002f74:	4873      	ldr	r0, [pc, #460]	; (8003144 <readGRAM+0x8b0>)
 8002f76:	f7fd ff13 	bl	8000da0 <PIN_HIGH>
                READ_8(g);
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4871      	ldr	r0, [pc, #452]	; (8003144 <readGRAM+0x8b0>)
 8002f7e:	f7fd ff0f 	bl	8000da0 <PIN_HIGH>
 8002f82:	2101      	movs	r1, #1
 8002f84:	486f      	ldr	r0, [pc, #444]	; (8003144 <readGRAM+0x8b0>)
 8002f86:	f7fd fefb 	bl	8000d80 <PIN_LOW>
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	486d      	ldr	r0, [pc, #436]	; (8003144 <readGRAM+0x8b0>)
 8002f8e:	f7fd fef7 	bl	8000d80 <PIN_LOW>
 8002f92:	2101      	movs	r1, #1
 8002f94:	486b      	ldr	r0, [pc, #428]	; (8003144 <readGRAM+0x8b0>)
 8002f96:	f7fd fef3 	bl	8000d80 <PIN_LOW>
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4869      	ldr	r0, [pc, #420]	; (8003144 <readGRAM+0x8b0>)
 8002f9e:	f7fd feef 	bl	8000d80 <PIN_LOW>
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	4867      	ldr	r0, [pc, #412]	; (8003144 <readGRAM+0x8b0>)
 8002fa6:	f7fd feeb 	bl	8000d80 <PIN_LOW>
 8002faa:	2101      	movs	r1, #1
 8002fac:	4865      	ldr	r0, [pc, #404]	; (8003144 <readGRAM+0x8b0>)
 8002fae:	f7fd fee7 	bl	8000d80 <PIN_LOW>
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4863      	ldr	r0, [pc, #396]	; (8003144 <readGRAM+0x8b0>)
 8002fb6:	f7fd fee3 	bl	8000d80 <PIN_LOW>
 8002fba:	4b62      	ldr	r3, [pc, #392]	; (8003144 <readGRAM+0x8b0>)
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <readGRAM+0x8b4>)
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <readGRAM+0x8b4>)
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	4313      	orrs	r3, r2
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4b56      	ldr	r3, [pc, #344]	; (8003148 <readGRAM+0x8b4>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b51      	ldr	r3, [pc, #324]	; (8003148 <readGRAM+0x8b4>)
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	b2db      	uxtb	r3, r3
 800300c:	4313      	orrs	r3, r2
 800300e:	b2da      	uxtb	r2, r3
 8003010:	4b4c      	ldr	r3, [pc, #304]	; (8003144 <readGRAM+0x8b0>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	b2db      	uxtb	r3, r3
 800301e:	4313      	orrs	r3, r2
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4b4a      	ldr	r3, [pc, #296]	; (800314c <readGRAM+0x8b8>)
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	b2db      	uxtb	r3, r3
 8003030:	4313      	orrs	r3, r2
 8003032:	b2da      	uxtb	r2, r3
 8003034:	4b43      	ldr	r3, [pc, #268]	; (8003144 <readGRAM+0x8b0>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	0a5b      	lsrs	r3, r3, #9
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4313      	orrs	r3, r2
 8003044:	757b      	strb	r3, [r7, #21]
 8003046:	2101      	movs	r1, #1
 8003048:	483e      	ldr	r0, [pc, #248]	; (8003144 <readGRAM+0x8b0>)
 800304a:	f7fd fea9 	bl	8000da0 <PIN_HIGH>
 800304e:	2101      	movs	r1, #1
 8003050:	483c      	ldr	r0, [pc, #240]	; (8003144 <readGRAM+0x8b0>)
 8003052:	f7fd fea5 	bl	8000da0 <PIN_HIGH>
                READ_8(b);
 8003056:	2101      	movs	r1, #1
 8003058:	483a      	ldr	r0, [pc, #232]	; (8003144 <readGRAM+0x8b0>)
 800305a:	f7fd fea1 	bl	8000da0 <PIN_HIGH>
 800305e:	2101      	movs	r1, #1
 8003060:	4838      	ldr	r0, [pc, #224]	; (8003144 <readGRAM+0x8b0>)
 8003062:	f7fd fe8d 	bl	8000d80 <PIN_LOW>
 8003066:	2101      	movs	r1, #1
 8003068:	4836      	ldr	r0, [pc, #216]	; (8003144 <readGRAM+0x8b0>)
 800306a:	f7fd fe89 	bl	8000d80 <PIN_LOW>
 800306e:	2101      	movs	r1, #1
 8003070:	4834      	ldr	r0, [pc, #208]	; (8003144 <readGRAM+0x8b0>)
 8003072:	f7fd fe85 	bl	8000d80 <PIN_LOW>
 8003076:	2101      	movs	r1, #1
 8003078:	4832      	ldr	r0, [pc, #200]	; (8003144 <readGRAM+0x8b0>)
 800307a:	f7fd fe81 	bl	8000d80 <PIN_LOW>
 800307e:	2101      	movs	r1, #1
 8003080:	4830      	ldr	r0, [pc, #192]	; (8003144 <readGRAM+0x8b0>)
 8003082:	f7fd fe7d 	bl	8000d80 <PIN_LOW>
 8003086:	2101      	movs	r1, #1
 8003088:	482e      	ldr	r0, [pc, #184]	; (8003144 <readGRAM+0x8b0>)
 800308a:	f7fd fe79 	bl	8000d80 <PIN_LOW>
 800308e:	2101      	movs	r1, #1
 8003090:	482c      	ldr	r0, [pc, #176]	; (8003144 <readGRAM+0x8b0>)
 8003092:	f7fd fe75 	bl	8000d80 <PIN_LOW>
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <readGRAM+0x8b0>)
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	4b28      	ldr	r3, [pc, #160]	; (8003148 <readGRAM+0x8b4>)
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	4313      	orrs	r3, r2
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <readGRAM+0x8b4>)
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	4313      	orrs	r3, r2
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <readGRAM+0x8b4>)
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4313      	orrs	r3, r2
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <readGRAM+0x8b4>)
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4313      	orrs	r3, r2
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	4b15      	ldr	r3, [pc, #84]	; (8003144 <readGRAM+0x8b0>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	4313      	orrs	r3, r2
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <readGRAM+0x8b8>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	099b      	lsrs	r3, r3, #6
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	b2db      	uxtb	r3, r3
 800310c:	4313      	orrs	r3, r2
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <readGRAM+0x8b0>)
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	0a5b      	lsrs	r3, r3, #9
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	b2db      	uxtb	r3, r3
 800311e:	4313      	orrs	r3, r2
 8003120:	753b      	strb	r3, [r7, #20]
 8003122:	2101      	movs	r1, #1
 8003124:	4807      	ldr	r0, [pc, #28]	; (8003144 <readGRAM+0x8b0>)
 8003126:	f7fd fe3b 	bl	8000da0 <PIN_HIGH>
 800312a:	2101      	movs	r1, #1
 800312c:	4805      	ldr	r0, [pc, #20]	; (8003144 <readGRAM+0x8b0>)
 800312e:	f7fd fe37 	bl	8000da0 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8003132:	4b03      	ldr	r3, [pc, #12]	; (8003140 <readGRAM+0x8ac>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d011      	beq.n	8003162 <readGRAM+0x8ce>
 800313e:	e007      	b.n	8003150 <readGRAM+0x8bc>
 8003140:	20000196 	.word	0x20000196
 8003144:	40020000 	.word	0x40020000
 8003148:	40020400 	.word	0x40020400
 800314c:	40020800 	.word	0x40020800
                    ret = color565(b, g, r);
 8003150:	7dfa      	ldrb	r2, [r7, #23]
 8003152:	7d79      	ldrb	r1, [r7, #21]
 8003154:	7d3b      	ldrb	r3, [r7, #20]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd fee9 	bl	8000f2e <color565>
 800315c:	4603      	mov	r3, r0
 800315e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003160:	e113      	b.n	800338a <readGRAM+0xaf6>
                else
                    ret = color565(r, g, b);
 8003162:	7d3a      	ldrb	r2, [r7, #20]
 8003164:	7d79      	ldrb	r1, [r7, #21]
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd fee0 	bl	8000f2e <color565>
 800316e:	4603      	mov	r3, r0
 8003170:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003172:	e10a      	b.n	800338a <readGRAM+0xaf6>
            } else
            {
                READ_16(ret);
 8003174:	2101      	movs	r1, #1
 8003176:	4895      	ldr	r0, [pc, #596]	; (80033cc <readGRAM+0xb38>)
 8003178:	f7fd fe12 	bl	8000da0 <PIN_HIGH>
 800317c:	2101      	movs	r1, #1
 800317e:	4893      	ldr	r0, [pc, #588]	; (80033cc <readGRAM+0xb38>)
 8003180:	f7fd fdfe 	bl	8000d80 <PIN_LOW>
 8003184:	2101      	movs	r1, #1
 8003186:	4891      	ldr	r0, [pc, #580]	; (80033cc <readGRAM+0xb38>)
 8003188:	f7fd fdfa 	bl	8000d80 <PIN_LOW>
 800318c:	2101      	movs	r1, #1
 800318e:	488f      	ldr	r0, [pc, #572]	; (80033cc <readGRAM+0xb38>)
 8003190:	f7fd fdf6 	bl	8000d80 <PIN_LOW>
 8003194:	2101      	movs	r1, #1
 8003196:	488d      	ldr	r0, [pc, #564]	; (80033cc <readGRAM+0xb38>)
 8003198:	f7fd fdf2 	bl	8000d80 <PIN_LOW>
 800319c:	2101      	movs	r1, #1
 800319e:	488b      	ldr	r0, [pc, #556]	; (80033cc <readGRAM+0xb38>)
 80031a0:	f7fd fdee 	bl	8000d80 <PIN_LOW>
 80031a4:	2101      	movs	r1, #1
 80031a6:	4889      	ldr	r0, [pc, #548]	; (80033cc <readGRAM+0xb38>)
 80031a8:	f7fd fdea 	bl	8000d80 <PIN_LOW>
 80031ac:	2101      	movs	r1, #1
 80031ae:	4887      	ldr	r0, [pc, #540]	; (80033cc <readGRAM+0xb38>)
 80031b0:	f7fd fde6 	bl	8000d80 <PIN_LOW>
 80031b4:	4b85      	ldr	r3, [pc, #532]	; (80033cc <readGRAM+0xb38>)
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	085b      	lsrs	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4b83      	ldr	r3, [pc, #524]	; (80033d0 <readGRAM+0xb3c>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	4313      	orrs	r3, r2
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	4b7e      	ldr	r3, [pc, #504]	; (80033d0 <readGRAM+0xb3c>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	4313      	orrs	r3, r2
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b79      	ldr	r3, [pc, #484]	; (80033d0 <readGRAM+0xb3c>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4b75      	ldr	r3, [pc, #468]	; (80033d0 <readGRAM+0xb3c>)
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	b2db      	uxtb	r3, r3
 8003206:	4313      	orrs	r3, r2
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4b70      	ldr	r3, [pc, #448]	; (80033cc <readGRAM+0xb38>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	b2db      	uxtb	r3, r3
 8003218:	4313      	orrs	r3, r2
 800321a:	b2da      	uxtb	r2, r3
 800321c:	4b6d      	ldr	r3, [pc, #436]	; (80033d4 <readGRAM+0xb40>)
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	099b      	lsrs	r3, r3, #6
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	b2db      	uxtb	r3, r3
 800322a:	4313      	orrs	r3, r2
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4b67      	ldr	r3, [pc, #412]	; (80033cc <readGRAM+0xb38>)
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	0a5b      	lsrs	r3, r3, #9
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	4313      	orrs	r3, r2
 800323e:	75bb      	strb	r3, [r7, #22]
 8003240:	2101      	movs	r1, #1
 8003242:	4862      	ldr	r0, [pc, #392]	; (80033cc <readGRAM+0xb38>)
 8003244:	f7fd fdac 	bl	8000da0 <PIN_HIGH>
 8003248:	2101      	movs	r1, #1
 800324a:	4860      	ldr	r0, [pc, #384]	; (80033cc <readGRAM+0xb38>)
 800324c:	f7fd fda8 	bl	8000da0 <PIN_HIGH>
 8003250:	2101      	movs	r1, #1
 8003252:	485e      	ldr	r0, [pc, #376]	; (80033cc <readGRAM+0xb38>)
 8003254:	f7fd fda4 	bl	8000da0 <PIN_HIGH>
 8003258:	2101      	movs	r1, #1
 800325a:	485c      	ldr	r0, [pc, #368]	; (80033cc <readGRAM+0xb38>)
 800325c:	f7fd fd90 	bl	8000d80 <PIN_LOW>
 8003260:	2101      	movs	r1, #1
 8003262:	485a      	ldr	r0, [pc, #360]	; (80033cc <readGRAM+0xb38>)
 8003264:	f7fd fd8c 	bl	8000d80 <PIN_LOW>
 8003268:	2101      	movs	r1, #1
 800326a:	4858      	ldr	r0, [pc, #352]	; (80033cc <readGRAM+0xb38>)
 800326c:	f7fd fd88 	bl	8000d80 <PIN_LOW>
 8003270:	2101      	movs	r1, #1
 8003272:	4856      	ldr	r0, [pc, #344]	; (80033cc <readGRAM+0xb38>)
 8003274:	f7fd fd84 	bl	8000d80 <PIN_LOW>
 8003278:	2101      	movs	r1, #1
 800327a:	4854      	ldr	r0, [pc, #336]	; (80033cc <readGRAM+0xb38>)
 800327c:	f7fd fd80 	bl	8000d80 <PIN_LOW>
 8003280:	2101      	movs	r1, #1
 8003282:	4852      	ldr	r0, [pc, #328]	; (80033cc <readGRAM+0xb38>)
 8003284:	f7fd fd7c 	bl	8000d80 <PIN_LOW>
 8003288:	2101      	movs	r1, #1
 800328a:	4850      	ldr	r0, [pc, #320]	; (80033cc <readGRAM+0xb38>)
 800328c:	f7fd fd78 	bl	8000d80 <PIN_LOW>
 8003290:	4b4e      	ldr	r3, [pc, #312]	; (80033cc <readGRAM+0xb38>)
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	085b      	lsrs	r3, r3, #1
 8003296:	b29b      	uxth	r3, r3
 8003298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329c:	b29a      	uxth	r2, r3
 800329e:	4b4c      	ldr	r3, [pc, #304]	; (80033d0 <readGRAM+0xb3c>)
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	4313      	orrs	r3, r2
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <readGRAM+0xb3c>)
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4313      	orrs	r3, r2
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	4b42      	ldr	r3, [pc, #264]	; (80033d0 <readGRAM+0xb3c>)
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	4313      	orrs	r3, r2
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	4b3e      	ldr	r3, [pc, #248]	; (80033d0 <readGRAM+0xb3c>)
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	4313      	orrs	r3, r2
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	4b39      	ldr	r3, [pc, #228]	; (80033cc <readGRAM+0xb38>)
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <readGRAM+0xb40>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	b29b      	uxth	r3, r3
 8003306:	4313      	orrs	r3, r2
 8003308:	b29a      	uxth	r2, r3
 800330a:	4b30      	ldr	r3, [pc, #192]	; (80033cc <readGRAM+0xb38>)
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	0a5b      	lsrs	r3, r3, #9
 8003310:	b29b      	uxth	r3, r3
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	4313      	orrs	r3, r2
 800331a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800331c:	2101      	movs	r1, #1
 800331e:	482b      	ldr	r0, [pc, #172]	; (80033cc <readGRAM+0xb38>)
 8003320:	f7fd fd3e 	bl	8000da0 <PIN_HIGH>
 8003324:	2101      	movs	r1, #1
 8003326:	4829      	ldr	r0, [pc, #164]	; (80033cc <readGRAM+0xb38>)
 8003328:	f7fd fd3a 	bl	8000da0 <PIN_HIGH>
 800332c:	7dbb      	ldrb	r3, [r7, #22]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	b21a      	sxth	r2, r3
 8003332:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003336:	4313      	orrs	r3, r2
 8003338:	b21b      	sxth	r3, r3
 800333a:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 800333c:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <readGRAM+0xb44>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <readGRAM+0xac8>
                    ret = (ret >> 8) | (ret << 8);
 8003348:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b29b      	uxth	r3, r3
 800334e:	b21a      	sxth	r2, r3
 8003350:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	b21b      	sxth	r3, r3
 8003356:	4313      	orrs	r3, r2
 8003358:	b21b      	sxth	r3, r3
 800335a:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <readGRAM+0xb44>)
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d010      	beq.n	800338a <readGRAM+0xaf6>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8003368:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800336c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003370:	b21a      	sxth	r2, r3
 8003372:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003374:	0adb      	lsrs	r3, r3, #11
 8003376:	b29b      	uxth	r3, r3
 8003378:	b21b      	sxth	r3, r3
 800337a:	4313      	orrs	r3, r2
 800337c:	b21a      	sxth	r2, r3
 800337e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003380:	02db      	lsls	r3, r3, #11
 8003382:	b21b      	sxth	r3, r3
 8003384:	4313      	orrs	r3, r2
 8003386:	b21b      	sxth	r3, r3
 8003388:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 800338a:	4b14      	ldr	r3, [pc, #80]	; (80033dc <readGRAM+0xb48>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <readGRAM+0xb0a>
 8003392:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd fd79 	bl	8000e8c <color555_to_565>
 800339a:	4603      	mov	r3, r0
 800339c:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1c9a      	adds	r2, r3, #2
 80033a2:	60ba      	str	r2, [r7, #8]
 80033a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80033a6:	801a      	strh	r2, [r3, #0]
            n--;
 80033a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <readGRAM+0xb44>)
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00f      	beq.n	80033e0 <readGRAM+0xb4c>
        while (n)
 80033c0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f47f ad63 	bne.w	8002e90 <readGRAM+0x5fc>
 80033ca:	e00a      	b.n	80033e2 <readGRAM+0xb4e>
 80033cc:	40020000 	.word	0x40020000
 80033d0:	40020400 	.word	0x40020400
 80033d4:	40020800 	.word	0x40020800
 80033d8:	20000196 	.word	0x20000196
 80033dc:	200000a2 	.word	0x200000a2
                break;
 80033e0:	bf00      	nop
        }
        if (++col >= w) {
 80033e2:	8bfb      	ldrh	r3, [r7, #30]
 80033e4:	3301      	adds	r3, #1
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	83fb      	strh	r3, [r7, #30]
 80033ea:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80033ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	db0d      	blt.n	8003412 <readGRAM+0xb7e>
            col = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 80033fa:	8c3b      	ldrh	r3, [r7, #32]
 80033fc:	3301      	adds	r3, #1
 80033fe:	b29b      	uxth	r3, r3
 8003400:	843b      	strh	r3, [r7, #32]
 8003402:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003406:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800340a:	429a      	cmp	r2, r3
 800340c:	db01      	blt.n	8003412 <readGRAM+0xb7e>
                row = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8003412:	2101      	movs	r1, #1
 8003414:	4814      	ldr	r0, [pc, #80]	; (8003468 <readGRAM+0xbd4>)
 8003416:	f7fd fcc3 	bl	8000da0 <PIN_HIGH>
        CS_IDLE;
 800341a:	2101      	movs	r1, #1
 800341c:	4813      	ldr	r0, [pc, #76]	; (800346c <readGRAM+0xbd8>)
 800341e:	f7fd fcbf 	bl	8000da0 <PIN_HIGH>
        setWriteDir();
 8003422:	f7fd fe15 	bl	8001050 <setWriteDir>
    while (n > 0) {
 8003426:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800342a:	2b00      	cmp	r3, #0
 800342c:	f73f aa7e 	bgt.w	800292c <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <readGRAM+0xbdc>)
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d110      	bne.n	800345e <readGRAM+0xbca>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 800343c:	f7fd fcee 	bl	8000e1c <width>
 8003440:	4603      	mov	r3, r0
 8003442:	3b01      	subs	r3, #1
 8003444:	b29b      	uxth	r3, r3
 8003446:	b21c      	sxth	r4, r3
 8003448:	f7fd fcf4 	bl	8000e34 <height>
 800344c:	4603      	mov	r3, r0
 800344e:	3b01      	subs	r3, #1
 8003450:	b29b      	uxth	r3, r3
 8003452:	b21b      	sxth	r3, r3
 8003454:	4622      	mov	r2, r4
 8003456:	2100      	movs	r1, #0
 8003458:	2000      	movs	r0, #0
 800345a:	f000 fb97 	bl	8003b8c <setAddrWindow>
    return 0;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	372c      	adds	r7, #44	; 0x2c
 8003464:	46bd      	mov	sp, r7
 8003466:	bd90      	pop	{r4, r7, pc}
 8003468:	40020000 	.word	0x40020000
 800346c:	40020400 	.word	0x40020400
 8003470:	20000196 	.word	0x20000196

08003474 <setRotation>:


void setRotation(uint8_t r)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 800347e:	4bab      	ldr	r3, [pc, #684]	; (800372c <setRotation+0x2b8>)
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	b2da      	uxtb	r2, r3
 800348c:	4ba8      	ldr	r3, [pc, #672]	; (8003730 <setRotation+0x2bc>)
 800348e:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8003490:	4ba7      	ldr	r3, [pc, #668]	; (8003730 <setRotation+0x2bc>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <setRotation+0x2e>
 800349c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80034a0:	e000      	b.n	80034a4 <setRotation+0x30>
 80034a2:	22f0      	movs	r2, #240	; 0xf0
 80034a4:	4ba3      	ldr	r3, [pc, #652]	; (8003734 <setRotation+0x2c0>)
 80034a6:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 80034a8:	4ba1      	ldr	r3, [pc, #644]	; (8003730 <setRotation+0x2bc>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <setRotation+0x44>
 80034b4:	22f0      	movs	r2, #240	; 0xf0
 80034b6:	e001      	b.n	80034bc <setRotation+0x48>
 80034b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80034bc:	4b9e      	ldr	r3, [pc, #632]	; (8003738 <setRotation+0x2c4>)
 80034be:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 80034c0:	4b9b      	ldr	r3, [pc, #620]	; (8003730 <setRotation+0x2bc>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d817      	bhi.n	80034f8 <setRotation+0x84>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <setRotation+0x5c>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034e1 	.word	0x080034e1
 80034d4:	080034e7 	.word	0x080034e7
 80034d8:	080034ed 	.word	0x080034ed
 80034dc:	080034f3 	.word	0x080034f3
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 80034e0:	2348      	movs	r3, #72	; 0x48
 80034e2:	72fb      	strb	r3, [r7, #11]
       break;
 80034e4:	e008      	b.n	80034f8 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 80034e6:	2328      	movs	r3, #40	; 0x28
 80034e8:	72fb      	strb	r3, [r7, #11]
       break;
 80034ea:	e005      	b.n	80034f8 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 80034ec:	2398      	movs	r3, #152	; 0x98
 80034ee:	72fb      	strb	r3, [r7, #11]
       break;
 80034f0:	e002      	b.n	80034f8 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 80034f2:	23f8      	movs	r3, #248	; 0xf8
 80034f4:	72fb      	strb	r3, [r7, #11]
       break;
 80034f6:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 80034f8:	4b90      	ldr	r3, [pc, #576]	; (800373c <setRotation+0x2c8>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <setRotation+0x9c>
       val ^= 0x80;
 8003504:	7afb      	ldrb	r3, [r7, #11]
 8003506:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800350a:	43db      	mvns	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8003510:	4b8a      	ldr	r3, [pc, #552]	; (800373c <setRotation+0x2c8>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <setRotation+0xb2>
       val ^= 0x40;
 800351c:	7afb      	ldrb	r3, [r7, #11]
 800351e:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8003522:	b2db      	uxtb	r3, r3
 8003524:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 8003526:	4b85      	ldr	r3, [pc, #532]	; (800373c <setRotation+0x2c8>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <setRotation+0xc8>
       val ^= 0x08;
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	f083 0308 	eor.w	r3, r3, #8
 8003538:	b2db      	uxtb	r3, r3
 800353a:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 800353c:	4b7f      	ldr	r3, [pc, #508]	; (800373c <setRotation+0x2c8>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8119 	beq.w	800377c <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 800354a:	4b7d      	ldr	r3, [pc, #500]	; (8003740 <setRotation+0x2cc>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	f646 0214 	movw	r2, #26644	; 0x6814
 8003552:	4293      	cmp	r3, r2
 8003554:	d128      	bne.n	80035a8 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 8003556:	7afb      	ldrb	r3, [r7, #11]
 8003558:	b25b      	sxtb	r3, r3
 800355a:	105b      	asrs	r3, r3, #1
 800355c:	b25b      	sxtb	r3, r3
 800355e:	b29b      	uxth	r3, r3
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	105b      	asrs	r3, r3, #1
 800356a:	b29b      	uxth	r3, r3
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8003572:	7afb      	ldrb	r3, [r7, #11]
 8003574:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003578:	b2db      	uxtb	r3, r3
 800357a:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8003580:	8a3b      	ldrh	r3, [r7, #16]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	89fb      	ldrh	r3, [r7, #14]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4313      	orrs	r3, r2
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f043 0302 	orr.w	r3, r3, #2
 8003590:	b2db      	uxtb	r3, r3
 8003592:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8003594:	233b      	movs	r3, #59	; 0x3b
 8003596:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8003598:	f107 0308 	add.w	r3, r7, #8
 800359c:	461a      	mov	r2, r3
 800359e:	2103      	movs	r1, #3
 80035a0:	20b6      	movs	r0, #182	; 0xb6
 80035a2:	f7fd ffd9 	bl	8001558 <WriteCmdParamN>
           goto common_MC;
 80035a6:	e0a4      	b.n	80036f2 <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 80035a8:	4b65      	ldr	r3, [pc, #404]	; (8003740 <setRotation+0x2cc>)
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	f641 1263 	movw	r2, #6499	; 0x1963
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00b      	beq.n	80035cc <setRotation+0x158>
 80035b4:	4b62      	ldr	r3, [pc, #392]	; (8003740 <setRotation+0x2cc>)
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	f249 4281 	movw	r2, #38017	; 0x9481
 80035bc:	4293      	cmp	r3, r2
 80035be:	d005      	beq.n	80035cc <setRotation+0x158>
 80035c0:	4b5f      	ldr	r3, [pc, #380]	; (8003740 <setRotation+0x2cc>)
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	f241 5211 	movw	r2, #5393	; 0x1511
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d139      	bne.n	8003640 <setRotation+0x1cc>
           if (val & 0x80)
 80035cc:	7afb      	ldrb	r3, [r7, #11]
 80035ce:	b25b      	sxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	da04      	bge.n	80035de <setRotation+0x16a>
               val |= 0x01;    //GS
 80035d4:	7afb      	ldrb	r3, [r7, #11]
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 80035de:	7afb      	ldrb	r3, [r7, #11]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <setRotation+0x17e>
               val |= 0x02;    //SS
 80035e8:	7afb      	ldrb	r3, [r7, #11]
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 80035f2:	4b53      	ldr	r3, [pc, #332]	; (8003740 <setRotation+0x2cc>)
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	f641 1263 	movw	r2, #6499	; 0x1963
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d104      	bne.n	8003608 <setRotation+0x194>
 80035fe:	7afb      	ldrb	r3, [r7, #11]
 8003600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003604:	b2db      	uxtb	r3, r3
 8003606:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8003608:	4b4d      	ldr	r3, [pc, #308]	; (8003740 <setRotation+0x2cc>)
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	f249 4281 	movw	r2, #38017	; 0x9481
 8003610:	4293      	cmp	r3, r2
 8003612:	d104      	bne.n	800361e <setRotation+0x1aa>
 8003614:	7afb      	ldrb	r3, [r7, #11]
 8003616:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 800361a:	b2db      	uxtb	r3, r3
 800361c:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 800361e:	4b48      	ldr	r3, [pc, #288]	; (8003740 <setRotation+0x2cc>)
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	f241 5211 	movw	r2, #5393	; 0x1511
 8003626:	4293      	cmp	r3, r2
 8003628:	d160      	bne.n	80036ec <setRotation+0x278>
               val &= ~0x10;   //remove ML
 800362a:	7afb      	ldrb	r3, [r7, #11]
 800362c:	f023 0310 	bic.w	r3, r3, #16
 8003630:	b2db      	uxtb	r3, r3
 8003632:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8003634:	7afb      	ldrb	r3, [r7, #11]
 8003636:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800363a:	b2db      	uxtb	r3, r3
 800363c:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 800363e:	e055      	b.n	80036ec <setRotation+0x278>
      }
       else if (is8347) {
 8003640:	4b40      	ldr	r3, [pc, #256]	; (8003744 <setRotation+0x2d0>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d053      	beq.n	80036f0 <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8003648:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <setRotation+0x2d4>)
 800364a:	2202      	movs	r2, #2
 800364c:	801a      	strh	r2, [r3, #0]
 800364e:	4b3f      	ldr	r3, [pc, #252]	; (800374c <setRotation+0x2d8>)
 8003650:	2206      	movs	r2, #6
 8003652:	801a      	strh	r2, [r3, #0]
 8003654:	4b3e      	ldr	r3, [pc, #248]	; (8003750 <setRotation+0x2dc>)
 8003656:	2222      	movs	r2, #34	; 0x22
 8003658:	801a      	strh	r2, [r3, #0]
 800365a:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <setRotation+0x2e0>)
 800365c:	2202      	movs	r2, #2
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	4b3d      	ldr	r3, [pc, #244]	; (8003758 <setRotation+0x2e4>)
 8003662:	2204      	movs	r2, #4
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	4b3d      	ldr	r3, [pc, #244]	; (800375c <setRotation+0x2e8>)
 8003668:	2206      	movs	r2, #6
 800366a:	801a      	strh	r2, [r3, #0]
 800366c:	4b3c      	ldr	r3, [pc, #240]	; (8003760 <setRotation+0x2ec>)
 800366e:	2208      	movs	r2, #8
 8003670:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8003672:	4b33      	ldr	r3, [pc, #204]	; (8003740 <setRotation+0x2cc>)
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	2b65      	cmp	r3, #101	; 0x65
 8003678:	d121      	bne.n	80036be <setRotation+0x24a>
               val |= 0x01;    //GS=1
 800367a:	7afb      	ldrb	r3, [r7, #11]
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8003684:	7afb      	ldrb	r3, [r7, #11]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <setRotation+0x226>
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 8003694:	43db      	mvns	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d006      	beq.n	80036b2 <setRotation+0x23e>
 80036a4:	4b28      	ldr	r3, [pc, #160]	; (8003748 <setRotation+0x2d4>)
 80036a6:	2282      	movs	r2, #130	; 0x82
 80036a8:	801a      	strh	r2, [r3, #0]
 80036aa:	4b28      	ldr	r3, [pc, #160]	; (800374c <setRotation+0x2d8>)
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	801a      	strh	r2, [r3, #0]
 80036b0:	e005      	b.n	80036be <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 80036b2:	4b25      	ldr	r3, [pc, #148]	; (8003748 <setRotation+0x2d4>)
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	4b24      	ldr	r3, [pc, #144]	; (800374c <setRotation+0x2d8>)
 80036ba:	2282      	movs	r2, #130	; 0x82
 80036bc:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <setRotation+0x2cc>)
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	f245 2252 	movw	r2, #21074	; 0x5252
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d129      	bne.n	800371e <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 80036ca:	7afb      	ldrb	r3, [r7, #11]
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 80036d4:	7afb      	ldrb	r3, [r7, #11]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01f      	beq.n	800371e <setRotation+0x2aa>
 80036de:	7afb      	ldrb	r3, [r7, #11]
 80036e0:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 80036e4:	43db      	mvns	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 80036ea:	e018      	b.n	800371e <setRotation+0x2aa>
           goto common_MC;
 80036ec:	bf00      	nop
 80036ee:	e000      	b.n	80036f2 <setRotation+0x27e>
       }
     common_MC:
 80036f0:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <setRotation+0x2d4>)
 80036f4:	222a      	movs	r2, #42	; 0x2a
 80036f6:	801a      	strh	r2, [r3, #0]
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <setRotation+0x2d8>)
 80036fa:	222b      	movs	r2, #43	; 0x2b
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <setRotation+0x2dc>)
 8003700:	222c      	movs	r2, #44	; 0x2c
 8003702:	801a      	strh	r2, [r3, #0]
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <setRotation+0x2e0>)
 8003706:	222a      	movs	r2, #42	; 0x2a
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	4b13      	ldr	r3, [pc, #76]	; (8003758 <setRotation+0x2e4>)
 800370c:	222a      	movs	r2, #42	; 0x2a
 800370e:	801a      	strh	r2, [r3, #0]
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <setRotation+0x2e8>)
 8003712:	222b      	movs	r2, #43	; 0x2b
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <setRotation+0x2ec>)
 8003718:	222b      	movs	r2, #43	; 0x2b
 800371a:	801a      	strh	r2, [r3, #0]
 800371c:	e000      	b.n	8003720 <setRotation+0x2ac>
			goto common_BGR;
 800371e:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <setRotation+0x2d0>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01d      	beq.n	8003764 <setRotation+0x2f0>
 8003728:	2316      	movs	r3, #22
 800372a:	e01c      	b.n	8003766 <setRotation+0x2f2>
 800372c:	2000019a 	.word	0x2000019a
 8003730:	200000a6 	.word	0x200000a6
 8003734:	20000008 	.word	0x20000008
 8003738:	2000000a 	.word	0x2000000a
 800373c:	20000196 	.word	0x20000196
 8003740:	200001a4 	.word	0x200001a4
 8003744:	200000a1 	.word	0x200000a1
 8003748:	2000019e 	.word	0x2000019e
 800374c:	2000019c 	.word	0x2000019c
 8003750:	20000194 	.word	0x20000194
 8003754:	200001a0 	.word	0x200001a0
 8003758:	200001a8 	.word	0x200001a8
 800375c:	20000198 	.word	0x20000198
 8003760:	200001a2 	.word	0x200001a2
 8003764:	2336      	movs	r3, #54	; 0x36
 8003766:	f107 020b 	add.w	r2, r7, #11
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd fef3 	bl	8001558 <WriteCmdParamN>
       _lcd_madctl = val;
 8003772:	7afb      	ldrb	r3, [r7, #11]
 8003774:	b29a      	uxth	r2, r3
 8003776:	4b77      	ldr	r3, [pc, #476]	; (8003954 <setRotation+0x4e0>)
 8003778:	801a      	strh	r2, [r3, #0]
 800377a:	e0a5      	b.n	80038c8 <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 800377c:	4b76      	ldr	r3, [pc, #472]	; (8003958 <setRotation+0x4e4>)
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <setRotation+0x33c>
 8003788:	f24b 5209 	movw	r2, #46345	; 0xb509
 800378c:	4293      	cmp	r3, r2
 800378e:	dc4f      	bgt.n	8003830 <setRotation+0x3bc>
 8003790:	f249 3226 	movw	r2, #37670	; 0x9326
 8003794:	4293      	cmp	r3, r2
 8003796:	d00b      	beq.n	80037b0 <setRotation+0x33c>
 8003798:	f249 3226 	movw	r2, #37670	; 0x9326
 800379c:	4293      	cmp	r3, r2
 800379e:	dc47      	bgt.n	8003830 <setRotation+0x3bc>
 80037a0:	f245 4220 	movw	r2, #21536	; 0x5420
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <setRotation+0x33c>
 80037a8:	f247 7293 	movw	r2, #30611	; 0x7793
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d13f      	bne.n	8003830 <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 80037b0:	4b6a      	ldr	r3, [pc, #424]	; (800395c <setRotation+0x4e8>)
 80037b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b6:	801a      	strh	r2, [r3, #0]
 80037b8:	4b69      	ldr	r3, [pc, #420]	; (8003960 <setRotation+0x4ec>)
 80037ba:	f240 2201 	movw	r2, #513	; 0x201
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	4b68      	ldr	r3, [pc, #416]	; (8003964 <setRotation+0x4f0>)
 80037c2:	f240 2202 	movw	r2, #514	; 0x202
 80037c6:	801a      	strh	r2, [r3, #0]
 80037c8:	4b67      	ldr	r3, [pc, #412]	; (8003968 <setRotation+0x4f4>)
 80037ca:	f44f 7204 	mov.w	r2, #528	; 0x210
 80037ce:	801a      	strh	r2, [r3, #0]
 80037d0:	4b66      	ldr	r3, [pc, #408]	; (800396c <setRotation+0x4f8>)
 80037d2:	f240 2211 	movw	r2, #529	; 0x211
 80037d6:	801a      	strh	r2, [r3, #0]
 80037d8:	4b65      	ldr	r3, [pc, #404]	; (8003970 <setRotation+0x4fc>)
 80037da:	f240 2212 	movw	r2, #530	; 0x212
 80037de:	801a      	strh	r2, [r3, #0]
 80037e0:	4b64      	ldr	r3, [pc, #400]	; (8003974 <setRotation+0x500>)
 80037e2:	f240 2213 	movw	r2, #531	; 0x213
 80037e6:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	b25b      	sxtb	r3, r3
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80037f6:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 80037f8:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80037fc:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 80037fe:	4b56      	ldr	r3, [pc, #344]	; (8003958 <setRotation+0x4e4>)
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	f249 3226 	movw	r2, #37670	; 0x9326
 8003806:	4293      	cmp	r3, r2
 8003808:	d005      	beq.n	8003816 <setRotation+0x3a2>
 800380a:	4b53      	ldr	r3, [pc, #332]	; (8003958 <setRotation+0x4e4>)
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	f245 4220 	movw	r2, #21536	; 0x5420
 8003812:	4293      	cmp	r3, r2
 8003814:	d102      	bne.n	800381c <setRotation+0x3a8>
 8003816:	8abb      	ldrh	r3, [r7, #20]
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 800381c:	8a3a      	ldrh	r2, [r7, #16]
 800381e:	8abb      	ldrh	r3, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	b29b      	uxth	r3, r3
 8003824:	4619      	mov	r1, r3
 8003826:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800382a:	f7fd fbbe 	bl	8000faa <WriteCmdData>
           goto common_SS;
 800382e:	e024      	b.n	800387a <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8003830:	4b4a      	ldr	r3, [pc, #296]	; (800395c <setRotation+0x4e8>)
 8003832:	2220      	movs	r2, #32
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	4b4a      	ldr	r3, [pc, #296]	; (8003960 <setRotation+0x4ec>)
 8003838:	2221      	movs	r2, #33	; 0x21
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	4b49      	ldr	r3, [pc, #292]	; (8003964 <setRotation+0x4f0>)
 800383e:	2222      	movs	r2, #34	; 0x22
 8003840:	801a      	strh	r2, [r3, #0]
 8003842:	4b49      	ldr	r3, [pc, #292]	; (8003968 <setRotation+0x4f4>)
 8003844:	2250      	movs	r2, #80	; 0x50
 8003846:	801a      	strh	r2, [r3, #0]
 8003848:	4b48      	ldr	r3, [pc, #288]	; (800396c <setRotation+0x4f8>)
 800384a:	2251      	movs	r2, #81	; 0x51
 800384c:	801a      	strh	r2, [r3, #0]
 800384e:	4b48      	ldr	r3, [pc, #288]	; (8003970 <setRotation+0x4fc>)
 8003850:	2252      	movs	r2, #82	; 0x52
 8003852:	801a      	strh	r2, [r3, #0]
 8003854:	4b47      	ldr	r3, [pc, #284]	; (8003974 <setRotation+0x500>)
 8003856:	2253      	movs	r2, #83	; 0x53
 8003858:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 800385a:	7afb      	ldrb	r3, [r7, #11]
 800385c:	b25b      	sxtb	r3, r3
 800385e:	b29b      	uxth	r3, r3
 8003860:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003864:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003868:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 800386a:	8a3b      	ldrh	r3, [r7, #16]
 800386c:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8003870:	b29b      	uxth	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	2060      	movs	r0, #96	; 0x60
 8003876:	f7fd fb98 	bl	8000faa <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 800387a:	7afb      	ldrb	r3, [r7, #11]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	b29b      	uxth	r3, r3
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	4619      	mov	r1, r3
 800388a:	2001      	movs	r0, #1
 800388c:	f7fd fb8d 	bl	8000faa <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8003890:	7afb      	ldrb	r3, [r7, #11]
 8003892:	109b      	asrs	r3, r3, #2
 8003894:	b29b      	uxth	r3, r3
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 800389c:	7afb      	ldrb	r3, [r7, #11]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 80038a6:	8afb      	ldrh	r3, [r7, #22]
 80038a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038ac:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 80038ae:	8afb      	ldrh	r3, [r7, #22]
 80038b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	4b27      	ldr	r3, [pc, #156]	; (8003954 <setRotation+0x4e0>)
 80038b8:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <setRotation+0x4e0>)
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	4619      	mov	r1, r3
 80038c0:	2003      	movs	r0, #3
 80038c2:	f7fd fb72 	bl	8000faa <WriteCmdData>
           break;
 80038c6:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <setRotation+0x504>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d023      	beq.n	800391c <setRotation+0x4a8>
 80038d4:	4b29      	ldr	r3, [pc, #164]	; (800397c <setRotation+0x508>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d11d      	bne.n	800391c <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 80038e0:	4b1e      	ldr	r3, [pc, #120]	; (800395c <setRotation+0x4e8>)
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	81bb      	strh	r3, [r7, #12]
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <setRotation+0x4ec>)
 80038e8:	881a      	ldrh	r2, [r3, #0]
 80038ea:	4b1c      	ldr	r3, [pc, #112]	; (800395c <setRotation+0x4e8>)
 80038ec:	801a      	strh	r2, [r3, #0]
 80038ee:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <setRotation+0x4ec>)
 80038f0:	89bb      	ldrh	r3, [r7, #12]
 80038f2:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 80038f4:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <setRotation+0x4f4>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	81bb      	strh	r3, [r7, #12]
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <setRotation+0x4fc>)
 80038fc:	881a      	ldrh	r2, [r3, #0]
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <setRotation+0x4f4>)
 8003900:	801a      	strh	r2, [r3, #0]
 8003902:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <setRotation+0x4fc>)
 8003904:	89bb      	ldrh	r3, [r7, #12]
 8003906:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8003908:	4b18      	ldr	r3, [pc, #96]	; (800396c <setRotation+0x4f8>)
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	81bb      	strh	r3, [r7, #12]
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <setRotation+0x500>)
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <setRotation+0x4f8>)
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	4a17      	ldr	r2, [pc, #92]	; (8003974 <setRotation+0x500>)
 8003918:	89bb      	ldrh	r3, [r7, #12]
 800391a:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 800391c:	f7fd fa7e 	bl	8000e1c <width>
 8003920:	4603      	mov	r3, r0
 8003922:	3b01      	subs	r3, #1
 8003924:	b29b      	uxth	r3, r3
 8003926:	b21c      	sxth	r4, r3
 8003928:	f7fd fa84 	bl	8000e34 <height>
 800392c:	4603      	mov	r3, r0
 800392e:	3b01      	subs	r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	b21b      	sxth	r3, r3
 8003934:	4622      	mov	r2, r4
 8003936:	2100      	movs	r1, #0
 8003938:	2000      	movs	r0, #0
 800393a:	f000 f927 	bl	8003b8c <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 800393e:	2200      	movs	r2, #0
 8003940:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003944:	2000      	movs	r0, #0
 8003946:	f000 fa45 	bl	8003dd4 <vertScroll>
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	bd90      	pop	{r4, r7, pc}
 8003952:	bf00      	nop
 8003954:	200001aa 	.word	0x200001aa
 8003958:	200001a4 	.word	0x200001a4
 800395c:	2000019e 	.word	0x2000019e
 8003960:	2000019c 	.word	0x2000019c
 8003964:	20000194 	.word	0x20000194
 8003968:	200001a0 	.word	0x200001a0
 800396c:	200001a8 	.word	0x200001a8
 8003970:	20000198 	.word	0x20000198
 8003974:	200001a2 	.word	0x200001a2
 8003978:	200000a6 	.word	0x200000a6
 800397c:	20000196 	.word	0x20000196

08003980 <drawPixel>:


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	80fb      	strh	r3, [r7, #6]
 800398a:	460b      	mov	r3, r1
 800398c:	80bb      	strh	r3, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8003992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f2c0 80e7 	blt.w	8003b6a <drawPixel+0x1ea>
 800399c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f2c0 80e2 	blt.w	8003b6a <drawPixel+0x1ea>
 80039a6:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80039aa:	f7fd fa37 	bl	8000e1c <width>
 80039ae:	4603      	mov	r3, r0
 80039b0:	429c      	cmp	r4, r3
 80039b2:	f280 80da 	bge.w	8003b6a <drawPixel+0x1ea>
 80039b6:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80039ba:	f7fd fa3b 	bl	8000e34 <height>
 80039be:	4603      	mov	r3, r0
 80039c0:	429c      	cmp	r4, r3
 80039c2:	f280 80d2 	bge.w	8003b6a <drawPixel+0x1ea>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 80039c6:	4b6b      	ldr	r3, [pc, #428]	; (8003b74 <drawPixel+0x1f4>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <drawPixel+0x5a>
 80039ce:	887b      	ldrh	r3, [r7, #2]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fd fa3b 	bl	8000e4c <color565_to_555>
 80039d6:	4603      	mov	r3, r0
 80039d8:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 80039da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80039e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80039ea:	f000 f8cf 	bl	8003b8c <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 80039ee:	4b62      	ldr	r3, [pc, #392]	; (8003b78 <drawPixel+0x1f8>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80b1 	beq.w	8003b5a <drawPixel+0x1da>
 80039f8:	2101      	movs	r1, #1
 80039fa:	4860      	ldr	r0, [pc, #384]	; (8003b7c <drawPixel+0x1fc>)
 80039fc:	f7fd f9c0 	bl	8000d80 <PIN_LOW>
 8003a00:	2110      	movs	r1, #16
 8003a02:	485f      	ldr	r0, [pc, #380]	; (8003b80 <drawPixel+0x200>)
 8003a04:	f7fd f9bc 	bl	8000d80 <PIN_LOW>
 8003a08:	4b5e      	ldr	r3, [pc, #376]	; (8003b84 <drawPixel+0x204>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	4b5c      	ldr	r3, [pc, #368]	; (8003b84 <drawPixel+0x204>)
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	73bb      	strb	r3, [r7, #14]
 8003a18:	4b59      	ldr	r3, [pc, #356]	; (8003b80 <drawPixel+0x200>)
 8003a1a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003a1e:	619a      	str	r2, [r3, #24]
 8003a20:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <drawPixel+0x1fc>)
 8003a22:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003a26:	619a      	str	r2, [r3, #24]
 8003a28:	4b57      	ldr	r3, [pc, #348]	; (8003b88 <drawPixel+0x208>)
 8003a2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003a2e:	619a      	str	r2, [r3, #24]
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	431a      	orrs	r2, r3
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	025b      	lsls	r3, r3, #9
 8003a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <drawPixel+0x200>)
 8003a4e:	619a      	str	r2, [r3, #24]
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	105b      	asrs	r3, r3, #1
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	431a      	orrs	r2, r3
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	431a      	orrs	r2, r3
 8003a74:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <drawPixel+0x1fc>)
 8003a76:	619a      	str	r2, [r3, #24]
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	019b      	lsls	r3, r3, #6
 8003a7c:	4a42      	ldr	r2, [pc, #264]	; (8003b88 <drawPixel+0x208>)
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	6193      	str	r3, [r2, #24]
 8003a84:	2102      	movs	r1, #2
 8003a86:	483e      	ldr	r0, [pc, #248]	; (8003b80 <drawPixel+0x200>)
 8003a88:	f7fd f97a 	bl	8000d80 <PIN_LOW>
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	483c      	ldr	r0, [pc, #240]	; (8003b80 <drawPixel+0x200>)
 8003a90:	f7fd f976 	bl	8000d80 <PIN_LOW>
 8003a94:	2102      	movs	r1, #2
 8003a96:	483a      	ldr	r0, [pc, #232]	; (8003b80 <drawPixel+0x200>)
 8003a98:	f7fd f972 	bl	8000d80 <PIN_LOW>
 8003a9c:	2102      	movs	r1, #2
 8003a9e:	4838      	ldr	r0, [pc, #224]	; (8003b80 <drawPixel+0x200>)
 8003aa0:	f7fd f97e 	bl	8000da0 <PIN_HIGH>
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	4836      	ldr	r0, [pc, #216]	; (8003b80 <drawPixel+0x200>)
 8003aa8:	f7fd f97a 	bl	8000da0 <PIN_HIGH>
 8003aac:	4b34      	ldr	r3, [pc, #208]	; (8003b80 <drawPixel+0x200>)
 8003aae:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003ab2:	619a      	str	r2, [r3, #24]
 8003ab4:	4b31      	ldr	r3, [pc, #196]	; (8003b7c <drawPixel+0x1fc>)
 8003ab6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003aba:	619a      	str	r2, [r3, #24]
 8003abc:	4b32      	ldr	r3, [pc, #200]	; (8003b88 <drawPixel+0x208>)
 8003abe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ac2:	619a      	str	r2, [r3, #24]
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003acc:	7bbb      	ldrb	r3, [r7, #14]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	7bbb      	ldrb	r3, [r7, #14]
 8003ad8:	025b      	lsls	r3, r3, #9
 8003ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <drawPixel+0x200>)
 8003ae2:	619a      	str	r2, [r3, #24]
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003aec:	7bbb      	ldrb	r3, [r7, #14]
 8003aee:	105b      	asrs	r3, r3, #1
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	431a      	orrs	r2, r3
 8003af6:	7bbb      	ldrb	r3, [r7, #14]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	431a      	orrs	r2, r3
 8003b00:	7bbb      	ldrb	r3, [r7, #14]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	431a      	orrs	r2, r3
 8003b08:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <drawPixel+0x1fc>)
 8003b0a:	619a      	str	r2, [r3, #24]
 8003b0c:	7bbb      	ldrb	r3, [r7, #14]
 8003b0e:	019b      	lsls	r3, r3, #6
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <drawPixel+0x208>)
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	6193      	str	r3, [r2, #24]
 8003b18:	2102      	movs	r1, #2
 8003b1a:	4819      	ldr	r0, [pc, #100]	; (8003b80 <drawPixel+0x200>)
 8003b1c:	f7fd f930 	bl	8000d80 <PIN_LOW>
 8003b20:	2102      	movs	r1, #2
 8003b22:	4817      	ldr	r0, [pc, #92]	; (8003b80 <drawPixel+0x200>)
 8003b24:	f7fd f92c 	bl	8000d80 <PIN_LOW>
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4815      	ldr	r0, [pc, #84]	; (8003b80 <drawPixel+0x200>)
 8003b2c:	f7fd f928 	bl	8000d80 <PIN_LOW>
 8003b30:	2102      	movs	r1, #2
 8003b32:	4813      	ldr	r0, [pc, #76]	; (8003b80 <drawPixel+0x200>)
 8003b34:	f7fd f934 	bl	8000da0 <PIN_HIGH>
 8003b38:	2102      	movs	r1, #2
 8003b3a:	4811      	ldr	r0, [pc, #68]	; (8003b80 <drawPixel+0x200>)
 8003b3c:	f7fd f930 	bl	8000da0 <PIN_HIGH>
 8003b40:	2110      	movs	r1, #16
 8003b42:	480f      	ldr	r0, [pc, #60]	; (8003b80 <drawPixel+0x200>)
 8003b44:	f7fd f92c 	bl	8000da0 <PIN_HIGH>
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fd faae 	bl	80010ac <write24>
 8003b50:	2101      	movs	r1, #1
 8003b52:	480a      	ldr	r0, [pc, #40]	; (8003b7c <drawPixel+0x1fc>)
 8003b54:	f7fd f924 	bl	8000da0 <PIN_HIGH>
 8003b58:	e008      	b.n	8003b6c <drawPixel+0x1ec>
   WriteCmdData(_MW, color);
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <drawPixel+0x204>)
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd fa21 	bl	8000faa <WriteCmdData>
 8003b68:	e000      	b.n	8003b6c <drawPixel+0x1ec>
       return;
 8003b6a:	bf00      	nop
}
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd90      	pop	{r4, r7, pc}
 8003b72:	bf00      	nop
 8003b74:	200000a2 	.word	0x200000a2
 8003b78:	200000a3 	.word	0x200000a3
 8003b7c:	40020400 	.word	0x40020400
 8003b80:	40020000 	.word	0x40020000
 8003b84:	20000194 	.word	0x20000194
 8003b88:	40020800 	.word	0x40020800

08003b8c <setAddrWindow>:


void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8003b8c:	b590      	push	{r4, r7, lr}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	4604      	mov	r4, r0
 8003b94:	4608      	mov	r0, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	80fb      	strh	r3, [r7, #6]
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80bb      	strh	r3, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	807b      	strh	r3, [r7, #2]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8003baa:	4b80      	ldr	r3, [pc, #512]	; (8003dac <setAddrWindow+0x220>)
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	f249 3227 	movw	r2, #37671	; 0x9327
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d117      	bne.n	8003be6 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8003bb6:	4b7e      	ldr	r3, [pc, #504]	; (8003db0 <setAddrWindow+0x224>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d107      	bne.n	8003bce <setAddrWindow+0x42>
 8003bbe:	88bb      	ldrh	r3, [r7, #4]
 8003bc0:	3320      	adds	r3, #32
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	80bb      	strh	r3, [r7, #4]
 8003bc6:	883b      	ldrh	r3, [r7, #0]
 8003bc8:	3320      	adds	r3, #32
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8003bce:	4b78      	ldr	r3, [pc, #480]	; (8003db0 <setAddrWindow+0x224>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d107      	bne.n	8003be6 <setAddrWindow+0x5a>
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	3320      	adds	r3, #32
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	80fb      	strh	r3, [r7, #6]
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	3320      	adds	r3, #32
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8003be6:	4b71      	ldr	r3, [pc, #452]	; (8003dac <setAddrWindow+0x220>)
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	f241 5226 	movw	r2, #5414	; 0x1526
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d128      	bne.n	8003c44 <setAddrWindow+0xb8>
 8003bf2:	4b6f      	ldr	r3, [pc, #444]	; (8003db0 <setAddrWindow+0x224>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d022      	beq.n	8003c44 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8003bfe:	887a      	ldrh	r2, [r7, #2]
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	81fb      	strh	r3, [r7, #14]
 8003c08:	883a      	ldrh	r2, [r7, #0]
 8003c0a:	88bb      	ldrh	r3, [r7, #4]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8003c12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <setAddrWindow+0x9c>
 8003c1a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3301      	adds	r3, #1
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	803b      	strh	r3, [r7, #0]
 8003c26:	e00d      	b.n	8003c44 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8003c28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <setAddrWindow+0xb8>
 8003c30:	887a      	ldrh	r2, [r7, #2]
 8003c32:	89bb      	ldrh	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	807b      	strh	r3, [r7, #2]
 8003c3a:	883a      	ldrh	r2, [r7, #0]
 8003c3c:	89bb      	ldrh	r3, [r7, #12]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003c44:	4b5b      	ldr	r3, [pc, #364]	; (8003db4 <setAddrWindow+0x228>)
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d054      	beq.n	8003cfa <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <setAddrWindow+0x22c>)
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b2d8      	uxtb	r0, r3
 8003c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c5a:	121b      	asrs	r3, r3, #8
 8003c5c:	b21b      	sxth	r3, r3
 8003c5e:	b2d9      	uxtb	r1, r3
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c68:	121b      	asrs	r3, r3, #8
 8003c6a:	b21b      	sxth	r3, r3
 8003c6c:	b2dc      	uxtb	r4, r3
 8003c6e:	887b      	ldrh	r3, [r7, #2]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	4623      	mov	r3, r4
 8003c76:	f7fd fe3d 	bl	80018f4 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8003c7a:	4b50      	ldr	r3, [pc, #320]	; (8003dbc <setAddrWindow+0x230>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b2d8      	uxtb	r0, r3
 8003c80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c84:	121b      	asrs	r3, r3, #8
 8003c86:	b21b      	sxth	r3, r3
 8003c88:	b2d9      	uxtb	r1, r3
 8003c8a:	88bb      	ldrh	r3, [r7, #4]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003c92:	121b      	asrs	r3, r3, #8
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	b2dc      	uxtb	r4, r3
 8003c98:	883b      	ldrh	r3, [r7, #0]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	f7fd fe28 	bl	80018f4 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8003ca4:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <setAddrWindow+0x234>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d07b      	beq.n	8003da4 <setAddrWindow+0x218>
 8003cac:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <setAddrWindow+0x220>)
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	2b65      	cmp	r3, #101	; 0x65
 8003cb2:	d177      	bne.n	8003da4 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8003cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cb8:	121b      	asrs	r3, r3, #8
 8003cba:	b21b      	sxth	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	723b      	strb	r3, [r7, #8]
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	; (8003dc4 <setAddrWindow+0x238>)
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	f107 0208 	add.w	r2, r7, #8
 8003cce:	2102      	movs	r1, #2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fd fc41 	bl	8001558 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8003cd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cda:	121b      	asrs	r3, r3, #8
 8003cdc:	b21b      	sxth	r3, r3
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	723b      	strb	r3, [r7, #8]
 8003ce2:	88bb      	ldrh	r3, [r7, #4]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8003ce8:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <setAddrWindow+0x23c>)
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	f107 0208 	add.w	r2, r7, #8
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd fc30 	bl	8001558 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8003cf8:	e054      	b.n	8003da4 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8003cfa:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <setAddrWindow+0x238>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd f951 	bl	8000faa <WriteCmdData>
       WriteCmdData(_MP, y);
 8003d08:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <setAddrWindow+0x23c>)
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	88ba      	ldrh	r2, [r7, #4]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd f94a 	bl	8000faa <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8003d16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d105      	bne.n	8003d2e <setAddrWindow+0x1a2>
 8003d22:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003d26:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d03a      	beq.n	8003da4 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8003d2e:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <setAddrWindow+0x228>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d018      	beq.n	8003d6c <setAddrWindow+0x1e0>
               if (rotation & 1)
 8003d3a:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <setAddrWindow+0x224>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8003d46:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	b21a      	sxth	r2, r3
 8003d4e:	88bb      	ldrh	r3, [r7, #4]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	80bb      	strh	r3, [r7, #4]
 8003d54:	88bb      	ldrh	r3, [r7, #4]
 8003d56:	803b      	strh	r3, [r7, #0]
 8003d58:	e008      	b.n	8003d6c <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8003d5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	b21a      	sxth	r2, r3
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	80fb      	strh	r3, [r7, #6]
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <setAddrWindow+0x22c>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	88fa      	ldrh	r2, [r7, #6]
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fd f918 	bl	8000faa <WriteCmdData>
           WriteCmdData(_SP, y);
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <setAddrWindow+0x230>)
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	88ba      	ldrh	r2, [r7, #4]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd f911 	bl	8000faa <WriteCmdData>
           WriteCmdData(_EC, x1);
 8003d88:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <setAddrWindow+0x240>)
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	887a      	ldrh	r2, [r7, #2]
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fd f90a 	bl	8000faa <WriteCmdData>
           WriteCmdData(_EP, y1);
 8003d96:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <setAddrWindow+0x244>)
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	883a      	ldrh	r2, [r7, #0]
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd f903 	bl	8000faa <WriteCmdData>
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd90      	pop	{r4, r7, pc}
 8003dac:	200001a4 	.word	0x200001a4
 8003db0:	200000a6 	.word	0x200000a6
 8003db4:	20000196 	.word	0x20000196
 8003db8:	200001a0 	.word	0x200001a0
 8003dbc:	20000198 	.word	0x20000198
 8003dc0:	200000a1 	.word	0x200000a1
 8003dc4:	2000019e 	.word	0x2000019e
 8003dc8:	2000019c 	.word	0x2000019c
 8003dcc:	200001a8 	.word	0x200001a8
 8003dd0:	200001a2 	.word	0x200001a2

08003dd4 <vertScroll>:


void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	80fb      	strh	r3, [r7, #6]
 8003dde:	460b      	mov	r3, r1
 8003de0:	80bb      	strh	r3, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8003de6:	4b89      	ldr	r3, [pc, #548]	; (800400c <vertScroll+0x238>)
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	f249 3227 	movw	r2, #37671	; 0x9327
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d10b      	bne.n	8003e0a <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8003df2:	4b87      	ldr	r3, [pc, #540]	; (8004010 <vertScroll+0x23c>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d003      	beq.n	8003e02 <vertScroll+0x2e>
 8003dfa:	4b85      	ldr	r3, [pc, #532]	; (8004010 <vertScroll+0x23c>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d103      	bne.n	8003e0a <vertScroll+0x36>
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	3320      	adds	r3, #32
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	88bb      	ldrh	r3, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8003e1e:	4b7b      	ldr	r3, [pc, #492]	; (800400c <vertScroll+0x238>)
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	f249 3227 	movw	r2, #37671	; 0x9327
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d103      	bne.n	8003e32 <vertScroll+0x5e>
 8003e2a:	8afb      	ldrh	r3, [r7, #22]
 8003e2c:	3320      	adds	r3, #32
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8003e32:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003e36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e3a:	425b      	negs	r3, r3
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	dd05      	ble.n	8003e4c <vertScroll+0x78>
 8003e40:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003e44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	db01      	blt.n	8003e50 <vertScroll+0x7c>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8003e50:	88fa      	ldrh	r2, [r7, #6]
 8003e52:	887b      	ldrh	r3, [r7, #2]
 8003e54:	4413      	add	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8003e5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	da04      	bge.n	8003e6c <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 8003e62:	8aba      	ldrh	r2, [r7, #20]
 8003e64:	88bb      	ldrh	r3, [r7, #4]
 8003e66:	4413      	add	r3, r2
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8003e6c:	88fa      	ldrh	r2, [r7, #6]
 8003e6e:	88bb      	ldrh	r3, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8003e7a:	4b66      	ldr	r3, [pc, #408]	; (8004014 <vertScroll+0x240>)
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d071      	beq.n	8003f6a <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8003e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e8a:	121b      	asrs	r3, r3, #8
 8003e8c:	b21b      	sxth	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8003e98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e9c:	121b      	asrs	r3, r3, #8
 8003e9e:	b21b      	sxth	r3, r3
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8003ea4:	88bb      	ldrh	r3, [r7, #4]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8003eaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003eae:	121b      	asrs	r3, r3, #8
 8003eb0:	b21b      	sxth	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8003eb6:	8afb      	ldrh	r3, [r7, #22]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8003ebc:	4b56      	ldr	r3, [pc, #344]	; (8004018 <vertScroll+0x244>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <vertScroll+0xf4>
 8003ec4:	230e      	movs	r3, #14
 8003ec6:	e000      	b.n	8003eca <vertScroll+0xf6>
 8003ec8:	2333      	movs	r3, #51	; 0x33
 8003eca:	f107 020c 	add.w	r2, r7, #12
 8003ece:	2106      	movs	r1, #6
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fd fb41 	bl	8001558 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8003ed6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003eda:	121b      	asrs	r3, r3, #8
 8003edc:	b21b      	sxth	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8003ee2:	8abb      	ldrh	r3, [r7, #20]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8003ee8:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <vertScroll+0x244>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <vertScroll+0x120>
 8003ef0:	2314      	movs	r3, #20
 8003ef2:	e000      	b.n	8003ef6 <vertScroll+0x122>
 8003ef4:	2337      	movs	r3, #55	; 0x37
 8003ef6:	f107 020c 	add.w	r2, r7, #12
 8003efa:	2102      	movs	r1, #2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fd fb2b 	bl	8001558 <WriteCmdParamN>
		if (is8347) {
 8003f02:	4b45      	ldr	r3, [pc, #276]	; (8004018 <vertScroll+0x244>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01f      	beq.n	8003f4a <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8003f0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <vertScroll+0x152>
 8003f12:	4b3e      	ldr	r3, [pc, #248]	; (800400c <vertScroll+0x238>)
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	f248 3247 	movw	r2, #33607	; 0x8347
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <vertScroll+0x14e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e002      	b.n	8003f28 <vertScroll+0x154>
 8003f22:	2308      	movs	r3, #8
 8003f24:	e000      	b.n	8003f28 <vertScroll+0x154>
 8003f26:	2300      	movs	r3, #0
 8003f28:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8003f2a:	4b38      	ldr	r3, [pc, #224]	; (800400c <vertScroll+0x238>)
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	f248 3247 	movw	r2, #33607	; 0x8347
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <vertScroll+0x166>
 8003f36:	2318      	movs	r3, #24
 8003f38:	e000      	b.n	8003f3c <vertScroll+0x168>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f107 020c 	add.w	r2, r7, #12
 8003f40:	2101      	movs	r1, #1
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd fb08 	bl	8001558 <WriteCmdParamN>
 8003f48:	e05d      	b.n	8004006 <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8003f4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d159      	bne.n	8004006 <vertScroll+0x232>
 8003f52:	4b30      	ldr	r3, [pc, #192]	; (8004014 <vertScroll+0x240>)
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d053      	beq.n	8004006 <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2100      	movs	r1, #0
 8003f62:	2013      	movs	r0, #19
 8003f64:	f7fd faf8 	bl	8001558 <WriteCmdParamN>
 8003f68:	e04d      	b.n	8004006 <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003f6a:	4b28      	ldr	r3, [pc, #160]	; (800400c <vertScroll+0x238>)
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d027      	beq.n	8003fc6 <vertScroll+0x1f2>
 8003f76:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	dc34      	bgt.n	8003fe8 <vertScroll+0x214>
 8003f7e:	f249 3226 	movw	r2, #37670	; 0x9326
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01f      	beq.n	8003fc6 <vertScroll+0x1f2>
 8003f86:	f249 3226 	movw	r2, #37670	; 0x9326
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	dc2c      	bgt.n	8003fe8 <vertScroll+0x214>
 8003f8e:	f247 7293 	movw	r2, #30611	; 0x7793
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d017      	beq.n	8003fc6 <vertScroll+0x1f2>
 8003f96:	f247 7293 	movw	r2, #30611	; 0x7793
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	dc24      	bgt.n	8003fe8 <vertScroll+0x214>
 8003f9e:	f245 4220 	movw	r2, #21536	; 0x5420
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00f      	beq.n	8003fc6 <vertScroll+0x1f2>
 8003fa6:	f247 7283 	movw	r2, #30595	; 0x7783
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d11c      	bne.n	8003fe8 <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <vertScroll+0x248>)
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	2061      	movs	r0, #97	; 0x61
 8003fb6:	f7fc fff8 	bl	8000faa <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003fba:	8abb      	ldrh	r3, [r7, #20]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	206a      	movs	r0, #106	; 0x6a
 8003fc0:	f7fc fff3 	bl	8000faa <WriteCmdData>
        break;
 8003fc4:	e01f      	b.n	8004006 <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <vertScroll+0x248>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	f043 0302 	orr.w	r3, r3, #2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f240 4001 	movw	r0, #1025	; 0x401
 8003fd6:	f7fc ffe8 	bl	8000faa <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8003fda:	8abb      	ldrh	r3, [r7, #20]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f240 4004 	movw	r0, #1028	; 0x404
 8003fe2:	f7fc ffe2 	bl	8000faa <WriteCmdData>
        break;
 8003fe6:	e00e      	b.n	8004006 <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <vertScroll+0x248>)
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	2061      	movs	r0, #97	; 0x61
 8003ff6:	f7fc ffd8 	bl	8000faa <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003ffa:	8abb      	ldrh	r3, [r7, #20]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	206a      	movs	r0, #106	; 0x6a
 8004000:	f7fc ffd3 	bl	8000faa <WriteCmdData>
        break;
 8004004:	bf00      	nop
    }
}
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	200001a4 	.word	0x200001a4
 8004010:	200000a6 	.word	0x200000a6
 8004014:	20000196 	.word	0x20000196
 8004018:	200000a1 	.word	0x200000a1
 800401c:	2000019a 	.word	0x2000019a

08004020 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af02      	add	r7, sp, #8
 8004026:	4603      	mov	r3, r0
 8004028:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <fillScreen+0x2c>)
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b21a      	sxth	r2, r3
 8004030:	4b07      	ldr	r3, [pc, #28]	; (8004050 <fillScreen+0x30>)
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	b219      	sxth	r1, r3
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	460b      	mov	r3, r1
 800403c:	2100      	movs	r1, #0
 800403e:	2000      	movs	r0, #0
 8004040:	f000 f8c4 	bl	80041cc <fillRect>
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000008 	.word	0x20000008
 8004050:	2000000a 	.word	0x2000000a

08004054 <invertDisplay>:


void invertDisplay(uint8_t i)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 800405e:	4b4c      	ldr	r3, [pc, #304]	; (8004190 <invertDisplay+0x13c>)
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	b21a      	sxth	r2, r3
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	b21b      	sxth	r3, r3
 8004076:	4053      	eors	r3, r2
 8004078:	b21b      	sxth	r3, r3
 800407a:	b29a      	uxth	r2, r3
 800407c:	4b45      	ldr	r3, [pc, #276]	; (8004194 <invertDisplay+0x140>)
 800407e:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004080:	4b43      	ldr	r3, [pc, #268]	; (8004190 <invertDisplay+0x13c>)
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d035      	beq.n	80040f8 <invertDisplay+0xa4>
        if (is8347) {
 800408c:	4b42      	ldr	r3, [pc, #264]	; (8004198 <invertDisplay+0x144>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d024      	beq.n	80040de <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8004094:	4b41      	ldr	r3, [pc, #260]	; (800419c <invertDisplay+0x148>)
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	f248 3247 	movw	r2, #33607	; 0x8347
 800409c:	4293      	cmp	r3, r2
 800409e:	d005      	beq.n	80040ac <invertDisplay+0x58>
 80040a0:	4b3e      	ldr	r3, [pc, #248]	; (800419c <invertDisplay+0x148>)
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	f245 2252 	movw	r2, #21074	; 0x5252
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d108      	bne.n	80040be <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 80040ac:	4b39      	ldr	r3, [pc, #228]	; (8004194 <invertDisplay+0x140>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <invertDisplay+0x64>
 80040b4:	2306      	movs	r3, #6
 80040b6:	e000      	b.n	80040ba <invertDisplay+0x66>
 80040b8:	2302      	movs	r3, #2
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	e007      	b.n	80040ce <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 80040be:	4b35      	ldr	r3, [pc, #212]	; (8004194 <invertDisplay+0x140>)
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <invertDisplay+0x76>
 80040c6:	2308      	movs	r3, #8
 80040c8:	e000      	b.n	80040cc <invertDisplay+0x78>
 80040ca:	230a      	movs	r3, #10
 80040cc:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 80040ce:	f107 030f 	add.w	r3, r7, #15
 80040d2:	461a      	mov	r2, r3
 80040d4:	2101      	movs	r1, #1
 80040d6:	2001      	movs	r0, #1
 80040d8:	f7fd fa3e 	bl	8001558 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 80040dc:	e055      	b.n	800418a <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 80040de:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <invertDisplay+0x140>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <invertDisplay+0x96>
 80040e6:	2321      	movs	r3, #33	; 0x21
 80040e8:	e000      	b.n	80040ec <invertDisplay+0x98>
 80040ea:	2320      	movs	r3, #32
 80040ec:	2200      	movs	r2, #0
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fd fa31 	bl	8001558 <WriteCmdParamN>
 80040f6:	e048      	b.n	800418a <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 80040f8:	4b28      	ldr	r3, [pc, #160]	; (800419c <invertDisplay+0x148>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004100:	4293      	cmp	r3, r2
 8004102:	d030      	beq.n	8004166 <invertDisplay+0x112>
 8004104:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004108:	4293      	cmp	r3, r2
 800410a:	dc37      	bgt.n	800417c <invertDisplay+0x128>
 800410c:	f249 3226 	movw	r2, #37670	; 0x9326
 8004110:	4293      	cmp	r3, r2
 8004112:	d028      	beq.n	8004166 <invertDisplay+0x112>
 8004114:	f249 3226 	movw	r2, #37670	; 0x9326
 8004118:	4293      	cmp	r3, r2
 800411a:	dc2f      	bgt.n	800417c <invertDisplay+0x128>
 800411c:	f249 2225 	movw	r2, #37413	; 0x9225
 8004120:	4293      	cmp	r3, r2
 8004122:	d013      	beq.n	800414c <invertDisplay+0xf8>
 8004124:	f249 2225 	movw	r2, #37413	; 0x9225
 8004128:	4293      	cmp	r3, r2
 800412a:	dc27      	bgt.n	800417c <invertDisplay+0x128>
 800412c:	f247 7293 	movw	r2, #30611	; 0x7793
 8004130:	4293      	cmp	r3, r2
 8004132:	d018      	beq.n	8004166 <invertDisplay+0x112>
 8004134:	f247 7293 	movw	r2, #30611	; 0x7793
 8004138:	4293      	cmp	r3, r2
 800413a:	dc1f      	bgt.n	800417c <invertDisplay+0x128>
 800413c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004140:	d004      	beq.n	800414c <invertDisplay+0xf8>
 8004142:	f245 4220 	movw	r2, #21536	; 0x5420
 8004146:	4293      	cmp	r3, r2
 8004148:	d00d      	beq.n	8004166 <invertDisplay+0x112>
 800414a:	e017      	b.n	800417c <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 800414c:	4b11      	ldr	r3, [pc, #68]	; (8004194 <invertDisplay+0x140>)
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	b21b      	sxth	r3, r3
 8004154:	f043 0313 	orr.w	r3, r3, #19
 8004158:	b21b      	sxth	r3, r3
 800415a:	b29b      	uxth	r3, r3
 800415c:	4619      	mov	r1, r3
 800415e:	2007      	movs	r0, #7
 8004160:	f7fc ff23 	bl	8000faa <WriteCmdData>
        break;
 8004164:	e011      	b.n	800418a <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <invertDisplay+0x140>)
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	f043 0302 	orr.w	r3, r3, #2
 800416e:	b29b      	uxth	r3, r3
 8004170:	4619      	mov	r1, r3
 8004172:	f240 4001 	movw	r0, #1025	; 0x401
 8004176:	f7fc ff18 	bl	8000faa <WriteCmdData>
        break;
 800417a:	e006      	b.n	800418a <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <invertDisplay+0x140>)
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	4619      	mov	r1, r3
 8004182:	2061      	movs	r0, #97	; 0x61
 8004184:	f7fc ff11 	bl	8000faa <WriteCmdData>
        break;
 8004188:	bf00      	nop
    }
}
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000196 	.word	0x20000196
 8004194:	2000019a 	.word	0x2000019a
 8004198:	200000a1 	.word	0x200000a1
 800419c:	200001a4 	.word	0x200001a4

080041a0 <writePixel>:
	fillRect(x, y, w, 1, color);
}


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
 80041aa:	460b      	mov	r3, r1
 80041ac:	80bb      	strh	r3, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 80041b2:	887a      	ldrh	r2, [r7, #2]
 80041b4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80041b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fbdf 	bl	8003980 <drawPixel>
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <fillRect>:
    drawFastVLine(x+w-1, y, h, color);
}


void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80041cc:	b590      	push	{r4, r7, lr}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	4623      	mov	r3, r4
 80041dc:	80fb      	strh	r3, [r7, #6]
 80041de:	4603      	mov	r3, r0
 80041e0:	80bb      	strh	r3, [r7, #4]
 80041e2:	460b      	mov	r3, r1
 80041e4:	807b      	strh	r3, [r7, #2]
 80041e6:	4613      	mov	r3, r2
 80041e8:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 80041ea:	4b95      	ldr	r3, [pc, #596]	; (8004440 <fillRect+0x274>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <fillRect+0x32>
 80041f2:	8c3b      	ldrh	r3, [r7, #32]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fc fe29 	bl	8000e4c <color565_to_555>
 80041fa:	4603      	mov	r3, r0
 80041fc:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 80041fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004202:	2b00      	cmp	r3, #0
 8004204:	da08      	bge.n	8004218 <fillRect+0x4c>
        w = -w;
 8004206:	887b      	ldrh	r3, [r7, #2]
 8004208:	425b      	negs	r3, r3
 800420a:	b29b      	uxth	r3, r3
 800420c:	807b      	strh	r3, [r7, #2]
        x -= w;
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	887b      	ldrh	r3, [r7, #2]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	b29b      	uxth	r3, r3
 8004216:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8004218:	88fa      	ldrh	r2, [r7, #6]
 800421a:	887b      	ldrh	r3, [r7, #2]
 800421c:	4413      	add	r3, r2
 800421e:	b29b      	uxth	r3, r3
 8004220:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8004222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004226:	2b00      	cmp	r3, #0
 8004228:	da01      	bge.n	800422e <fillRect+0x62>
        x = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 800422e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004232:	f7fc fdf3 	bl	8000e1c <width>
 8004236:	4603      	mov	r3, r0
 8004238:	429c      	cmp	r4, r3
 800423a:	dd03      	ble.n	8004244 <fillRect+0x78>
        end = width();
 800423c:	f7fc fdee 	bl	8000e1c <width>
 8004240:	4603      	mov	r3, r0
 8004242:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8004244:	89fa      	ldrh	r2, [r7, #14]
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	b29b      	uxth	r3, r3
 800424c:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 800424e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004252:	2b00      	cmp	r3, #0
 8004254:	da08      	bge.n	8004268 <fillRect+0x9c>
        h = -h;
 8004256:	883b      	ldrh	r3, [r7, #0]
 8004258:	425b      	negs	r3, r3
 800425a:	b29b      	uxth	r3, r3
 800425c:	803b      	strh	r3, [r7, #0]
        y -= h;
 800425e:	88ba      	ldrh	r2, [r7, #4]
 8004260:	883b      	ldrh	r3, [r7, #0]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	b29b      	uxth	r3, r3
 8004266:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8004268:	88ba      	ldrh	r2, [r7, #4]
 800426a:	883b      	ldrh	r3, [r7, #0]
 800426c:	4413      	add	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 8004272:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	da01      	bge.n	800427e <fillRect+0xb2>
        y = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 800427e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8004282:	f7fc fdd7 	bl	8000e34 <height>
 8004286:	4603      	mov	r3, r0
 8004288:	429c      	cmp	r4, r3
 800428a:	dd03      	ble.n	8004294 <fillRect+0xc8>
        end = height();
 800428c:	f7fc fdd2 	bl	8000e34 <height>
 8004290:	4603      	mov	r3, r0
 8004292:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8004294:	89fa      	ldrh	r2, [r7, #14]
 8004296:	88bb      	ldrh	r3, [r7, #4]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	b29b      	uxth	r3, r3
 800429c:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	887b      	ldrh	r3, [r7, #2]
 80042a2:	4413      	add	r3, r2
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	b21c      	sxth	r4, r3
 80042ac:	88ba      	ldrh	r2, [r7, #4]
 80042ae:	883b      	ldrh	r3, [r7, #0]
 80042b0:	4413      	add	r3, r2
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	b21b      	sxth	r3, r3
 80042ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80042be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80042c2:	4622      	mov	r2, r4
 80042c4:	f7ff fc62 	bl	8003b8c <setAddrWindow>
    CS_ACTIVE;
 80042c8:	2101      	movs	r1, #1
 80042ca:	485e      	ldr	r0, [pc, #376]	; (8004444 <fillRect+0x278>)
 80042cc:	f7fc fd58 	bl	8000d80 <PIN_LOW>
    WriteCmd(_MW);
 80042d0:	2110      	movs	r1, #16
 80042d2:	485d      	ldr	r0, [pc, #372]	; (8004448 <fillRect+0x27c>)
 80042d4:	f7fc fd54 	bl	8000d80 <PIN_LOW>
 80042d8:	4b5c      	ldr	r3, [pc, #368]	; (800444c <fillRect+0x280>)
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	b29b      	uxth	r3, r3
 80042e0:	737b      	strb	r3, [r7, #13]
 80042e2:	4b5a      	ldr	r3, [pc, #360]	; (800444c <fillRect+0x280>)
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	733b      	strb	r3, [r7, #12]
 80042e8:	4b57      	ldr	r3, [pc, #348]	; (8004448 <fillRect+0x27c>)
 80042ea:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80042ee:	619a      	str	r2, [r3, #24]
 80042f0:	4b54      	ldr	r3, [pc, #336]	; (8004444 <fillRect+0x278>)
 80042f2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80042f6:	619a      	str	r2, [r3, #24]
 80042f8:	4b55      	ldr	r3, [pc, #340]	; (8004450 <fillRect+0x284>)
 80042fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80042fe:	619a      	str	r2, [r3, #24]
 8004300:	7b7b      	ldrb	r3, [r7, #13]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004308:	7b7b      	ldrb	r3, [r7, #13]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004310:	431a      	orrs	r2, r3
 8004312:	7b7b      	ldrb	r3, [r7, #13]
 8004314:	025b      	lsls	r3, r3, #9
 8004316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800431a:	431a      	orrs	r2, r3
 800431c:	4b4a      	ldr	r3, [pc, #296]	; (8004448 <fillRect+0x27c>)
 800431e:	619a      	str	r2, [r3, #24]
 8004320:	7b7b      	ldrb	r3, [r7, #13]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004328:	7b7b      	ldrb	r3, [r7, #13]
 800432a:	105b      	asrs	r3, r3, #1
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	431a      	orrs	r2, r3
 8004332:	7b7b      	ldrb	r3, [r7, #13]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	431a      	orrs	r2, r3
 800433c:	7b7b      	ldrb	r3, [r7, #13]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	431a      	orrs	r2, r3
 8004344:	4b3f      	ldr	r3, [pc, #252]	; (8004444 <fillRect+0x278>)
 8004346:	619a      	str	r2, [r3, #24]
 8004348:	7b7b      	ldrb	r3, [r7, #13]
 800434a:	019b      	lsls	r3, r3, #6
 800434c:	4a40      	ldr	r2, [pc, #256]	; (8004450 <fillRect+0x284>)
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	6193      	str	r3, [r2, #24]
 8004354:	2102      	movs	r1, #2
 8004356:	483c      	ldr	r0, [pc, #240]	; (8004448 <fillRect+0x27c>)
 8004358:	f7fc fd12 	bl	8000d80 <PIN_LOW>
 800435c:	2102      	movs	r1, #2
 800435e:	483a      	ldr	r0, [pc, #232]	; (8004448 <fillRect+0x27c>)
 8004360:	f7fc fd0e 	bl	8000d80 <PIN_LOW>
 8004364:	2102      	movs	r1, #2
 8004366:	4838      	ldr	r0, [pc, #224]	; (8004448 <fillRect+0x27c>)
 8004368:	f7fc fd0a 	bl	8000d80 <PIN_LOW>
 800436c:	2102      	movs	r1, #2
 800436e:	4836      	ldr	r0, [pc, #216]	; (8004448 <fillRect+0x27c>)
 8004370:	f7fc fd16 	bl	8000da0 <PIN_HIGH>
 8004374:	2102      	movs	r1, #2
 8004376:	4834      	ldr	r0, [pc, #208]	; (8004448 <fillRect+0x27c>)
 8004378:	f7fc fd12 	bl	8000da0 <PIN_HIGH>
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <fillRect+0x27c>)
 800437e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004382:	619a      	str	r2, [r3, #24]
 8004384:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <fillRect+0x278>)
 8004386:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800438a:	619a      	str	r2, [r3, #24]
 800438c:	4b30      	ldr	r3, [pc, #192]	; (8004450 <fillRect+0x284>)
 800438e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004392:	619a      	str	r2, [r3, #24]
 8004394:	7b3b      	ldrb	r3, [r7, #12]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800439c:	7b3b      	ldrb	r3, [r7, #12]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a4:	431a      	orrs	r2, r3
 80043a6:	7b3b      	ldrb	r3, [r7, #12]
 80043a8:	025b      	lsls	r3, r3, #9
 80043aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ae:	431a      	orrs	r2, r3
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <fillRect+0x27c>)
 80043b2:	619a      	str	r2, [r3, #24]
 80043b4:	7b3b      	ldrb	r3, [r7, #12]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80043bc:	7b3b      	ldrb	r3, [r7, #12]
 80043be:	105b      	asrs	r3, r3, #1
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	431a      	orrs	r2, r3
 80043c6:	7b3b      	ldrb	r3, [r7, #12]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	431a      	orrs	r2, r3
 80043d0:	7b3b      	ldrb	r3, [r7, #12]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	431a      	orrs	r2, r3
 80043d8:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <fillRect+0x278>)
 80043da:	619a      	str	r2, [r3, #24]
 80043dc:	7b3b      	ldrb	r3, [r7, #12]
 80043de:	019b      	lsls	r3, r3, #6
 80043e0:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <fillRect+0x284>)
 80043e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e6:	6193      	str	r3, [r2, #24]
 80043e8:	2102      	movs	r1, #2
 80043ea:	4817      	ldr	r0, [pc, #92]	; (8004448 <fillRect+0x27c>)
 80043ec:	f7fc fcc8 	bl	8000d80 <PIN_LOW>
 80043f0:	2102      	movs	r1, #2
 80043f2:	4815      	ldr	r0, [pc, #84]	; (8004448 <fillRect+0x27c>)
 80043f4:	f7fc fcc4 	bl	8000d80 <PIN_LOW>
 80043f8:	2102      	movs	r1, #2
 80043fa:	4813      	ldr	r0, [pc, #76]	; (8004448 <fillRect+0x27c>)
 80043fc:	f7fc fcc0 	bl	8000d80 <PIN_LOW>
 8004400:	2102      	movs	r1, #2
 8004402:	4811      	ldr	r0, [pc, #68]	; (8004448 <fillRect+0x27c>)
 8004404:	f7fc fccc 	bl	8000da0 <PIN_HIGH>
 8004408:	2102      	movs	r1, #2
 800440a:	480f      	ldr	r0, [pc, #60]	; (8004448 <fillRect+0x27c>)
 800440c:	f7fc fcc8 	bl	8000da0 <PIN_HIGH>
 8004410:	2110      	movs	r1, #16
 8004412:	480d      	ldr	r0, [pc, #52]	; (8004448 <fillRect+0x27c>)
 8004414:	f7fc fcc4 	bl	8000da0 <PIN_HIGH>
    if (h > w) {
 8004418:	f9b7 2000 	ldrsh.w	r2, [r7]
 800441c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004420:	429a      	cmp	r2, r3
 8004422:	dd05      	ble.n	8004430 <fillRect+0x264>
        end = h;
 8004424:	883b      	ldrh	r3, [r7, #0]
 8004426:	81fb      	strh	r3, [r7, #14]
        h = w;
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	803b      	strh	r3, [r7, #0]
        w = end;
 800442c:	89fb      	ldrh	r3, [r7, #14]
 800442e:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8004430:	8c3b      	ldrh	r3, [r7, #32]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	b29b      	uxth	r3, r3
 8004436:	72fb      	strb	r3, [r7, #11]
 8004438:	8c3b      	ldrh	r3, [r7, #32]
 800443a:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 800443c:	e0a9      	b.n	8004592 <fillRect+0x3c6>
 800443e:	bf00      	nop
 8004440:	200000a2 	.word	0x200000a2
 8004444:	40020400 	.word	0x40020400
 8004448:	40020000 	.word	0x40020000
 800444c:	20000194 	.word	0x20000194
 8004450:	40020800 	.word	0x40020800
        end = w;
 8004454:	887b      	ldrh	r3, [r7, #2]
 8004456:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8004458:	4b68      	ldr	r3, [pc, #416]	; (80045fc <fillRect+0x430>)
 800445a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800445e:	619a      	str	r2, [r3, #24]
 8004460:	4b67      	ldr	r3, [pc, #412]	; (8004600 <fillRect+0x434>)
 8004462:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004466:	619a      	str	r2, [r3, #24]
 8004468:	4b66      	ldr	r3, [pc, #408]	; (8004604 <fillRect+0x438>)
 800446a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800446e:	619a      	str	r2, [r3, #24]
 8004470:	7afb      	ldrb	r3, [r7, #11]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004478:	7afb      	ldrb	r3, [r7, #11]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	431a      	orrs	r2, r3
 8004482:	7afb      	ldrb	r3, [r7, #11]
 8004484:	025b      	lsls	r3, r3, #9
 8004486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800448a:	431a      	orrs	r2, r3
 800448c:	4b5b      	ldr	r3, [pc, #364]	; (80045fc <fillRect+0x430>)
 800448e:	619a      	str	r2, [r3, #24]
 8004490:	7afb      	ldrb	r3, [r7, #11]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004498:	7afb      	ldrb	r3, [r7, #11]
 800449a:	105b      	asrs	r3, r3, #1
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	431a      	orrs	r2, r3
 80044a2:	7afb      	ldrb	r3, [r7, #11]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	431a      	orrs	r2, r3
 80044ac:	7afb      	ldrb	r3, [r7, #11]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	431a      	orrs	r2, r3
 80044b4:	4b52      	ldr	r3, [pc, #328]	; (8004600 <fillRect+0x434>)
 80044b6:	619a      	str	r2, [r3, #24]
 80044b8:	7afb      	ldrb	r3, [r7, #11]
 80044ba:	019b      	lsls	r3, r3, #6
 80044bc:	4a51      	ldr	r2, [pc, #324]	; (8004604 <fillRect+0x438>)
 80044be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c2:	6193      	str	r3, [r2, #24]
 80044c4:	2102      	movs	r1, #2
 80044c6:	484d      	ldr	r0, [pc, #308]	; (80045fc <fillRect+0x430>)
 80044c8:	f7fc fc5a 	bl	8000d80 <PIN_LOW>
 80044cc:	2102      	movs	r1, #2
 80044ce:	484b      	ldr	r0, [pc, #300]	; (80045fc <fillRect+0x430>)
 80044d0:	f7fc fc56 	bl	8000d80 <PIN_LOW>
 80044d4:	2102      	movs	r1, #2
 80044d6:	4849      	ldr	r0, [pc, #292]	; (80045fc <fillRect+0x430>)
 80044d8:	f7fc fc52 	bl	8000d80 <PIN_LOW>
 80044dc:	2102      	movs	r1, #2
 80044de:	4847      	ldr	r0, [pc, #284]	; (80045fc <fillRect+0x430>)
 80044e0:	f7fc fc5e 	bl	8000da0 <PIN_HIGH>
 80044e4:	2102      	movs	r1, #2
 80044e6:	4845      	ldr	r0, [pc, #276]	; (80045fc <fillRect+0x430>)
 80044e8:	f7fc fc5a 	bl	8000da0 <PIN_HIGH>
            write8(lo);
 80044ec:	4b43      	ldr	r3, [pc, #268]	; (80045fc <fillRect+0x430>)
 80044ee:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80044f2:	619a      	str	r2, [r3, #24]
 80044f4:	4b42      	ldr	r3, [pc, #264]	; (8004600 <fillRect+0x434>)
 80044f6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80044fa:	619a      	str	r2, [r3, #24]
 80044fc:	4b41      	ldr	r3, [pc, #260]	; (8004604 <fillRect+0x438>)
 80044fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004502:	619a      	str	r2, [r3, #24]
 8004504:	7abb      	ldrb	r3, [r7, #10]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800450c:	7abb      	ldrb	r3, [r7, #10]
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004514:	431a      	orrs	r2, r3
 8004516:	7abb      	ldrb	r3, [r7, #10]
 8004518:	025b      	lsls	r3, r3, #9
 800451a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800451e:	431a      	orrs	r2, r3
 8004520:	4b36      	ldr	r3, [pc, #216]	; (80045fc <fillRect+0x430>)
 8004522:	619a      	str	r2, [r3, #24]
 8004524:	7abb      	ldrb	r3, [r7, #10]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800452c:	7abb      	ldrb	r3, [r7, #10]
 800452e:	105b      	asrs	r3, r3, #1
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	431a      	orrs	r2, r3
 8004536:	7abb      	ldrb	r3, [r7, #10]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	431a      	orrs	r2, r3
 8004540:	7abb      	ldrb	r3, [r7, #10]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	431a      	orrs	r2, r3
 8004548:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <fillRect+0x434>)
 800454a:	619a      	str	r2, [r3, #24]
 800454c:	7abb      	ldrb	r3, [r7, #10]
 800454e:	019b      	lsls	r3, r3, #6
 8004550:	4a2c      	ldr	r2, [pc, #176]	; (8004604 <fillRect+0x438>)
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	6193      	str	r3, [r2, #24]
 8004558:	2102      	movs	r1, #2
 800455a:	4828      	ldr	r0, [pc, #160]	; (80045fc <fillRect+0x430>)
 800455c:	f7fc fc10 	bl	8000d80 <PIN_LOW>
 8004560:	2102      	movs	r1, #2
 8004562:	4826      	ldr	r0, [pc, #152]	; (80045fc <fillRect+0x430>)
 8004564:	f7fc fc0c 	bl	8000d80 <PIN_LOW>
 8004568:	2102      	movs	r1, #2
 800456a:	4824      	ldr	r0, [pc, #144]	; (80045fc <fillRect+0x430>)
 800456c:	f7fc fc08 	bl	8000d80 <PIN_LOW>
 8004570:	2102      	movs	r1, #2
 8004572:	4822      	ldr	r0, [pc, #136]	; (80045fc <fillRect+0x430>)
 8004574:	f7fc fc14 	bl	8000da0 <PIN_HIGH>
 8004578:	2102      	movs	r1, #2
 800457a:	4820      	ldr	r0, [pc, #128]	; (80045fc <fillRect+0x430>)
 800457c:	f7fc fc10 	bl	8000da0 <PIN_HIGH>
        } while (--end != 0);
 8004580:	89fb      	ldrh	r3, [r7, #14]
 8004582:	3b01      	subs	r3, #1
 8004584:	b29b      	uxth	r3, r3
 8004586:	81fb      	strh	r3, [r7, #14]
 8004588:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f47f af63 	bne.w	8004458 <fillRect+0x28c>
    while (h-- > 0) {
 8004592:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004596:	b29a      	uxth	r2, r3
 8004598:	3a01      	subs	r2, #1
 800459a:	b292      	uxth	r2, r2
 800459c:	803a      	strh	r2, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f73f af58 	bgt.w	8004454 <fillRect+0x288>
#endif
    }
    CS_IDLE;
 80045a4:	2101      	movs	r1, #1
 80045a6:	4816      	ldr	r0, [pc, #88]	; (8004600 <fillRect+0x434>)
 80045a8:	f7fc fbfa 	bl	8000da0 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80045ac:	4b16      	ldr	r3, [pc, #88]	; (8004608 <fillRect+0x43c>)
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00b      	beq.n	80045d0 <fillRect+0x404>
 80045b8:	4b14      	ldr	r3, [pc, #80]	; (800460c <fillRect+0x440>)
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	f241 5226 	movw	r2, #5414	; 0x1526
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d116      	bne.n	80045f2 <fillRect+0x426>
 80045c4:	4b12      	ldr	r3, [pc, #72]	; (8004610 <fillRect+0x444>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d010      	beq.n	80045f2 <fillRect+0x426>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80045d0:	f7fc fc24 	bl	8000e1c <width>
 80045d4:	4603      	mov	r3, r0
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29b      	uxth	r3, r3
 80045da:	b21c      	sxth	r4, r3
 80045dc:	f7fc fc2a 	bl	8000e34 <height>
 80045e0:	4603      	mov	r3, r0
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	b21b      	sxth	r3, r3
 80045e8:	4622      	mov	r2, r4
 80045ea:	2100      	movs	r1, #0
 80045ec:	2000      	movs	r0, #0
 80045ee:	f7ff facd 	bl	8003b8c <setAddrWindow>
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd90      	pop	{r4, r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40020000 	.word	0x40020000
 8004600:	40020400 	.word	0x40020400
 8004604:	40020800 	.word	0x40020800
 8004608:	20000196 	.word	0x20000196
 800460c:	200001a4 	.word	0x200001a4
 8004610:	200000a6 	.word	0x200000a6

08004614 <drawChar>:


/********************************* END TESTS  *********************************************/

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b08b      	sub	sp, #44	; 0x2c
 8004618:	af02      	add	r7, sp, #8
 800461a:	4604      	mov	r4, r0
 800461c:	4608      	mov	r0, r1
 800461e:	4611      	mov	r1, r2
 8004620:	461a      	mov	r2, r3
 8004622:	4623      	mov	r3, r4
 8004624:	80fb      	strh	r3, [r7, #6]
 8004626:	4603      	mov	r3, r0
 8004628:	80bb      	strh	r3, [r7, #4]
 800462a:	460b      	mov	r3, r1
 800462c:	70fb      	strb	r3, [r7, #3]
 800462e:	4613      	mov	r3, r2
 8004630:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8004632:	4b56      	ldr	r3, [pc, #344]	; (800478c <drawChar+0x178>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3308      	adds	r3, #8
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	00da      	lsls	r2, r3, #3
 8004644:	4b51      	ldr	r3, [pc, #324]	; (800478c <drawChar+0x178>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3304      	adds	r3, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4413      	add	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8004650:	4b4e      	ldr	r3, [pc, #312]	; (800478c <drawChar+0x178>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	789b      	ldrb	r3, [r3, #2]
 8004662:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	78db      	ldrb	r3, [r3, #3]
 8004668:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	3305      	adds	r3, #5
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3306      	adds	r3, #6
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	76fb      	strb	r3, [r7, #27]
 800467e:	2300      	movs	r3, #0
 8004680:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	833b      	strh	r3, [r7, #24]
 8004686:	2300      	movs	r3, #0
 8004688:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 800468a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800468e:	2b01      	cmp	r3, #1
 8004690:	d905      	bls.n	800469e <drawChar+0x8a>
            xo16 = xo;
 8004692:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004696:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 8004698:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800469c:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 800469e:	2300      	movs	r3, #0
 80046a0:	773b      	strb	r3, [r7, #28]
 80046a2:	e06a      	b.n	800477a <drawChar+0x166>
            for(xx=0; xx<w; xx++) {
 80046a4:	2300      	movs	r3, #0
 80046a6:	777b      	strb	r3, [r7, #29]
 80046a8:	e060      	b.n	800476c <drawChar+0x158>
                if(!(bit++ & 7)) {
 80046aa:	7ebb      	ldrb	r3, [r7, #26]
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	76ba      	strb	r2, [r7, #26]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d107      	bne.n	80046c8 <drawChar+0xb4>
                    bits = pgm_read_byte(&bitmap[bo++]);
 80046b8:	8bfb      	ldrh	r3, [r7, #30]
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	83fa      	strh	r2, [r7, #30]
 80046be:	461a      	mov	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 80046c8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	da47      	bge.n	8004760 <drawChar+0x14c>
                    if(size == 1) {
 80046d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d11a      	bne.n	800470e <drawChar+0xfa>
                        writePixel(x+xo+xx, y+yo+yy, color);
 80046d8:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80046dc:	b29a      	uxth	r2, r3
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	4413      	add	r3, r2
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	7f7b      	ldrb	r3, [r7, #29]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	b218      	sxth	r0, r3
 80046ee:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	88bb      	ldrh	r3, [r7, #4]
 80046f6:	4413      	add	r3, r2
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	7f3b      	ldrb	r3, [r7, #28]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	4413      	add	r3, r2
 8004700:	b29b      	uxth	r3, r3
 8004702:	b21b      	sxth	r3, r3
 8004704:	883a      	ldrh	r2, [r7, #0]
 8004706:	4619      	mov	r1, r3
 8004708:	f7ff fd4a 	bl	80041a0 <writePixel>
 800470c:	e028      	b.n	8004760 <drawChar+0x14c>
                    } else {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 800470e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004712:	7f7b      	ldrb	r3, [r7, #29]
 8004714:	4413      	add	r3, r2
 8004716:	b29a      	uxth	r2, r3
 8004718:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800471c:	b29b      	uxth	r3, r3
 800471e:	fb12 f303 	smulbb	r3, r2, r3
 8004722:	b29a      	uxth	r2, r3
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	4413      	add	r3, r2
 8004728:	b29b      	uxth	r3, r3
 800472a:	b218      	sxth	r0, r3
 800472c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004730:	7f3b      	ldrb	r3, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	b29a      	uxth	r2, r3
 8004736:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800473a:	b29b      	uxth	r3, r3
 800473c:	fb12 f303 	smulbb	r3, r2, r3
 8004740:	b29a      	uxth	r2, r3
 8004742:	88bb      	ldrh	r3, [r7, #4]
 8004744:	4413      	add	r3, r2
 8004746:	b29b      	uxth	r3, r3
 8004748:	b219      	sxth	r1, r3
 800474a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800474e:	b21a      	sxth	r2, r3
 8004750:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004754:	b21c      	sxth	r4, r3
 8004756:	883b      	ldrh	r3, [r7, #0]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	4623      	mov	r3, r4
 800475c:	f7ff fd36 	bl	80041cc <fillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 8004760:	7efb      	ldrb	r3, [r7, #27]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 8004766:	7f7b      	ldrb	r3, [r7, #29]
 8004768:	3301      	adds	r3, #1
 800476a:	777b      	strb	r3, [r7, #29]
 800476c:	7f7a      	ldrb	r2, [r7, #29]
 800476e:	7afb      	ldrb	r3, [r7, #11]
 8004770:	429a      	cmp	r2, r3
 8004772:	d39a      	bcc.n	80046aa <drawChar+0x96>
        for(yy=0; yy<h; yy++) {
 8004774:	7f3b      	ldrb	r3, [r7, #28]
 8004776:	3301      	adds	r3, #1
 8004778:	773b      	strb	r3, [r7, #28]
 800477a:	7f3a      	ldrb	r2, [r7, #28]
 800477c:	7abb      	ldrb	r3, [r7, #10]
 800477e:	429a      	cmp	r2, r3
 8004780:	d390      	bcc.n	80046a4 <drawChar+0x90>
            }
        }

    } // End classic vs custom font
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	3724      	adds	r7, #36	; 0x24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd90      	pop	{r4, r7, pc}
 800478c:	200000b0 	.word	0x200000b0

08004790 <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 8004790:	b5b0      	push	{r4, r5, r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af02      	add	r7, sp, #8
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	2b0a      	cmp	r3, #10
 800479e:	d112      	bne.n	80047c6 <write+0x36>
            cursor_x  = 0;
 80047a0:	4b46      	ldr	r3, [pc, #280]	; (80048bc <write+0x12c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80047a6:	4b46      	ldr	r3, [pc, #280]	; (80048c0 <write+0x130>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	330a      	adds	r3, #10
 80047ac:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 80047ae:	4b45      	ldr	r3, [pc, #276]	; (80048c4 <write+0x134>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	fb12 f303 	smulbb	r3, r2, r3
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	4b43      	ldr	r3, [pc, #268]	; (80048c8 <write+0x138>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	4413      	add	r3, r2
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	4b41      	ldr	r3, [pc, #260]	; (80048c8 <write+0x138>)
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	e074      	b.n	80048b0 <write+0x120>
        } else if(c != '\r') {
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	2b0d      	cmp	r3, #13
 80047ca:	d071      	beq.n	80048b0 <write+0x120>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 80047cc:	4b3c      	ldr	r3, [pc, #240]	; (80048c0 <write+0x130>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	7a1b      	ldrb	r3, [r3, #8]
 80047d2:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80047d4:	79fa      	ldrb	r2, [r7, #7]
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d369      	bcc.n	80048b0 <write+0x120>
 80047dc:	4b38      	ldr	r3, [pc, #224]	; (80048c0 <write+0x130>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3309      	adds	r3, #9
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	79fa      	ldrb	r2, [r7, #7]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d862      	bhi.n	80048b0 <write+0x120>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 80047ea:	79fa      	ldrb	r2, [r7, #7]
 80047ec:	7dfb      	ldrb	r3, [r7, #23]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	00da      	lsls	r2, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 80047f2:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <write+0x130>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3304      	adds	r3, #4
                  &gfxFont->glyph))[c - first]);
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 80047fc:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	789b      	ldrb	r3, [r3, #2]
 8004802:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	78db      	ldrb	r3, [r3, #3]
 8004808:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d041      	beq.n	8004894 <write+0x104>
 8004810:	7bbb      	ldrb	r3, [r7, #14]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d03e      	beq.n	8004894 <write+0x104>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	3305      	adds	r3, #5
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b25b      	sxtb	r3, r3
 800481e:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8004820:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <write+0x13c>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d022      	beq.n	800486e <write+0xde>
 8004828:	4b24      	ldr	r3, [pc, #144]	; (80048bc <write+0x12c>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	4619      	mov	r1, r3
 800482e:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <write+0x134>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	4413      	add	r3, r2
 800483c:	fb03 f300 	mul.w	r3, r3, r0
 8004840:	440b      	add	r3, r1
 8004842:	4a23      	ldr	r2, [pc, #140]	; (80048d0 <write+0x140>)
 8004844:	8812      	ldrh	r2, [r2, #0]
 8004846:	4293      	cmp	r3, r2
 8004848:	dd11      	ble.n	800486e <write+0xde>
                        cursor_x  = 0;
 800484a:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <write+0x12c>)
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004850:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <write+0x130>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330a      	adds	r3, #10
 8004856:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 8004858:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <write+0x134>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	fb12 f303 	smulbb	r3, r2, r3
 8004860:	b2da      	uxtb	r2, r3
 8004862:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <write+0x138>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	4413      	add	r3, r2
 8004868:	b2da      	uxtb	r2, r3
 800486a:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <write+0x138>)
 800486c:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <write+0x12c>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	b218      	sxth	r0, r3
 8004874:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <write+0x138>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	b219      	sxth	r1, r3
 800487a:	4b16      	ldr	r3, [pc, #88]	; (80048d4 <write+0x144>)
 800487c:	881d      	ldrh	r5, [r3, #0]
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <write+0x148>)
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	4a10      	ldr	r2, [pc, #64]	; (80048c4 <write+0x134>)
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	79fc      	ldrb	r4, [r7, #7]
 8004888:	9201      	str	r2, [sp, #4]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	462b      	mov	r3, r5
 800488e:	4622      	mov	r2, r4
 8004890:	f7ff fec0 	bl	8004614 <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	3304      	adds	r3, #4
 8004898:	781a      	ldrb	r2, [r3, #0]
 800489a:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <write+0x134>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	fb12 f303 	smulbb	r3, r2, r3
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <write+0x12c>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4413      	add	r3, r2
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <write+0x12c>)
 80048ae:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 80048b0:	2301      	movs	r3, #1
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bdb0      	pop	{r4, r5, r7, pc}
 80048ba:	bf00      	nop
 80048bc:	200000a5 	.word	0x200000a5
 80048c0:	200000b0 	.word	0x200000b0
 80048c4:	2000000c 	.word	0x2000000c
 80048c8:	200000a4 	.word	0x200000a4
 80048cc:	20000012 	.word	0x20000012
 80048d0:	20000008 	.word	0x20000008
 80048d4:	2000000e 	.word	0x2000000e
 80048d8:	20000010 	.word	0x20000010

080048dc <write_fillbackground>:
    				print the background first with the textbgcolor
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write_fillbackground(uint8_t c)
{
 80048dc:	b5b0      	push	{r4, r5, r7, lr}
 80048de:	b08c      	sub	sp, #48	; 0x30
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
	{
		//Verifica se é um enter
		if(c == '\n')
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	2b0a      	cmp	r3, #10
 80048ea:	d112      	bne.n	8004912 <write_fillbackground+0x36>
		{
				//Retorna o cursor para 1a coluna
				cursor_x  = 0;
 80048ec:	4b7d      	ldr	r3, [pc, #500]	; (8004ae4 <write_fillbackground+0x208>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
				//Acrescenta o espaço de uma linha em y
				cursor_y += (int16_t)textsize *
										(uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80048f2:	4b7d      	ldr	r3, [pc, #500]	; (8004ae8 <write_fillbackground+0x20c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330a      	adds	r3, #10
 80048f8:	781a      	ldrb	r2, [r3, #0]
				cursor_y += (int16_t)textsize *
 80048fa:	4b7c      	ldr	r3, [pc, #496]	; (8004aec <write_fillbackground+0x210>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	fb12 f303 	smulbb	r3, r2, r3
 8004902:	b2da      	uxtb	r2, r3
 8004904:	4b7a      	ldr	r3, [pc, #488]	; (8004af0 <write_fillbackground+0x214>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	4413      	add	r3, r2
 800490a:	b2da      	uxtb	r2, r3
 800490c:	4b78      	ldr	r3, [pc, #480]	; (8004af0 <write_fillbackground+0x214>)
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	e0e3      	b.n	8004ada <write_fillbackground+0x1fe>
		}
		//Senão, se não for o "carrier return"
		else if(c != '\r')
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	2b0d      	cmp	r3, #13
 8004916:	f000 80e0 	beq.w	8004ada <write_fillbackground+0x1fe>
		{
			//Lê o código do 1a caractere válido
			uint8_t first = pgm_read_byte(&gfxFont->first);
 800491a:	4b73      	ldr	r3, [pc, #460]	; (8004ae8 <write_fillbackground+0x20c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	7a1b      	ldrb	r3, [r3, #8]
 8004920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//Se o caractere a ser escrito é válido
			if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last)))
 8004924:	79fa      	ldrb	r2, [r7, #7]
 8004926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800492a:	429a      	cmp	r2, r3
 800492c:	f0c0 80d5 	bcc.w	8004ada <write_fillbackground+0x1fe>
 8004930:	4b6d      	ldr	r3, [pc, #436]	; (8004ae8 <write_fillbackground+0x20c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3309      	adds	r3, #9
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	79fa      	ldrb	r2, [r7, #7]
 800493a:	429a      	cmp	r2, r3
 800493c:	f200 80cd 	bhi.w	8004ada <write_fillbackground+0x1fe>
			{
				//Modificação: Desenha um retângulo preenchido com a cor de fundo com as dimensões
				//máximas ocupado por um caractere.
				//Neste estudo, para as fontes do tipo mono_x_ os caracaters '\' e '/' tem as maiores dimensões.
				uint8_t maior = '/';
 8004940:	232f      	movs	r3, #47	; 0x2f
 8004942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				//Preenche o ponteiro para struct glyph com os parâmetros do caractere '\'
				GFXglyph *glyph2 = &(((GFXglyph *)pgm_read_pointer(
													&gfxFont->glyph))[maior - first]);
 8004946:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800494a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	00da      	lsls	r2, r3, #3
				GFXglyph *glyph2 = &(((GFXglyph *)pgm_read_pointer(
 8004952:	4b65      	ldr	r3, [pc, #404]	; (8004ae8 <write_fillbackground+0x20c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3304      	adds	r3, #4
													&gfxFont->glyph))[maior - first]);
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4413      	add	r3, r2
				GFXglyph *glyph2 = &(((GFXglyph *)pgm_read_pointer(
 800495c:	623b      	str	r3, [r7, #32]
				//Desenha o retângulo cobrinto toda a área do maior carctere possível
				int16_t xx = cursor_x;
 800495e:	4b61      	ldr	r3, [pc, #388]	; (8004ae4 <write_fillbackground+0x208>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	83fb      	strh	r3, [r7, #30]
				int8_t yo = pgm_read_byte(&glyph2->yOffset);
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	3306      	adds	r3, #6
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	777b      	strb	r3, [r7, #29]
				int16_t yy = (int16_t)cursor_y + yo*textsize;
 800496c:	4b60      	ldr	r3, [pc, #384]	; (8004af0 <write_fillbackground+0x214>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b29a      	uxth	r2, r3
 8004972:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004976:	b299      	uxth	r1, r3
 8004978:	4b5c      	ldr	r3, [pc, #368]	; (8004aec <write_fillbackground+0x210>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	fb11 f303 	smulbb	r3, r1, r3
 8004982:	b29b      	uxth	r3, r3
 8004984:	4413      	add	r3, r2
 8004986:	b29b      	uxth	r3, r3
 8004988:	837b      	strh	r3, [r7, #26]
				int16_t ww = pgm_read_byte(&glyph2->xAdvance) * textsize;
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	3304      	adds	r3, #4
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b29a      	uxth	r2, r3
 8004992:	4b56      	ldr	r3, [pc, #344]	; (8004aec <write_fillbackground+0x210>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	fb12 f303 	smulbb	r3, r2, r3
 800499c:	b29b      	uxth	r3, r3
 800499e:	833b      	strh	r3, [r7, #24]
				int16_t hh = pgm_read_byte(&glyph2->height)*textsize;
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	3303      	adds	r3, #3
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	4b50      	ldr	r3, [pc, #320]	; (8004aec <write_fillbackground+0x210>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	fb12 f303 	smulbb	r3, r2, r3
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	82fb      	strh	r3, [r7, #22]
				fillRect(xx, yy, ww, hh, textbgcolor);
 80049b6:	4b4f      	ldr	r3, [pc, #316]	; (8004af4 <write_fillbackground+0x218>)
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 80049be:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80049c2:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80049c6:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	4623      	mov	r3, r4
 80049ce:	f7ff fbfd 	bl	80041cc <fillRect>

				//Preenche o ponteiro para struct glyph com os parâmetros do caractere
				GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
					&gfxFont->glyph))[c - first]);
 80049d2:	79fa      	ldrb	r2, [r7, #7]
 80049d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	00da      	lsls	r2, r3, #3
				GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 80049dc:	4b42      	ldr	r3, [pc, #264]	; (8004ae8 <write_fillbackground+0x20c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3304      	adds	r3, #4
					&gfxFont->glyph))[c - first]);
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4413      	add	r3, r2
				GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 80049e6:	613b      	str	r3, [r7, #16]
				//Lê a largura e altura do retêngulo formado pelos pixels a serem pintados (desenho do caractere)
				uint8_t   w     = pgm_read_byte(&glyph->width),
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	789b      	ldrb	r3, [r3, #2]
 80049ec:	73fb      	strb	r3, [r7, #15]
									h     = pgm_read_byte(&glyph->height);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	78db      	ldrb	r3, [r3, #3]
 80049f2:	73bb      	strb	r3, [r7, #14]
				//Se a latura e a largura é maior que 0 (não é o caractere "espaço")
				if((w > 0) && (h > 0)) // Is there an associated bitmap?
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d061      	beq.n	8004abe <write_fillbackground+0x1e2>
 80049fa:	7bbb      	ldrb	r3, [r7, #14]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d05e      	beq.n	8004abe <write_fillbackground+0x1e2>
				{
					//Lê o deslocamente do cursor até a primeiro coluna com pixels a serem pintados
					int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	3305      	adds	r3, #5
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	b25b      	sxtb	r3, r3
 8004a08:	81bb      	strh	r3, [r7, #12]
					//Se chegar no linha da linha, quebra a linha e continua na linha seguinte
					if(wrap && ((cursor_x + textsize * (xo + w)) > _width))
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <write_fillbackground+0x21c>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d042      	beq.n	8004a98 <write_fillbackground+0x1bc>
 8004a12:	4b34      	ldr	r3, [pc, #208]	; (8004ae4 <write_fillbackground+0x208>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	4619      	mov	r1, r3
 8004a18:	4b34      	ldr	r3, [pc, #208]	; (8004aec <write_fillbackground+0x210>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	4413      	add	r3, r2
 8004a26:	fb03 f300 	mul.w	r3, r3, r0
 8004a2a:	440b      	add	r3, r1
 8004a2c:	4a33      	ldr	r2, [pc, #204]	; (8004afc <write_fillbackground+0x220>)
 8004a2e:	8812      	ldrh	r2, [r2, #0]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	dd31      	ble.n	8004a98 <write_fillbackground+0x1bc>
					{
							cursor_x  = 0;
 8004a34:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <write_fillbackground+0x208>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
							cursor_y += (int16_t)textsize *
								(uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004a3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ae8 <write_fillbackground+0x20c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330a      	adds	r3, #10
 8004a40:	781a      	ldrb	r2, [r3, #0]
							cursor_y += (int16_t)textsize *
 8004a42:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <write_fillbackground+0x210>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	fb12 f303 	smulbb	r3, r2, r3
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <write_fillbackground+0x214>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	4b26      	ldr	r3, [pc, #152]	; (8004af0 <write_fillbackground+0x214>)
 8004a56:	701a      	strb	r2, [r3, #0]

							//Modificação: Se precisou quebrar a linha, desenha um novo retângulo
							//na linha seguinte
							//Desenha o retângulo cobrinto toda a área do maior carctere possível
							xx = cursor_x;
 8004a58:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <write_fillbackground+0x208>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	83fb      	strh	r3, [r7, #30]
							yy = (int16_t)cursor_y + yo*textsize;
 8004a5e:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <write_fillbackground+0x214>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004a68:	b299      	uxth	r1, r3
 8004a6a:	4b20      	ldr	r3, [pc, #128]	; (8004aec <write_fillbackground+0x210>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	fb11 f303 	smulbb	r3, r1, r3
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	837b      	strh	r3, [r7, #26]
							fillRect(xx, yy, ww, hh, textbgcolor);
 8004a7c:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <write_fillbackground+0x218>)
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8004a84:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004a88:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8004a8c:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	4623      	mov	r3, r4
 8004a94:	f7ff fb9a 	bl	80041cc <fillRect>
					}
					//Desenha o caractere
					drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <write_fillbackground+0x208>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b218      	sxth	r0, r3
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <write_fillbackground+0x214>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b219      	sxth	r1, r3
 8004aa4:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <write_fillbackground+0x224>)
 8004aa6:	881d      	ldrh	r5, [r3, #0]
 8004aa8:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <write_fillbackground+0x218>)
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	4a0f      	ldr	r2, [pc, #60]	; (8004aec <write_fillbackground+0x210>)
 8004aae:	7812      	ldrb	r2, [r2, #0]
 8004ab0:	79fc      	ldrb	r4, [r7, #7]
 8004ab2:	9201      	str	r2, [sp, #4]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	462b      	mov	r3, r5
 8004ab8:	4622      	mov	r2, r4
 8004aba:	f7ff fdab 	bl	8004614 <drawChar>
					//drawCharLF(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
				}
				//Avança o cursor de acordo com a largura reservada para o caractere
				cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	781a      	ldrb	r2, [r3, #0]
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <write_fillbackground+0x210>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	fb12 f303 	smulbb	r3, r2, r3
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <write_fillbackground+0x208>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <write_fillbackground+0x208>)
 8004ad8:	701a      	strb	r2, [r3, #0]
			}
		}

	}
	return 1;
 8004ada:	2301      	movs	r3, #1
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3728      	adds	r7, #40	; 0x28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae4:	200000a5 	.word	0x200000a5
 8004ae8:	200000b0 	.word	0x200000b0
 8004aec:	2000000c 	.word	0x2000000c
 8004af0:	200000a4 	.word	0x200000a4
 8004af4:	20000010 	.word	0x20000010
 8004af8:	20000012 	.word	0x20000012
 8004afc:	20000008 	.word	0x20000008
 8004b00:	2000000e 	.word	0x2000000e

08004b04 <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <setFont+0x4c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d110      	bne.n	8004b3c <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <setFont+0x50>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	3306      	adds	r3, #6
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <setFont+0x50>)
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	e009      	b.n	8004b3c <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <setFont+0x4c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <setFont+0x50>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	3b06      	subs	r3, #6
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <setFont+0x50>)
 8004b3a:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8004b3c:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <setFont+0x4c>)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6013      	str	r3, [r2, #0]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	200000b0 	.word	0x200000b0
 8004b54:	200000a4 	.word	0x200000a4

08004b58 <printnewtstr>:
    @param	txtsize	The size of de text
    @param	str	A point to the string
*/
/**************************************************************************/
void printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	461a      	mov	r2, r3
 8004b64:	460b      	mov	r3, r1
 8004b66:	817b      	strh	r3, [r7, #10]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	727b      	strb	r3, [r7, #9]
	setFont(f);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ffc9 	bl	8004b04 <setFont>
	textcolor = txtcolor;
 8004b72:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <printnewtstr+0x60>)
 8004b74:	897b      	ldrh	r3, [r7, #10]
 8004b76:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8004b78:	7a7b      	ldrb	r3, [r7, #9]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <printnewtstr+0x2a>
 8004b7e:	7a7b      	ldrb	r3, [r7, #9]
 8004b80:	e000      	b.n	8004b84 <printnewtstr+0x2c>
 8004b82:	2301      	movs	r3, #1
 8004b84:	4a0d      	ldr	r2, [pc, #52]	; (8004bbc <printnewtstr+0x64>)
 8004b86:	7013      	strb	r3, [r2, #0]
	setCursor(0, row);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	b21b      	sxth	r3, r3
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f000 f84e 	bl	8004c30 <setCursor>
	//while (*str) write (*str++);
	while (*str) write(*str++);
 8004b94:	e006      	b.n	8004ba4 <printnewtstr+0x4c>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	61ba      	str	r2, [r7, #24]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fdf6 	bl	8004790 <write>
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f4      	bne.n	8004b96 <printnewtstr+0x3e>
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	2000000e 	.word	0x2000000e
 8004bbc:	2000000c 	.word	0x2000000c

08004bc0 <printnewtstr_bc>:
    @param	txtsize	The size of de text
    @param	str	A point to the string
*/
/**************************************************************************/
void printnewtstr_bc(int row, uint16_t txtcolor, uint16_t txtbackcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	817b      	strh	r3, [r7, #10]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	813b      	strh	r3, [r7, #8]
	setFont(f);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff ff96 	bl	8004b04 <setFont>
	textcolor = txtcolor;
 8004bd8:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <printnewtstr_bc+0x64>)
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	8013      	strh	r3, [r2, #0]
	textbgcolor = txtbackcolor;
 8004bde:	4a12      	ldr	r2, [pc, #72]	; (8004c28 <printnewtstr_bc+0x68>)
 8004be0:	893b      	ldrh	r3, [r7, #8]
 8004be2:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8004be4:	7e3b      	ldrb	r3, [r7, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <printnewtstr_bc+0x2e>
 8004bea:	7e3b      	ldrb	r3, [r7, #24]
 8004bec:	e000      	b.n	8004bf0 <printnewtstr_bc+0x30>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	4a0e      	ldr	r2, [pc, #56]	; (8004c2c <printnewtstr_bc+0x6c>)
 8004bf2:	7013      	strb	r3, [r2, #0]
	setCursor(0, row);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	b21b      	sxth	r3, r3
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f000 f818 	bl	8004c30 <setCursor>
	//while (*str) write (*str++);
	while (*str) write_fillbackground(*str++);
 8004c00:	e006      	b.n	8004c10 <printnewtstr_bc+0x50>
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	61fa      	str	r2, [r7, #28]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fe66 	bl	80048dc <write_fillbackground>
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f4      	bne.n	8004c02 <printnewtstr_bc+0x42>
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	2000000e 	.word	0x2000000e
 8004c28:	20000010 	.word	0x20000010
 8004c2c:	2000000c 	.word	0x2000000c

08004c30 <setCursor>:
	textsize = size;
}


void setCursor(int16_t x, int16_t y)
{ cursor_x = x; cursor_y = y; }
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	460a      	mov	r2, r1
 8004c3a:	80fb      	strh	r3, [r7, #6]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	80bb      	strh	r3, [r7, #4]
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <setCursor+0x2c>)
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	88bb      	ldrh	r3, [r7, #4]
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <setCursor+0x30>)
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	200000a5 	.word	0x200000a5
 8004c60:	200000a4 	.word	0x200000a4

08004c64 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim3;
void delay (uint32_t time)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004c6c:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <delay+0x2c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2200      	movs	r2, #0
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<time);
 8004c74:	bf00      	nop
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <delay+0x2c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d8f9      	bhi.n	8004c76 <delay+0x12>
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	200000b8 	.word	0x200000b8

08004c94 <tft_gpio_init>:
}


/****************** Inicialização de GPIOs **********************/
void tft_gpio_init(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <tft_gpio_init+0xd4>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	4a31      	ldr	r2, [pc, #196]	; (8004d68 <tft_gpio_init+0xd4>)
 8004ca4:	f043 0304 	orr.w	r3, r3, #4
 8004ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8004caa:	4b2f      	ldr	r3, [pc, #188]	; (8004d68 <tft_gpio_init+0xd4>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	4b2b      	ldr	r3, [pc, #172]	; (8004d68 <tft_gpio_init+0xd4>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	4a2a      	ldr	r2, [pc, #168]	; (8004d68 <tft_gpio_init+0xd4>)
 8004cc0:	f043 0301 	orr.w	r3, r3, #1
 8004cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc6:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <tft_gpio_init+0xd4>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <tft_gpio_init+0xd4>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	4a23      	ldr	r2, [pc, #140]	; (8004d68 <tft_gpio_init+0xd4>)
 8004cdc:	f043 0302 	orr.w	r3, r3, #2
 8004ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce2:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <tft_gpio_init+0xd4>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	607b      	str	r3, [r7, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]

	PIN_OUTPUT(RD_PORT, RD_PIN);
 8004cee:	2101      	movs	r1, #1
 8004cf0:	481e      	ldr	r0, [pc, #120]	; (8004d6c <tft_gpio_init+0xd8>)
 8004cf2:	f7fc f87b 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(WR_PORT, WR_PIN);
 8004cf6:	2102      	movs	r1, #2
 8004cf8:	481c      	ldr	r0, [pc, #112]	; (8004d6c <tft_gpio_init+0xd8>)
 8004cfa:	f7fc f877 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(CD_PORT, CD_PIN);
 8004cfe:	2110      	movs	r1, #16
 8004d00:	481a      	ldr	r0, [pc, #104]	; (8004d6c <tft_gpio_init+0xd8>)
 8004d02:	f7fc f873 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(CS_PORT, CS_PIN);
 8004d06:	2101      	movs	r1, #1
 8004d08:	4819      	ldr	r0, [pc, #100]	; (8004d70 <tft_gpio_init+0xdc>)
 8004d0a:	f7fc f86f 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(RESET_PORT, RESET_PIN);
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4818      	ldr	r0, [pc, #96]	; (8004d74 <tft_gpio_init+0xe0>)
 8004d12:	f7fc f86b 	bl	8000dec <PIN_OUTPUT>

	PIN_OUTPUT(D0_PORT, D0_PIN);
 8004d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d1a:	4814      	ldr	r0, [pc, #80]	; (8004d6c <tft_gpio_init+0xd8>)
 8004d1c:	f7fc f866 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8004d20:	2180      	movs	r1, #128	; 0x80
 8004d22:	4814      	ldr	r0, [pc, #80]	; (8004d74 <tft_gpio_init+0xe0>)
 8004d24:	f7fc f862 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8004d28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d2c:	480f      	ldr	r0, [pc, #60]	; (8004d6c <tft_gpio_init+0xd8>)
 8004d2e:	f7fc f85d 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8004d32:	2108      	movs	r1, #8
 8004d34:	480e      	ldr	r0, [pc, #56]	; (8004d70 <tft_gpio_init+0xdc>)
 8004d36:	f7fc f859 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8004d3a:	2120      	movs	r1, #32
 8004d3c:	480c      	ldr	r0, [pc, #48]	; (8004d70 <tft_gpio_init+0xdc>)
 8004d3e:	f7fc f855 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8004d42:	2110      	movs	r1, #16
 8004d44:	480a      	ldr	r0, [pc, #40]	; (8004d70 <tft_gpio_init+0xdc>)
 8004d46:	f7fc f851 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8004d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d4e:	4808      	ldr	r0, [pc, #32]	; (8004d70 <tft_gpio_init+0xdc>)
 8004d50:	f7fc f84c 	bl	8000dec <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8004d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d58:	4804      	ldr	r0, [pc, #16]	; (8004d6c <tft_gpio_init+0xd8>)
 8004d5a:	f7fc f847 	bl	8000dec <PIN_OUTPUT>
}
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40020000 	.word	0x40020000
 8004d70:	40020400 	.word	0x40020400
 8004d74:	40020800 	.word	0x40020800

08004d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d7c:	480d      	ldr	r0, [pc, #52]	; (8004db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004d7e:	490e      	ldr	r1, [pc, #56]	; (8004db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004d80:	4a0e      	ldr	r2, [pc, #56]	; (8004dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d84:	e002      	b.n	8004d8c <LoopCopyDataInit>

08004d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d8a:	3304      	adds	r3, #4

08004d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d90:	d3f9      	bcc.n	8004d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d92:	4a0b      	ldr	r2, [pc, #44]	; (8004dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004d94:	4c0b      	ldr	r4, [pc, #44]	; (8004dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d98:	e001      	b.n	8004d9e <LoopFillZerobss>

08004d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d9c:	3204      	adds	r2, #4

08004d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004da0:	d3fb      	bcc.n	8004d9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004da2:	f7fb ffdb 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004da6:	f002 f9c9 	bl	800713c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004daa:	f7fb fbfd 	bl	80005a8 <main>
  bx  lr    
 8004dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004db8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004dbc:	08009168 	.word	0x08009168
  ldr r2, =_sbss
 8004dc0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004dc4:	200001c0 	.word	0x200001c0

08004dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dc8:	e7fe      	b.n	8004dc8 <ADC_IRQHandler>
	...

08004dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <HAL_Init+0x40>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a0d      	ldr	r2, [pc, #52]	; (8004e0c <HAL_Init+0x40>)
 8004dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_Init+0x40>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <HAL_Init+0x40>)
 8004de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004de8:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <HAL_Init+0x40>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a07      	ldr	r2, [pc, #28]	; (8004e0c <HAL_Init+0x40>)
 8004dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004df4:	2003      	movs	r0, #3
 8004df6:	f000 f931 	bl	800505c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f000 f808 	bl	8004e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e00:	f7fb fe6e 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023c00 	.word	0x40023c00

08004e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_InitTick+0x54>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <HAL_InitTick+0x58>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	4619      	mov	r1, r3
 8004e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f93b 	bl	80050aa <HAL_SYSTICK_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e00e      	b.n	8004e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b0f      	cmp	r3, #15
 8004e42:	d80a      	bhi.n	8004e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e44:	2200      	movs	r2, #0
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4c:	f000 f911 	bl	8005072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e50:	4a06      	ldr	r2, [pc, #24]	; (8004e6c <HAL_InitTick+0x5c>)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e000      	b.n	8004e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000004 	.word	0x20000004
 8004e68:	20000018 	.word	0x20000018
 8004e6c:	20000014 	.word	0x20000014

08004e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_IncTick+0x20>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_IncTick+0x24>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4413      	add	r3, r2
 8004e80:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <HAL_IncTick+0x24>)
 8004e82:	6013      	str	r3, [r2, #0]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000018 	.word	0x20000018
 8004e94:	200001ac 	.word	0x200001ac

08004e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e9c:	4b03      	ldr	r3, [pc, #12]	; (8004eac <HAL_GetTick+0x14>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	200001ac 	.word	0x200001ac

08004eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004eb8:	f7ff ffee 	bl	8004e98 <HAL_GetTick>
 8004ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d005      	beq.n	8004ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eca:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <HAL_Delay+0x44>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ed6:	bf00      	nop
 8004ed8:	f7ff ffde 	bl	8004e98 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d8f7      	bhi.n	8004ed8 <HAL_Delay+0x28>
  {
  }
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000018 	.word	0x20000018

08004ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <__NVIC_SetPriorityGrouping+0x44>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f14:	4013      	ands	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f2a:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <__NVIC_SetPriorityGrouping+0x44>)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	60d3      	str	r3, [r2, #12]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	e000ed00 	.word	0xe000ed00

08004f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <__NVIC_GetPriorityGrouping+0x18>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	f003 0307 	and.w	r3, r3, #7
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4603      	mov	r3, r0
 8004f64:	6039      	str	r1, [r7, #0]
 8004f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	db0a      	blt.n	8004f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	490c      	ldr	r1, [pc, #48]	; (8004fa8 <__NVIC_SetPriority+0x4c>)
 8004f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7a:	0112      	lsls	r2, r2, #4
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	440b      	add	r3, r1
 8004f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f84:	e00a      	b.n	8004f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	4908      	ldr	r1, [pc, #32]	; (8004fac <__NVIC_SetPriority+0x50>)
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	3b04      	subs	r3, #4
 8004f94:	0112      	lsls	r2, r2, #4
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	440b      	add	r3, r1
 8004f9a:	761a      	strb	r2, [r3, #24]
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	e000e100 	.word	0xe000e100
 8004fac:	e000ed00 	.word	0xe000ed00

08004fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b089      	sub	sp, #36	; 0x24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f1c3 0307 	rsb	r3, r3, #7
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	bf28      	it	cs
 8004fce:	2304      	movcs	r3, #4
 8004fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	2b06      	cmp	r3, #6
 8004fd8:	d902      	bls.n	8004fe0 <NVIC_EncodePriority+0x30>
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	3b03      	subs	r3, #3
 8004fde:	e000      	b.n	8004fe2 <NVIC_EncodePriority+0x32>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43da      	mvns	r2, r3
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	401a      	ands	r2, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8005002:	43d9      	mvns	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005008:	4313      	orrs	r3, r2
         );
}
 800500a:	4618      	mov	r0, r3
 800500c:	3724      	adds	r7, #36	; 0x24
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3b01      	subs	r3, #1
 8005024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005028:	d301      	bcc.n	800502e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800502a:	2301      	movs	r3, #1
 800502c:	e00f      	b.n	800504e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800502e:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <SysTick_Config+0x40>)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3b01      	subs	r3, #1
 8005034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005036:	210f      	movs	r1, #15
 8005038:	f04f 30ff 	mov.w	r0, #4294967295
 800503c:	f7ff ff8e 	bl	8004f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <SysTick_Config+0x40>)
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005046:	4b04      	ldr	r3, [pc, #16]	; (8005058 <SysTick_Config+0x40>)
 8005048:	2207      	movs	r2, #7
 800504a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	e000e010 	.word	0xe000e010

0800505c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ff47 	bl	8004ef8 <__NVIC_SetPriorityGrouping>
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005072:	b580      	push	{r7, lr}
 8005074:	b086      	sub	sp, #24
 8005076:	af00      	add	r7, sp, #0
 8005078:	4603      	mov	r3, r0
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	607a      	str	r2, [r7, #4]
 800507e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005084:	f7ff ff5c 	bl	8004f40 <__NVIC_GetPriorityGrouping>
 8005088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	6978      	ldr	r0, [r7, #20]
 8005090:	f7ff ff8e 	bl	8004fb0 <NVIC_EncodePriority>
 8005094:	4602      	mov	r2, r0
 8005096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800509a:	4611      	mov	r1, r2
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ff5d 	bl	8004f5c <__NVIC_SetPriority>
}
 80050a2:	bf00      	nop
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff ffb0 	bl	8005018 <SysTick_Config>
 80050b8:	4603      	mov	r3, r0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b089      	sub	sp, #36	; 0x24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	e165      	b.n	80053ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050e0:	2201      	movs	r2, #1
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	f040 8154 	bne.w	80053a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b01      	cmp	r3, #1
 8005108:	d005      	beq.n	8005116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005112:	2b02      	cmp	r3, #2
 8005114:	d130      	bne.n	8005178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	2203      	movs	r2, #3
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43db      	mvns	r3, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4013      	ands	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4313      	orrs	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800514c:	2201      	movs	r2, #1
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	43db      	mvns	r3, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4013      	ands	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 0201 	and.w	r2, r3, #1
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	4313      	orrs	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 0303 	and.w	r3, r3, #3
 8005180:	2b03      	cmp	r3, #3
 8005182:	d017      	beq.n	80051b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	2203      	movs	r2, #3
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4013      	ands	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d123      	bne.n	8005208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	08da      	lsrs	r2, r3, #3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3208      	adds	r2, #8
 80051c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	220f      	movs	r2, #15
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	08da      	lsrs	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3208      	adds	r2, #8
 8005202:	69b9      	ldr	r1, [r7, #24]
 8005204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	2203      	movs	r2, #3
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 0203 	and.w	r2, r3, #3
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80ae 	beq.w	80053a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	4b5d      	ldr	r3, [pc, #372]	; (80053c4 <HAL_GPIO_Init+0x300>)
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	4a5c      	ldr	r2, [pc, #368]	; (80053c4 <HAL_GPIO_Init+0x300>)
 8005254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005258:	6453      	str	r3, [r2, #68]	; 0x44
 800525a:	4b5a      	ldr	r3, [pc, #360]	; (80053c4 <HAL_GPIO_Init+0x300>)
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005266:	4a58      	ldr	r2, [pc, #352]	; (80053c8 <HAL_GPIO_Init+0x304>)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	3302      	adds	r3, #2
 800526e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	220f      	movs	r2, #15
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43db      	mvns	r3, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4013      	ands	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a4f      	ldr	r2, [pc, #316]	; (80053cc <HAL_GPIO_Init+0x308>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d025      	beq.n	80052de <HAL_GPIO_Init+0x21a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a4e      	ldr	r2, [pc, #312]	; (80053d0 <HAL_GPIO_Init+0x30c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01f      	beq.n	80052da <HAL_GPIO_Init+0x216>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a4d      	ldr	r2, [pc, #308]	; (80053d4 <HAL_GPIO_Init+0x310>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d019      	beq.n	80052d6 <HAL_GPIO_Init+0x212>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a4c      	ldr	r2, [pc, #304]	; (80053d8 <HAL_GPIO_Init+0x314>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <HAL_GPIO_Init+0x20e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a4b      	ldr	r2, [pc, #300]	; (80053dc <HAL_GPIO_Init+0x318>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00d      	beq.n	80052ce <HAL_GPIO_Init+0x20a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a4a      	ldr	r2, [pc, #296]	; (80053e0 <HAL_GPIO_Init+0x31c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d007      	beq.n	80052ca <HAL_GPIO_Init+0x206>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a49      	ldr	r2, [pc, #292]	; (80053e4 <HAL_GPIO_Init+0x320>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d101      	bne.n	80052c6 <HAL_GPIO_Init+0x202>
 80052c2:	2306      	movs	r3, #6
 80052c4:	e00c      	b.n	80052e0 <HAL_GPIO_Init+0x21c>
 80052c6:	2307      	movs	r3, #7
 80052c8:	e00a      	b.n	80052e0 <HAL_GPIO_Init+0x21c>
 80052ca:	2305      	movs	r3, #5
 80052cc:	e008      	b.n	80052e0 <HAL_GPIO_Init+0x21c>
 80052ce:	2304      	movs	r3, #4
 80052d0:	e006      	b.n	80052e0 <HAL_GPIO_Init+0x21c>
 80052d2:	2303      	movs	r3, #3
 80052d4:	e004      	b.n	80052e0 <HAL_GPIO_Init+0x21c>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e002      	b.n	80052e0 <HAL_GPIO_Init+0x21c>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <HAL_GPIO_Init+0x21c>
 80052de:	2300      	movs	r3, #0
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	f002 0203 	and.w	r2, r2, #3
 80052e6:	0092      	lsls	r2, r2, #2
 80052e8:	4093      	lsls	r3, r2
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052f0:	4935      	ldr	r1, [pc, #212]	; (80053c8 <HAL_GPIO_Init+0x304>)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	089b      	lsrs	r3, r3, #2
 80052f6:	3302      	adds	r3, #2
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052fe:	4b3a      	ldr	r3, [pc, #232]	; (80053e8 <HAL_GPIO_Init+0x324>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	43db      	mvns	r3, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005322:	4a31      	ldr	r2, [pc, #196]	; (80053e8 <HAL_GPIO_Init+0x324>)
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005328:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <HAL_GPIO_Init+0x324>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	43db      	mvns	r3, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4013      	ands	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <HAL_GPIO_Init+0x324>)
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005352:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <HAL_GPIO_Init+0x324>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	43db      	mvns	r3, r3
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	4013      	ands	r3, r2
 8005360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005376:	4a1c      	ldr	r2, [pc, #112]	; (80053e8 <HAL_GPIO_Init+0x324>)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800537c:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <HAL_GPIO_Init+0x324>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	43db      	mvns	r3, r3
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4013      	ands	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053a0:	4a11      	ldr	r2, [pc, #68]	; (80053e8 <HAL_GPIO_Init+0x324>)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3301      	adds	r3, #1
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	2b0f      	cmp	r3, #15
 80053b0:	f67f ae96 	bls.w	80050e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	3724      	adds	r7, #36	; 0x24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40023800 	.word	0x40023800
 80053c8:	40013800 	.word	0x40013800
 80053cc:	40020000 	.word	0x40020000
 80053d0:	40020400 	.word	0x40020400
 80053d4:	40020800 	.word	0x40020800
 80053d8:	40020c00 	.word	0x40020c00
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40021400 	.word	0x40021400
 80053e4:	40021800 	.word	0x40021800
 80053e8:	40013c00 	.word	0x40013c00

080053ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	887b      	ldrh	r3, [r7, #2]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
 8005408:	e001      	b.n	800540e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	807b      	strh	r3, [r7, #2]
 8005428:	4613      	mov	r3, r2
 800542a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800542c:	787b      	ldrb	r3, [r7, #1]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005432:	887a      	ldrh	r2, [r7, #2]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005438:	e003      	b.n	8005442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800543a:	887b      	ldrh	r3, [r7, #2]
 800543c:	041a      	lsls	r2, r3, #16
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	619a      	str	r2, [r3, #24]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0cc      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005464:	4b68      	ldr	r3, [pc, #416]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d90c      	bls.n	800548c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005472:	4b65      	ldr	r3, [pc, #404]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	4b63      	ldr	r3, [pc, #396]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0b8      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d020      	beq.n	80054da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a4:	4b59      	ldr	r3, [pc, #356]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4a58      	ldr	r2, [pc, #352]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054bc:	4b53      	ldr	r3, [pc, #332]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4a52      	ldr	r2, [pc, #328]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c8:	4b50      	ldr	r3, [pc, #320]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	494d      	ldr	r1, [pc, #308]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d044      	beq.n	8005570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d107      	bne.n	80054fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ee:	4b47      	ldr	r3, [pc, #284]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d119      	bne.n	800552e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e07f      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d003      	beq.n	800550e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800550a:	2b03      	cmp	r3, #3
 800550c:	d107      	bne.n	800551e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550e:	4b3f      	ldr	r3, [pc, #252]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e06f      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551e:	4b3b      	ldr	r3, [pc, #236]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e067      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800552e:	4b37      	ldr	r3, [pc, #220]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f023 0203 	bic.w	r2, r3, #3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4934      	ldr	r1, [pc, #208]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005540:	f7ff fcaa 	bl	8004e98 <HAL_GetTick>
 8005544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005546:	e00a      	b.n	800555e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005548:	f7ff fca6 	bl	8004e98 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f241 3288 	movw	r2, #5000	; 0x1388
 8005556:	4293      	cmp	r3, r2
 8005558:	d901      	bls.n	800555e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e04f      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555e:	4b2b      	ldr	r3, [pc, #172]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 020c 	and.w	r2, r3, #12
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	429a      	cmp	r2, r3
 800556e:	d1eb      	bne.n	8005548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005570:	4b25      	ldr	r3, [pc, #148]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d20c      	bcs.n	8005598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557e:	4b22      	ldr	r3, [pc, #136]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005586:	4b20      	ldr	r3, [pc, #128]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d001      	beq.n	8005598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e032      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	4916      	ldr	r1, [pc, #88]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	490e      	ldr	r1, [pc, #56]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055d6:	f000 f855 	bl	8005684 <HAL_RCC_GetSysClockFreq>
 80055da:	4602      	mov	r2, r0
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	490a      	ldr	r1, [pc, #40]	; (8005610 <HAL_RCC_ClockConfig+0x1c0>)
 80055e8:	5ccb      	ldrb	r3, [r1, r3]
 80055ea:	fa22 f303 	lsr.w	r3, r2, r3
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <HAL_RCC_ClockConfig+0x1c4>)
 80055f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <HAL_RCC_ClockConfig+0x1c8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff fc0a 	bl	8004e10 <HAL_InitTick>

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40023c00 	.word	0x40023c00
 800560c:	40023800 	.word	0x40023800
 8005610:	08008c08 	.word	0x08008c08
 8005614:	20000004 	.word	0x20000004
 8005618:	20000014 	.word	0x20000014

0800561c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005620:	4b03      	ldr	r3, [pc, #12]	; (8005630 <HAL_RCC_GetHCLKFreq+0x14>)
 8005622:	681b      	ldr	r3, [r3, #0]
}
 8005624:	4618      	mov	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	20000004 	.word	0x20000004

08005634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005638:	f7ff fff0 	bl	800561c <HAL_RCC_GetHCLKFreq>
 800563c:	4602      	mov	r2, r0
 800563e:	4b05      	ldr	r3, [pc, #20]	; (8005654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	0a9b      	lsrs	r3, r3, #10
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	4903      	ldr	r1, [pc, #12]	; (8005658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800564a:	5ccb      	ldrb	r3, [r1, r3]
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40023800 	.word	0x40023800
 8005658:	08008c18 	.word	0x08008c18

0800565c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005660:	f7ff ffdc 	bl	800561c <HAL_RCC_GetHCLKFreq>
 8005664:	4602      	mov	r2, r0
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	0b5b      	lsrs	r3, r3, #13
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	4903      	ldr	r1, [pc, #12]	; (8005680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005672:	5ccb      	ldrb	r3, [r1, r3]
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005678:	4618      	mov	r0, r3
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40023800 	.word	0x40023800
 8005680:	08008c18 	.word	0x08008c18

08005684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005688:	b088      	sub	sp, #32
 800568a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056a0:	4bce      	ldr	r3, [pc, #824]	; (80059dc <HAL_RCC_GetSysClockFreq+0x358>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b0c      	cmp	r3, #12
 80056aa:	f200 818d 	bhi.w	80059c8 <HAL_RCC_GetSysClockFreq+0x344>
 80056ae:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <HAL_RCC_GetSysClockFreq+0x30>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	080056e9 	.word	0x080056e9
 80056b8:	080059c9 	.word	0x080059c9
 80056bc:	080059c9 	.word	0x080059c9
 80056c0:	080059c9 	.word	0x080059c9
 80056c4:	080056ef 	.word	0x080056ef
 80056c8:	080059c9 	.word	0x080059c9
 80056cc:	080059c9 	.word	0x080059c9
 80056d0:	080059c9 	.word	0x080059c9
 80056d4:	080056f5 	.word	0x080056f5
 80056d8:	080059c9 	.word	0x080059c9
 80056dc:	080059c9 	.word	0x080059c9
 80056e0:	080059c9 	.word	0x080059c9
 80056e4:	08005869 	.word	0x08005869
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056e8:	4bbd      	ldr	r3, [pc, #756]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80056ea:	61bb      	str	r3, [r7, #24]
       break;
 80056ec:	e16f      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056ee:	4bbd      	ldr	r3, [pc, #756]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x360>)
 80056f0:	61bb      	str	r3, [r7, #24]
      break;
 80056f2:	e16c      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056f4:	4bb9      	ldr	r3, [pc, #740]	; (80059dc <HAL_RCC_GetSysClockFreq+0x358>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056fc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056fe:	4bb7      	ldr	r3, [pc, #732]	; (80059dc <HAL_RCC_GetSysClockFreq+0x358>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d053      	beq.n	80057b2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800570a:	4bb4      	ldr	r3, [pc, #720]	; (80059dc <HAL_RCC_GetSysClockFreq+0x358>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	099b      	lsrs	r3, r3, #6
 8005710:	461a      	mov	r2, r3
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800571a:	f04f 0100 	mov.w	r1, #0
 800571e:	ea02 0400 	and.w	r4, r2, r0
 8005722:	603c      	str	r4, [r7, #0]
 8005724:	400b      	ands	r3, r1
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	e9d7 4500 	ldrd	r4, r5, [r7]
 800572c:	4620      	mov	r0, r4
 800572e:	4629      	mov	r1, r5
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	014b      	lsls	r3, r1, #5
 800573a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800573e:	0142      	lsls	r2, r0, #5
 8005740:	4610      	mov	r0, r2
 8005742:	4619      	mov	r1, r3
 8005744:	4623      	mov	r3, r4
 8005746:	1ac0      	subs	r0, r0, r3
 8005748:	462b      	mov	r3, r5
 800574a:	eb61 0103 	sbc.w	r1, r1, r3
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	018b      	lsls	r3, r1, #6
 8005758:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800575c:	0182      	lsls	r2, r0, #6
 800575e:	1a12      	subs	r2, r2, r0
 8005760:	eb63 0301 	sbc.w	r3, r3, r1
 8005764:	f04f 0000 	mov.w	r0, #0
 8005768:	f04f 0100 	mov.w	r1, #0
 800576c:	00d9      	lsls	r1, r3, #3
 800576e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005772:	00d0      	lsls	r0, r2, #3
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4621      	mov	r1, r4
 800577a:	1852      	adds	r2, r2, r1
 800577c:	4629      	mov	r1, r5
 800577e:	eb43 0101 	adc.w	r1, r3, r1
 8005782:	460b      	mov	r3, r1
 8005784:	f04f 0000 	mov.w	r0, #0
 8005788:	f04f 0100 	mov.w	r1, #0
 800578c:	0259      	lsls	r1, r3, #9
 800578e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005792:	0250      	lsls	r0, r2, #9
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4610      	mov	r0, r2
 800579a:	4619      	mov	r1, r3
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	461a      	mov	r2, r3
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	f7fa fd84 	bl	80002b0 <__aeabi_uldivmod>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4613      	mov	r3, r2
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	e04c      	b.n	800584c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057b2:	4b8a      	ldr	r3, [pc, #552]	; (80059dc <HAL_RCC_GetSysClockFreq+0x358>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	099b      	lsrs	r3, r3, #6
 80057b8:	461a      	mov	r2, r3
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057c2:	f04f 0100 	mov.w	r1, #0
 80057c6:	ea02 0a00 	and.w	sl, r2, r0
 80057ca:	ea03 0b01 	and.w	fp, r3, r1
 80057ce:	4650      	mov	r0, sl
 80057d0:	4659      	mov	r1, fp
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	014b      	lsls	r3, r1, #5
 80057dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057e0:	0142      	lsls	r2, r0, #5
 80057e2:	4610      	mov	r0, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	ebb0 000a 	subs.w	r0, r0, sl
 80057ea:	eb61 010b 	sbc.w	r1, r1, fp
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	018b      	lsls	r3, r1, #6
 80057f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057fc:	0182      	lsls	r2, r0, #6
 80057fe:	1a12      	subs	r2, r2, r0
 8005800:	eb63 0301 	sbc.w	r3, r3, r1
 8005804:	f04f 0000 	mov.w	r0, #0
 8005808:	f04f 0100 	mov.w	r1, #0
 800580c:	00d9      	lsls	r1, r3, #3
 800580e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005812:	00d0      	lsls	r0, r2, #3
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	eb12 020a 	adds.w	r2, r2, sl
 800581c:	eb43 030b 	adc.w	r3, r3, fp
 8005820:	f04f 0000 	mov.w	r0, #0
 8005824:	f04f 0100 	mov.w	r1, #0
 8005828:	0299      	lsls	r1, r3, #10
 800582a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800582e:	0290      	lsls	r0, r2, #10
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4610      	mov	r0, r2
 8005836:	4619      	mov	r1, r3
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	461a      	mov	r2, r3
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	f7fa fd36 	bl	80002b0 <__aeabi_uldivmod>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4613      	mov	r3, r2
 800584a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800584c:	4b63      	ldr	r3, [pc, #396]	; (80059dc <HAL_RCC_GetSysClockFreq+0x358>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	3301      	adds	r3, #1
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	61bb      	str	r3, [r7, #24]
      break;
 8005866:	e0b2      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005868:	4b5c      	ldr	r3, [pc, #368]	; (80059dc <HAL_RCC_GetSysClockFreq+0x358>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005870:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005872:	4b5a      	ldr	r3, [pc, #360]	; (80059dc <HAL_RCC_GetSysClockFreq+0x358>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d04d      	beq.n	800591a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800587e:	4b57      	ldr	r3, [pc, #348]	; (80059dc <HAL_RCC_GetSysClockFreq+0x358>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	099b      	lsrs	r3, r3, #6
 8005884:	461a      	mov	r2, r3
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800588e:	f04f 0100 	mov.w	r1, #0
 8005892:	ea02 0800 	and.w	r8, r2, r0
 8005896:	ea03 0901 	and.w	r9, r3, r1
 800589a:	4640      	mov	r0, r8
 800589c:	4649      	mov	r1, r9
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	014b      	lsls	r3, r1, #5
 80058a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058ac:	0142      	lsls	r2, r0, #5
 80058ae:	4610      	mov	r0, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	ebb0 0008 	subs.w	r0, r0, r8
 80058b6:	eb61 0109 	sbc.w	r1, r1, r9
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	f04f 0300 	mov.w	r3, #0
 80058c2:	018b      	lsls	r3, r1, #6
 80058c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058c8:	0182      	lsls	r2, r0, #6
 80058ca:	1a12      	subs	r2, r2, r0
 80058cc:	eb63 0301 	sbc.w	r3, r3, r1
 80058d0:	f04f 0000 	mov.w	r0, #0
 80058d4:	f04f 0100 	mov.w	r1, #0
 80058d8:	00d9      	lsls	r1, r3, #3
 80058da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058de:	00d0      	lsls	r0, r2, #3
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	eb12 0208 	adds.w	r2, r2, r8
 80058e8:	eb43 0309 	adc.w	r3, r3, r9
 80058ec:	f04f 0000 	mov.w	r0, #0
 80058f0:	f04f 0100 	mov.w	r1, #0
 80058f4:	0259      	lsls	r1, r3, #9
 80058f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80058fa:	0250      	lsls	r0, r2, #9
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4610      	mov	r0, r2
 8005902:	4619      	mov	r1, r3
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	461a      	mov	r2, r3
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	f7fa fcd0 	bl	80002b0 <__aeabi_uldivmod>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4613      	mov	r3, r2
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	e04a      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800591a:	4b30      	ldr	r3, [pc, #192]	; (80059dc <HAL_RCC_GetSysClockFreq+0x358>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	099b      	lsrs	r3, r3, #6
 8005920:	461a      	mov	r2, r3
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	f240 10ff 	movw	r0, #511	; 0x1ff
 800592a:	f04f 0100 	mov.w	r1, #0
 800592e:	ea02 0400 	and.w	r4, r2, r0
 8005932:	ea03 0501 	and.w	r5, r3, r1
 8005936:	4620      	mov	r0, r4
 8005938:	4629      	mov	r1, r5
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	014b      	lsls	r3, r1, #5
 8005944:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005948:	0142      	lsls	r2, r0, #5
 800594a:	4610      	mov	r0, r2
 800594c:	4619      	mov	r1, r3
 800594e:	1b00      	subs	r0, r0, r4
 8005950:	eb61 0105 	sbc.w	r1, r1, r5
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	018b      	lsls	r3, r1, #6
 800595e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005962:	0182      	lsls	r2, r0, #6
 8005964:	1a12      	subs	r2, r2, r0
 8005966:	eb63 0301 	sbc.w	r3, r3, r1
 800596a:	f04f 0000 	mov.w	r0, #0
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	00d9      	lsls	r1, r3, #3
 8005974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005978:	00d0      	lsls	r0, r2, #3
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	1912      	adds	r2, r2, r4
 8005980:	eb45 0303 	adc.w	r3, r5, r3
 8005984:	f04f 0000 	mov.w	r0, #0
 8005988:	f04f 0100 	mov.w	r1, #0
 800598c:	0299      	lsls	r1, r3, #10
 800598e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005992:	0290      	lsls	r0, r2, #10
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4610      	mov	r0, r2
 800599a:	4619      	mov	r1, r3
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	461a      	mov	r2, r3
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	f7fa fc84 	bl	80002b0 <__aeabi_uldivmod>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4613      	mov	r3, r2
 80059ae:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <HAL_RCC_GetSysClockFreq+0x358>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	0f1b      	lsrs	r3, r3, #28
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	61bb      	str	r3, [r7, #24]
      break;
 80059c6:	e002      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80059ca:	61bb      	str	r3, [r7, #24]
      break;
 80059cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ce:	69bb      	ldr	r3, [r7, #24]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059da:	bf00      	nop
 80059dc:	40023800 	.word	0x40023800
 80059e0:	00f42400 	.word	0x00f42400
 80059e4:	007a1200 	.word	0x007a1200

080059e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e28d      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 8083 	beq.w	8005b0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a08:	4b94      	ldr	r3, [pc, #592]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 030c 	and.w	r3, r3, #12
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d019      	beq.n	8005a48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a14:	4b91      	ldr	r3, [pc, #580]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d106      	bne.n	8005a2e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a20:	4b8e      	ldr	r3, [pc, #568]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a2c:	d00c      	beq.n	8005a48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a2e:	4b8b      	ldr	r3, [pc, #556]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a36:	2b0c      	cmp	r3, #12
 8005a38:	d112      	bne.n	8005a60 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a3a:	4b88      	ldr	r3, [pc, #544]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a46:	d10b      	bne.n	8005a60 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a48:	4b84      	ldr	r3, [pc, #528]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d05b      	beq.n	8005b0c <HAL_RCC_OscConfig+0x124>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d157      	bne.n	8005b0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e25a      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a68:	d106      	bne.n	8005a78 <HAL_RCC_OscConfig+0x90>
 8005a6a:	4b7c      	ldr	r3, [pc, #496]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a7b      	ldr	r2, [pc, #492]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e01d      	b.n	8005ab4 <HAL_RCC_OscConfig+0xcc>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCC_OscConfig+0xb4>
 8005a82:	4b76      	ldr	r3, [pc, #472]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a75      	ldr	r2, [pc, #468]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4b73      	ldr	r3, [pc, #460]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a72      	ldr	r2, [pc, #456]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e00b      	b.n	8005ab4 <HAL_RCC_OscConfig+0xcc>
 8005a9c:	4b6f      	ldr	r3, [pc, #444]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a6e      	ldr	r2, [pc, #440]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	4b6c      	ldr	r3, [pc, #432]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a6b      	ldr	r2, [pc, #428]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d013      	beq.n	8005ae4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7ff f9ec 	bl	8004e98 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ac4:	f7ff f9e8 	bl	8004e98 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b64      	cmp	r3, #100	; 0x64
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e21f      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	4b61      	ldr	r3, [pc, #388]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0xdc>
 8005ae2:	e014      	b.n	8005b0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae4:	f7ff f9d8 	bl	8004e98 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aec:	f7ff f9d4 	bl	8004e98 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	; 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e20b      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afe:	4b57      	ldr	r3, [pc, #348]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0x104>
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d06f      	beq.n	8005bfa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b1a:	4b50      	ldr	r3, [pc, #320]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d017      	beq.n	8005b56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b26:	4b4d      	ldr	r3, [pc, #308]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d105      	bne.n	8005b3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b32:	4b4a      	ldr	r3, [pc, #296]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b3e:	4b47      	ldr	r3, [pc, #284]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b46:	2b0c      	cmp	r3, #12
 8005b48:	d11c      	bne.n	8005b84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4a:	4b44      	ldr	r3, [pc, #272]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d116      	bne.n	8005b84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b56:	4b41      	ldr	r3, [pc, #260]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_RCC_OscConfig+0x186>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d001      	beq.n	8005b6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e1d3      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6e:	4b3b      	ldr	r3, [pc, #236]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4937      	ldr	r1, [pc, #220]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b82:	e03a      	b.n	8005bfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d020      	beq.n	8005bce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b8c:	4b34      	ldr	r3, [pc, #208]	; (8005c60 <HAL_RCC_OscConfig+0x278>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b92:	f7ff f981 	bl	8004e98 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b9a:	f7ff f97d 	bl	8004e98 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e1b4      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bac:	4b2b      	ldr	r3, [pc, #172]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0f0      	beq.n	8005b9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb8:	4b28      	ldr	r3, [pc, #160]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	4925      	ldr	r1, [pc, #148]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	600b      	str	r3, [r1, #0]
 8005bcc:	e015      	b.n	8005bfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bce:	4b24      	ldr	r3, [pc, #144]	; (8005c60 <HAL_RCC_OscConfig+0x278>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd4:	f7ff f960 	bl	8004e98 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bdc:	f7ff f95c 	bl	8004e98 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e193      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bee:	4b1b      	ldr	r3, [pc, #108]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1f0      	bne.n	8005bdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d036      	beq.n	8005c74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d016      	beq.n	8005c3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c0e:	4b15      	ldr	r3, [pc, #84]	; (8005c64 <HAL_RCC_OscConfig+0x27c>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c14:	f7ff f940 	bl	8004e98 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c1c:	f7ff f93c 	bl	8004e98 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e173      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HAL_RCC_OscConfig+0x274>)
 8005c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0x234>
 8005c3a:	e01b      	b.n	8005c74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c3c:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <HAL_RCC_OscConfig+0x27c>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c42:	f7ff f929 	bl	8004e98 <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c48:	e00e      	b.n	8005c68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c4a:	f7ff f925 	bl	8004e98 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d907      	bls.n	8005c68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e15c      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	42470000 	.word	0x42470000
 8005c64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c68:	4b8a      	ldr	r3, [pc, #552]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1ea      	bne.n	8005c4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8097 	beq.w	8005db0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c82:	2300      	movs	r3, #0
 8005c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c86:	4b83      	ldr	r3, [pc, #524]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10f      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	4b7f      	ldr	r3, [pc, #508]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	4a7e      	ldr	r2, [pc, #504]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ca2:	4b7c      	ldr	r3, [pc, #496]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005caa:	60bb      	str	r3, [r7, #8]
 8005cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb2:	4b79      	ldr	r3, [pc, #484]	; (8005e98 <HAL_RCC_OscConfig+0x4b0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d118      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cbe:	4b76      	ldr	r3, [pc, #472]	; (8005e98 <HAL_RCC_OscConfig+0x4b0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a75      	ldr	r2, [pc, #468]	; (8005e98 <HAL_RCC_OscConfig+0x4b0>)
 8005cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cca:	f7ff f8e5 	bl	8004e98 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd2:	f7ff f8e1 	bl	8004e98 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e118      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce4:	4b6c      	ldr	r3, [pc, #432]	; (8005e98 <HAL_RCC_OscConfig+0x4b0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0f0      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d106      	bne.n	8005d06 <HAL_RCC_OscConfig+0x31e>
 8005cf8:	4b66      	ldr	r3, [pc, #408]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfc:	4a65      	ldr	r2, [pc, #404]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	6713      	str	r3, [r2, #112]	; 0x70
 8005d04:	e01c      	b.n	8005d40 <HAL_RCC_OscConfig+0x358>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x340>
 8005d0e:	4b61      	ldr	r3, [pc, #388]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	4a60      	ldr	r2, [pc, #384]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005d14:	f043 0304 	orr.w	r3, r3, #4
 8005d18:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1a:	4b5e      	ldr	r3, [pc, #376]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	4a5d      	ldr	r2, [pc, #372]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	6713      	str	r3, [r2, #112]	; 0x70
 8005d26:	e00b      	b.n	8005d40 <HAL_RCC_OscConfig+0x358>
 8005d28:	4b5a      	ldr	r3, [pc, #360]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2c:	4a59      	ldr	r2, [pc, #356]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	6713      	str	r3, [r2, #112]	; 0x70
 8005d34:	4b57      	ldr	r3, [pc, #348]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d38:	4a56      	ldr	r2, [pc, #344]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005d3a:	f023 0304 	bic.w	r3, r3, #4
 8005d3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d015      	beq.n	8005d74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d48:	f7ff f8a6 	bl	8004e98 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4e:	e00a      	b.n	8005d66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d50:	f7ff f8a2 	bl	8004e98 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e0d7      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d66:	4b4b      	ldr	r3, [pc, #300]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0ee      	beq.n	8005d50 <HAL_RCC_OscConfig+0x368>
 8005d72:	e014      	b.n	8005d9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d74:	f7ff f890 	bl	8004e98 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d7c:	f7ff f88c 	bl	8004e98 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e0c1      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d92:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1ee      	bne.n	8005d7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d105      	bne.n	8005db0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da4:	4b3b      	ldr	r3, [pc, #236]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	4a3a      	ldr	r2, [pc, #232]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 80ad 	beq.w	8005f14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dba:	4b36      	ldr	r3, [pc, #216]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d060      	beq.n	8005e88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d145      	bne.n	8005e5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dce:	4b33      	ldr	r3, [pc, #204]	; (8005e9c <HAL_RCC_OscConfig+0x4b4>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7ff f860 	bl	8004e98 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ddc:	f7ff f85c 	bl	8004e98 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e093      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dee:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f0      	bne.n	8005ddc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69da      	ldr	r2, [r3, #28]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	019b      	lsls	r3, r3, #6
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e10:	085b      	lsrs	r3, r3, #1
 8005e12:	3b01      	subs	r3, #1
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	061b      	lsls	r3, r3, #24
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	071b      	lsls	r3, r3, #28
 8005e26:	491b      	ldr	r1, [pc, #108]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e2c:	4b1b      	ldr	r3, [pc, #108]	; (8005e9c <HAL_RCC_OscConfig+0x4b4>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7ff f831 	bl	8004e98 <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e3a:	f7ff f82d 	bl	8004e98 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e064      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e4c:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0f0      	beq.n	8005e3a <HAL_RCC_OscConfig+0x452>
 8005e58:	e05c      	b.n	8005f14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5a:	4b10      	ldr	r3, [pc, #64]	; (8005e9c <HAL_RCC_OscConfig+0x4b4>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7ff f81a 	bl	8004e98 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e68:	f7ff f816 	bl	8004e98 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e04d      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7a:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <HAL_RCC_OscConfig+0x4ac>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0x480>
 8005e86:	e045      	b.n	8005f14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d107      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e040      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
 8005e94:	40023800 	.word	0x40023800
 8005e98:	40007000 	.word	0x40007000
 8005e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ea0:	4b1f      	ldr	r3, [pc, #124]	; (8005f20 <HAL_RCC_OscConfig+0x538>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d030      	beq.n	8005f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d129      	bne.n	8005f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d122      	bne.n	8005f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d119      	bne.n	8005f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	085b      	lsrs	r3, r3, #1
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d10f      	bne.n	8005f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d107      	bne.n	8005f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d001      	beq.n	8005f14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40023800 	.word	0x40023800

08005f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e041      	b.n	8005fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fa fdf0 	bl	8000b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f000 fb42 	bl	80065ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d001      	beq.n	8005fdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e046      	b.n	800606a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a23      	ldr	r2, [pc, #140]	; (8006078 <HAL_TIM_Base_Start+0xb4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d022      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d01d      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1f      	ldr	r2, [pc, #124]	; (800607c <HAL_TIM_Base_Start+0xb8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1e      	ldr	r2, [pc, #120]	; (8006080 <HAL_TIM_Base_Start+0xbc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1c      	ldr	r2, [pc, #112]	; (8006084 <HAL_TIM_Base_Start+0xc0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1b      	ldr	r2, [pc, #108]	; (8006088 <HAL_TIM_Base_Start+0xc4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a19      	ldr	r2, [pc, #100]	; (800608c <HAL_TIM_Base_Start+0xc8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_TIM_Base_Start+0x70>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a18      	ldr	r2, [pc, #96]	; (8006090 <HAL_TIM_Base_Start+0xcc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d111      	bne.n	8006058 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b06      	cmp	r3, #6
 8006044:	d010      	beq.n	8006068 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0201 	orr.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006056:	e007      	b.n	8006068 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0201 	orr.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	40010000 	.word	0x40010000
 800607c:	40000400 	.word	0x40000400
 8006080:	40000800 	.word	0x40000800
 8006084:	40000c00 	.word	0x40000c00
 8006088:	40010400 	.word	0x40010400
 800608c:	40014000 	.word	0x40014000
 8006090:	40001800 	.word	0x40001800

08006094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e041      	b.n	800612a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f839 	bl	8006132 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f000 fa8a 	bl	80065ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
	...

08006148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d109      	bne.n	800616c <HAL_TIM_PWM_Start+0x24>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	bf14      	ite	ne
 8006164:	2301      	movne	r3, #1
 8006166:	2300      	moveq	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	e022      	b.n	80061b2 <HAL_TIM_PWM_Start+0x6a>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b04      	cmp	r3, #4
 8006170:	d109      	bne.n	8006186 <HAL_TIM_PWM_Start+0x3e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b01      	cmp	r3, #1
 800617c:	bf14      	ite	ne
 800617e:	2301      	movne	r3, #1
 8006180:	2300      	moveq	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	e015      	b.n	80061b2 <HAL_TIM_PWM_Start+0x6a>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d109      	bne.n	80061a0 <HAL_TIM_PWM_Start+0x58>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e008      	b.n	80061b2 <HAL_TIM_PWM_Start+0x6a>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	bf14      	ite	ne
 80061ac:	2301      	movne	r3, #1
 80061ae:	2300      	moveq	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e07c      	b.n	80062b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <HAL_TIM_PWM_Start+0x82>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c8:	e013      	b.n	80061f2 <HAL_TIM_PWM_Start+0xaa>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d104      	bne.n	80061da <HAL_TIM_PWM_Start+0x92>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061d8:	e00b      	b.n	80061f2 <HAL_TIM_PWM_Start+0xaa>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d104      	bne.n	80061ea <HAL_TIM_PWM_Start+0xa2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e8:	e003      	b.n	80061f2 <HAL_TIM_PWM_Start+0xaa>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2202      	movs	r2, #2
 80061ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2201      	movs	r2, #1
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fce0 	bl	8006bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a2d      	ldr	r2, [pc, #180]	; (80062bc <HAL_TIM_PWM_Start+0x174>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d004      	beq.n	8006214 <HAL_TIM_PWM_Start+0xcc>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2c      	ldr	r2, [pc, #176]	; (80062c0 <HAL_TIM_PWM_Start+0x178>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d101      	bne.n	8006218 <HAL_TIM_PWM_Start+0xd0>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <HAL_TIM_PWM_Start+0xd2>
 8006218:	2300      	movs	r3, #0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800622c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a22      	ldr	r2, [pc, #136]	; (80062bc <HAL_TIM_PWM_Start+0x174>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_TIM_PWM_Start+0x136>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006240:	d01d      	beq.n	800627e <HAL_TIM_PWM_Start+0x136>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1f      	ldr	r2, [pc, #124]	; (80062c4 <HAL_TIM_PWM_Start+0x17c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_TIM_PWM_Start+0x136>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1d      	ldr	r2, [pc, #116]	; (80062c8 <HAL_TIM_PWM_Start+0x180>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_TIM_PWM_Start+0x136>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1c      	ldr	r2, [pc, #112]	; (80062cc <HAL_TIM_PWM_Start+0x184>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_TIM_PWM_Start+0x136>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a16      	ldr	r2, [pc, #88]	; (80062c0 <HAL_TIM_PWM_Start+0x178>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_TIM_PWM_Start+0x136>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a18      	ldr	r2, [pc, #96]	; (80062d0 <HAL_TIM_PWM_Start+0x188>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_TIM_PWM_Start+0x136>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a16      	ldr	r2, [pc, #88]	; (80062d4 <HAL_TIM_PWM_Start+0x18c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d111      	bne.n	80062a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b06      	cmp	r3, #6
 800628e:	d010      	beq.n	80062b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a0:	e007      	b.n	80062b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0201 	orr.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40010000 	.word	0x40010000
 80062c0:	40010400 	.word	0x40010400
 80062c4:	40000400 	.word	0x40000400
 80062c8:	40000800 	.word	0x40000800
 80062cc:	40000c00 	.word	0x40000c00
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40001800 	.word	0x40001800

080062d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e0ae      	b.n	8006454 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b0c      	cmp	r3, #12
 8006302:	f200 809f 	bhi.w	8006444 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006341 	.word	0x08006341
 8006310:	08006445 	.word	0x08006445
 8006314:	08006445 	.word	0x08006445
 8006318:	08006445 	.word	0x08006445
 800631c:	08006381 	.word	0x08006381
 8006320:	08006445 	.word	0x08006445
 8006324:	08006445 	.word	0x08006445
 8006328:	08006445 	.word	0x08006445
 800632c:	080063c3 	.word	0x080063c3
 8006330:	08006445 	.word	0x08006445
 8006334:	08006445 	.word	0x08006445
 8006338:	08006445 	.word	0x08006445
 800633c:	08006403 	.word	0x08006403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	4618      	mov	r0, r3
 8006348:	f000 f9f0 	bl	800672c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0208 	orr.w	r2, r2, #8
 800635a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0204 	bic.w	r2, r2, #4
 800636a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6999      	ldr	r1, [r3, #24]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	619a      	str	r2, [r3, #24]
      break;
 800637e:	e064      	b.n	800644a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fa40 	bl	800680c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800639a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6999      	ldr	r1, [r3, #24]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	021a      	lsls	r2, r3, #8
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	619a      	str	r2, [r3, #24]
      break;
 80063c0:	e043      	b.n	800644a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fa95 	bl	80068f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69da      	ldr	r2, [r3, #28]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0208 	orr.w	r2, r2, #8
 80063dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0204 	bic.w	r2, r2, #4
 80063ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69d9      	ldr	r1, [r3, #28]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	61da      	str	r2, [r3, #28]
      break;
 8006400:	e023      	b.n	800644a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fae9 	bl	80069e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69da      	ldr	r2, [r3, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800641c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800642c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69d9      	ldr	r1, [r3, #28]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	021a      	lsls	r2, r3, #8
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	61da      	str	r2, [r3, #28]
      break;
 8006442:	e002      	b.n	800644a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	75fb      	strb	r3, [r7, #23]
      break;
 8006448:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006452:	7dfb      	ldrb	r3, [r7, #23]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_TIM_ConfigClockSource+0x1c>
 8006474:	2302      	movs	r3, #2
 8006476:	e0b4      	b.n	80065e2 <HAL_TIM_ConfigClockSource+0x186>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800649e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b0:	d03e      	beq.n	8006530 <HAL_TIM_ConfigClockSource+0xd4>
 80064b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b6:	f200 8087 	bhi.w	80065c8 <HAL_TIM_ConfigClockSource+0x16c>
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064be:	f000 8086 	beq.w	80065ce <HAL_TIM_ConfigClockSource+0x172>
 80064c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c6:	d87f      	bhi.n	80065c8 <HAL_TIM_ConfigClockSource+0x16c>
 80064c8:	2b70      	cmp	r3, #112	; 0x70
 80064ca:	d01a      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0xa6>
 80064cc:	2b70      	cmp	r3, #112	; 0x70
 80064ce:	d87b      	bhi.n	80065c8 <HAL_TIM_ConfigClockSource+0x16c>
 80064d0:	2b60      	cmp	r3, #96	; 0x60
 80064d2:	d050      	beq.n	8006576 <HAL_TIM_ConfigClockSource+0x11a>
 80064d4:	2b60      	cmp	r3, #96	; 0x60
 80064d6:	d877      	bhi.n	80065c8 <HAL_TIM_ConfigClockSource+0x16c>
 80064d8:	2b50      	cmp	r3, #80	; 0x50
 80064da:	d03c      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0xfa>
 80064dc:	2b50      	cmp	r3, #80	; 0x50
 80064de:	d873      	bhi.n	80065c8 <HAL_TIM_ConfigClockSource+0x16c>
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d058      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x13a>
 80064e4:	2b40      	cmp	r3, #64	; 0x40
 80064e6:	d86f      	bhi.n	80065c8 <HAL_TIM_ConfigClockSource+0x16c>
 80064e8:	2b30      	cmp	r3, #48	; 0x30
 80064ea:	d064      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0x15a>
 80064ec:	2b30      	cmp	r3, #48	; 0x30
 80064ee:	d86b      	bhi.n	80065c8 <HAL_TIM_ConfigClockSource+0x16c>
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d060      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0x15a>
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	d867      	bhi.n	80065c8 <HAL_TIM_ConfigClockSource+0x16c>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d05c      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0x15a>
 80064fc:	2b10      	cmp	r3, #16
 80064fe:	d05a      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0x15a>
 8006500:	e062      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6899      	ldr	r1, [r3, #8]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f000 fb35 	bl	8006b80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006524:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	609a      	str	r2, [r3, #8]
      break;
 800652e:	e04f      	b.n	80065d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	6899      	ldr	r1, [r3, #8]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f000 fb1e 	bl	8006b80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006552:	609a      	str	r2, [r3, #8]
      break;
 8006554:	e03c      	b.n	80065d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	6859      	ldr	r1, [r3, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	461a      	mov	r2, r3
 8006564:	f000 fa92 	bl	8006a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2150      	movs	r1, #80	; 0x50
 800656e:	4618      	mov	r0, r3
 8006570:	f000 faeb 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 8006574:	e02c      	b.n	80065d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	6859      	ldr	r1, [r3, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	461a      	mov	r2, r3
 8006584:	f000 fab1 	bl	8006aea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2160      	movs	r1, #96	; 0x60
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fadb 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 8006594:	e01c      	b.n	80065d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	6859      	ldr	r1, [r3, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	461a      	mov	r2, r3
 80065a4:	f000 fa72 	bl	8006a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2140      	movs	r1, #64	; 0x40
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 facb 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 80065b4:	e00c      	b.n	80065d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f000 fac2 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 80065c6:	e003      	b.n	80065d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	73fb      	strb	r3, [r7, #15]
      break;
 80065cc:	e000      	b.n	80065d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a40      	ldr	r2, [pc, #256]	; (8006700 <TIM_Base_SetConfig+0x114>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d013      	beq.n	800662c <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660a:	d00f      	beq.n	800662c <TIM_Base_SetConfig+0x40>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a3d      	ldr	r2, [pc, #244]	; (8006704 <TIM_Base_SetConfig+0x118>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00b      	beq.n	800662c <TIM_Base_SetConfig+0x40>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a3c      	ldr	r2, [pc, #240]	; (8006708 <TIM_Base_SetConfig+0x11c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <TIM_Base_SetConfig+0x40>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a3b      	ldr	r2, [pc, #236]	; (800670c <TIM_Base_SetConfig+0x120>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_Base_SetConfig+0x40>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a3a      	ldr	r2, [pc, #232]	; (8006710 <TIM_Base_SetConfig+0x124>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d108      	bne.n	800663e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a2f      	ldr	r2, [pc, #188]	; (8006700 <TIM_Base_SetConfig+0x114>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d02b      	beq.n	800669e <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664c:	d027      	beq.n	800669e <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a2c      	ldr	r2, [pc, #176]	; (8006704 <TIM_Base_SetConfig+0x118>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d023      	beq.n	800669e <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a2b      	ldr	r2, [pc, #172]	; (8006708 <TIM_Base_SetConfig+0x11c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01f      	beq.n	800669e <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a2a      	ldr	r2, [pc, #168]	; (800670c <TIM_Base_SetConfig+0x120>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01b      	beq.n	800669e <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a29      	ldr	r2, [pc, #164]	; (8006710 <TIM_Base_SetConfig+0x124>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d017      	beq.n	800669e <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a28      	ldr	r2, [pc, #160]	; (8006714 <TIM_Base_SetConfig+0x128>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a27      	ldr	r2, [pc, #156]	; (8006718 <TIM_Base_SetConfig+0x12c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00f      	beq.n	800669e <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a26      	ldr	r2, [pc, #152]	; (800671c <TIM_Base_SetConfig+0x130>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00b      	beq.n	800669e <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a25      	ldr	r2, [pc, #148]	; (8006720 <TIM_Base_SetConfig+0x134>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d007      	beq.n	800669e <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a24      	ldr	r2, [pc, #144]	; (8006724 <TIM_Base_SetConfig+0x138>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a23      	ldr	r2, [pc, #140]	; (8006728 <TIM_Base_SetConfig+0x13c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d108      	bne.n	80066b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a0a      	ldr	r2, [pc, #40]	; (8006700 <TIM_Base_SetConfig+0x114>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_Base_SetConfig+0xf8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a0c      	ldr	r2, [pc, #48]	; (8006710 <TIM_Base_SetConfig+0x124>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d103      	bne.n	80066ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	615a      	str	r2, [r3, #20]
}
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40010000 	.word	0x40010000
 8006704:	40000400 	.word	0x40000400
 8006708:	40000800 	.word	0x40000800
 800670c:	40000c00 	.word	0x40000c00
 8006710:	40010400 	.word	0x40010400
 8006714:	40014000 	.word	0x40014000
 8006718:	40014400 	.word	0x40014400
 800671c:	40014800 	.word	0x40014800
 8006720:	40001800 	.word	0x40001800
 8006724:	40001c00 	.word	0x40001c00
 8006728:	40002000 	.word	0x40002000

0800672c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	f023 0201 	bic.w	r2, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f023 0302 	bic.w	r3, r3, #2
 8006774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a20      	ldr	r2, [pc, #128]	; (8006804 <TIM_OC1_SetConfig+0xd8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d003      	beq.n	8006790 <TIM_OC1_SetConfig+0x64>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a1f      	ldr	r2, [pc, #124]	; (8006808 <TIM_OC1_SetConfig+0xdc>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10c      	bne.n	80067aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f023 0308 	bic.w	r3, r3, #8
 8006796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f023 0304 	bic.w	r3, r3, #4
 80067a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a15      	ldr	r2, [pc, #84]	; (8006804 <TIM_OC1_SetConfig+0xd8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_OC1_SetConfig+0x8e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a14      	ldr	r2, [pc, #80]	; (8006808 <TIM_OC1_SetConfig+0xdc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d111      	bne.n	80067de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	621a      	str	r2, [r3, #32]
}
 80067f8:	bf00      	nop
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	40010000 	.word	0x40010000
 8006808:	40010400 	.word	0x40010400

0800680c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	f023 0210 	bic.w	r2, r3, #16
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f023 0320 	bic.w	r3, r3, #32
 8006856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a22      	ldr	r2, [pc, #136]	; (80068f0 <TIM_OC2_SetConfig+0xe4>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_OC2_SetConfig+0x68>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a21      	ldr	r2, [pc, #132]	; (80068f4 <TIM_OC2_SetConfig+0xe8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d10d      	bne.n	8006890 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800687a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a17      	ldr	r2, [pc, #92]	; (80068f0 <TIM_OC2_SetConfig+0xe4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d003      	beq.n	80068a0 <TIM_OC2_SetConfig+0x94>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a16      	ldr	r2, [pc, #88]	; (80068f4 <TIM_OC2_SetConfig+0xe8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d113      	bne.n	80068c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	621a      	str	r2, [r3, #32]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40010400 	.word	0x40010400

080068f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0303 	bic.w	r3, r3, #3
 800692e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a21      	ldr	r2, [pc, #132]	; (80069d8 <TIM_OC3_SetConfig+0xe0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d003      	beq.n	800695e <TIM_OC3_SetConfig+0x66>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a20      	ldr	r2, [pc, #128]	; (80069dc <TIM_OC3_SetConfig+0xe4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d10d      	bne.n	800697a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a16      	ldr	r2, [pc, #88]	; (80069d8 <TIM_OC3_SetConfig+0xe0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_OC3_SetConfig+0x92>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a15      	ldr	r2, [pc, #84]	; (80069dc <TIM_OC3_SetConfig+0xe4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d113      	bne.n	80069b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	621a      	str	r2, [r3, #32]
}
 80069cc:	bf00      	nop
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	40010000 	.word	0x40010000
 80069dc:	40010400 	.word	0x40010400

080069e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	021b      	lsls	r3, r3, #8
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	031b      	lsls	r3, r3, #12
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <TIM_OC4_SetConfig+0xa4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d003      	beq.n	8006a48 <TIM_OC4_SetConfig+0x68>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a11      	ldr	r2, [pc, #68]	; (8006a88 <TIM_OC4_SetConfig+0xa8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d109      	bne.n	8006a5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	019b      	lsls	r3, r3, #6
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40010000 	.word	0x40010000
 8006a88:	40010400 	.word	0x40010400

08006a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0201 	bic.w	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f023 030a 	bic.w	r3, r3, #10
 8006ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f023 0210 	bic.w	r2, r3, #16
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	031b      	lsls	r3, r3, #12
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f043 0307 	orr.w	r3, r3, #7
 8006b6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	609a      	str	r2, [r3, #8]
}
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	021a      	lsls	r2, r3, #8
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	609a      	str	r2, [r3, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f003 031f 	and.w	r3, r3, #31
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1a      	ldr	r2, [r3, #32]
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	43db      	mvns	r3, r3
 8006be2:	401a      	ands	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1a      	ldr	r2, [r3, #32]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
	...

08006c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c20:	2302      	movs	r3, #2
 8006c22:	e05a      	b.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a21      	ldr	r2, [pc, #132]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d022      	beq.n	8006cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c70:	d01d      	beq.n	8006cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d018      	beq.n	8006cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a1b      	ldr	r2, [pc, #108]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d013      	beq.n	8006cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1a      	ldr	r2, [pc, #104]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00e      	beq.n	8006cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a18      	ldr	r2, [pc, #96]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d009      	beq.n	8006cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a17      	ldr	r2, [pc, #92]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d004      	beq.n	8006cae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a15      	ldr	r2, [pc, #84]	; (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d10c      	bne.n	8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40010000 	.word	0x40010000
 8006cec:	40000400 	.word	0x40000400
 8006cf0:	40000800 	.word	0x40000800
 8006cf4:	40000c00 	.word	0x40000c00
 8006cf8:	40010400 	.word	0x40010400
 8006cfc:	40014000 	.word	0x40014000
 8006d00:	40001800 	.word	0x40001800

08006d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e03f      	b.n	8006d96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d106      	bne.n	8006d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7f9 ff6e 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2224      	movs	r2, #36	; 0x24
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f829 	bl	8006da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695a      	ldr	r2, [r3, #20]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	b09f      	sub	sp, #124	; 0x7c
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db6:	68d9      	ldr	r1, [r3, #12]
 8006db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	ea40 0301 	orr.w	r3, r0, r1
 8006dc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006de4:	f021 010c 	bic.w	r1, r1, #12
 8006de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dee:	430b      	orrs	r3, r1
 8006df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfe:	6999      	ldr	r1, [r3, #24]
 8006e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	ea40 0301 	orr.w	r3, r0, r1
 8006e08:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	4bc5      	ldr	r3, [pc, #788]	; (8007124 <UART_SetConfig+0x384>)
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d004      	beq.n	8006e1e <UART_SetConfig+0x7e>
 8006e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	4bc3      	ldr	r3, [pc, #780]	; (8007128 <UART_SetConfig+0x388>)
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d103      	bne.n	8006e26 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e1e:	f7fe fc1d 	bl	800565c <HAL_RCC_GetPCLK2Freq>
 8006e22:	6778      	str	r0, [r7, #116]	; 0x74
 8006e24:	e002      	b.n	8006e2c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e26:	f7fe fc05 	bl	8005634 <HAL_RCC_GetPCLK1Freq>
 8006e2a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e34:	f040 80b6 	bne.w	8006fa4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e3a:	461c      	mov	r4, r3
 8006e3c:	f04f 0500 	mov.w	r5, #0
 8006e40:	4622      	mov	r2, r4
 8006e42:	462b      	mov	r3, r5
 8006e44:	1891      	adds	r1, r2, r2
 8006e46:	6439      	str	r1, [r7, #64]	; 0x40
 8006e48:	415b      	adcs	r3, r3
 8006e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e50:	1912      	adds	r2, r2, r4
 8006e52:	eb45 0303 	adc.w	r3, r5, r3
 8006e56:	f04f 0000 	mov.w	r0, #0
 8006e5a:	f04f 0100 	mov.w	r1, #0
 8006e5e:	00d9      	lsls	r1, r3, #3
 8006e60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e64:	00d0      	lsls	r0, r2, #3
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	1911      	adds	r1, r2, r4
 8006e6c:	6639      	str	r1, [r7, #96]	; 0x60
 8006e6e:	416b      	adcs	r3, r5
 8006e70:	667b      	str	r3, [r7, #100]	; 0x64
 8006e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	1891      	adds	r1, r2, r2
 8006e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e80:	415b      	adcs	r3, r3
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e88:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e8c:	f7f9 fa10 	bl	80002b0 <__aeabi_uldivmod>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4ba5      	ldr	r3, [pc, #660]	; (800712c <UART_SetConfig+0x38c>)
 8006e96:	fba3 2302 	umull	r2, r3, r3, r2
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	011e      	lsls	r6, r3, #4
 8006e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea0:	461c      	mov	r4, r3
 8006ea2:	f04f 0500 	mov.w	r5, #0
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	462b      	mov	r3, r5
 8006eaa:	1891      	adds	r1, r2, r2
 8006eac:	6339      	str	r1, [r7, #48]	; 0x30
 8006eae:	415b      	adcs	r3, r3
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006eb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006eb6:	1912      	adds	r2, r2, r4
 8006eb8:	eb45 0303 	adc.w	r3, r5, r3
 8006ebc:	f04f 0000 	mov.w	r0, #0
 8006ec0:	f04f 0100 	mov.w	r1, #0
 8006ec4:	00d9      	lsls	r1, r3, #3
 8006ec6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006eca:	00d0      	lsls	r0, r2, #3
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	1911      	adds	r1, r2, r4
 8006ed2:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ed4:	416b      	adcs	r3, r5
 8006ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	461a      	mov	r2, r3
 8006ede:	f04f 0300 	mov.w	r3, #0
 8006ee2:	1891      	adds	r1, r2, r2
 8006ee4:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ee6:	415b      	adcs	r3, r3
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006eee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006ef2:	f7f9 f9dd 	bl	80002b0 <__aeabi_uldivmod>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4b8c      	ldr	r3, [pc, #560]	; (800712c <UART_SetConfig+0x38c>)
 8006efc:	fba3 1302 	umull	r1, r3, r3, r2
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	2164      	movs	r1, #100	; 0x64
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	3332      	adds	r3, #50	; 0x32
 8006f0e:	4a87      	ldr	r2, [pc, #540]	; (800712c <UART_SetConfig+0x38c>)
 8006f10:	fba2 2303 	umull	r2, r3, r2, r3
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f1c:	441e      	add	r6, r3
 8006f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f20:	4618      	mov	r0, r3
 8006f22:	f04f 0100 	mov.w	r1, #0
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	1894      	adds	r4, r2, r2
 8006f2c:	623c      	str	r4, [r7, #32]
 8006f2e:	415b      	adcs	r3, r3
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
 8006f32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f36:	1812      	adds	r2, r2, r0
 8006f38:	eb41 0303 	adc.w	r3, r1, r3
 8006f3c:	f04f 0400 	mov.w	r4, #0
 8006f40:	f04f 0500 	mov.w	r5, #0
 8006f44:	00dd      	lsls	r5, r3, #3
 8006f46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f4a:	00d4      	lsls	r4, r2, #3
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	462b      	mov	r3, r5
 8006f50:	1814      	adds	r4, r2, r0
 8006f52:	653c      	str	r4, [r7, #80]	; 0x50
 8006f54:	414b      	adcs	r3, r1
 8006f56:	657b      	str	r3, [r7, #84]	; 0x54
 8006f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	1891      	adds	r1, r2, r2
 8006f64:	61b9      	str	r1, [r7, #24]
 8006f66:	415b      	adcs	r3, r3
 8006f68:	61fb      	str	r3, [r7, #28]
 8006f6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f72:	f7f9 f99d 	bl	80002b0 <__aeabi_uldivmod>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4b6c      	ldr	r3, [pc, #432]	; (800712c <UART_SetConfig+0x38c>)
 8006f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	2164      	movs	r1, #100	; 0x64
 8006f84:	fb01 f303 	mul.w	r3, r1, r3
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	3332      	adds	r3, #50	; 0x32
 8006f8e:	4a67      	ldr	r2, [pc, #412]	; (800712c <UART_SetConfig+0x38c>)
 8006f90:	fba2 2303 	umull	r2, r3, r2, r3
 8006f94:	095b      	lsrs	r3, r3, #5
 8006f96:	f003 0207 	and.w	r2, r3, #7
 8006f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4432      	add	r2, r6
 8006fa0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fa2:	e0b9      	b.n	8007118 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa6:	461c      	mov	r4, r3
 8006fa8:	f04f 0500 	mov.w	r5, #0
 8006fac:	4622      	mov	r2, r4
 8006fae:	462b      	mov	r3, r5
 8006fb0:	1891      	adds	r1, r2, r2
 8006fb2:	6139      	str	r1, [r7, #16]
 8006fb4:	415b      	adcs	r3, r3
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006fbc:	1912      	adds	r2, r2, r4
 8006fbe:	eb45 0303 	adc.w	r3, r5, r3
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f04f 0100 	mov.w	r1, #0
 8006fca:	00d9      	lsls	r1, r3, #3
 8006fcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fd0:	00d0      	lsls	r0, r2, #3
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	eb12 0804 	adds.w	r8, r2, r4
 8006fda:	eb43 0905 	adc.w	r9, r3, r5
 8006fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f04f 0100 	mov.w	r1, #0
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	008b      	lsls	r3, r1, #2
 8006ff2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ff6:	0082      	lsls	r2, r0, #2
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	f7f9 f958 	bl	80002b0 <__aeabi_uldivmod>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4b49      	ldr	r3, [pc, #292]	; (800712c <UART_SetConfig+0x38c>)
 8007006:	fba3 2302 	umull	r2, r3, r3, r2
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	011e      	lsls	r6, r3, #4
 800700e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007010:	4618      	mov	r0, r3
 8007012:	f04f 0100 	mov.w	r1, #0
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	1894      	adds	r4, r2, r2
 800701c:	60bc      	str	r4, [r7, #8]
 800701e:	415b      	adcs	r3, r3
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007026:	1812      	adds	r2, r2, r0
 8007028:	eb41 0303 	adc.w	r3, r1, r3
 800702c:	f04f 0400 	mov.w	r4, #0
 8007030:	f04f 0500 	mov.w	r5, #0
 8007034:	00dd      	lsls	r5, r3, #3
 8007036:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800703a:	00d4      	lsls	r4, r2, #3
 800703c:	4622      	mov	r2, r4
 800703e:	462b      	mov	r3, r5
 8007040:	1814      	adds	r4, r2, r0
 8007042:	64bc      	str	r4, [r7, #72]	; 0x48
 8007044:	414b      	adcs	r3, r1
 8007046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	4618      	mov	r0, r3
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	f04f 0300 	mov.w	r3, #0
 800705a:	008b      	lsls	r3, r1, #2
 800705c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007060:	0082      	lsls	r2, r0, #2
 8007062:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007066:	f7f9 f923 	bl	80002b0 <__aeabi_uldivmod>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4b2f      	ldr	r3, [pc, #188]	; (800712c <UART_SetConfig+0x38c>)
 8007070:	fba3 1302 	umull	r1, r3, r3, r2
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	2164      	movs	r1, #100	; 0x64
 8007078:	fb01 f303 	mul.w	r3, r1, r3
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	3332      	adds	r3, #50	; 0x32
 8007082:	4a2a      	ldr	r2, [pc, #168]	; (800712c <UART_SetConfig+0x38c>)
 8007084:	fba2 2303 	umull	r2, r3, r2, r3
 8007088:	095b      	lsrs	r3, r3, #5
 800708a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800708e:	441e      	add	r6, r3
 8007090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007092:	4618      	mov	r0, r3
 8007094:	f04f 0100 	mov.w	r1, #0
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	1894      	adds	r4, r2, r2
 800709e:	603c      	str	r4, [r7, #0]
 80070a0:	415b      	adcs	r3, r3
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070a8:	1812      	adds	r2, r2, r0
 80070aa:	eb41 0303 	adc.w	r3, r1, r3
 80070ae:	f04f 0400 	mov.w	r4, #0
 80070b2:	f04f 0500 	mov.w	r5, #0
 80070b6:	00dd      	lsls	r5, r3, #3
 80070b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070bc:	00d4      	lsls	r4, r2, #3
 80070be:	4622      	mov	r2, r4
 80070c0:	462b      	mov	r3, r5
 80070c2:	eb12 0a00 	adds.w	sl, r2, r0
 80070c6:	eb43 0b01 	adc.w	fp, r3, r1
 80070ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f04f 0100 	mov.w	r1, #0
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	008b      	lsls	r3, r1, #2
 80070de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070e2:	0082      	lsls	r2, r0, #2
 80070e4:	4650      	mov	r0, sl
 80070e6:	4659      	mov	r1, fp
 80070e8:	f7f9 f8e2 	bl	80002b0 <__aeabi_uldivmod>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4b0e      	ldr	r3, [pc, #56]	; (800712c <UART_SetConfig+0x38c>)
 80070f2:	fba3 1302 	umull	r1, r3, r3, r2
 80070f6:	095b      	lsrs	r3, r3, #5
 80070f8:	2164      	movs	r1, #100	; 0x64
 80070fa:	fb01 f303 	mul.w	r3, r1, r3
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	3332      	adds	r3, #50	; 0x32
 8007104:	4a09      	ldr	r2, [pc, #36]	; (800712c <UART_SetConfig+0x38c>)
 8007106:	fba2 2303 	umull	r2, r3, r2, r3
 800710a:	095b      	lsrs	r3, r3, #5
 800710c:	f003 020f 	and.w	r2, r3, #15
 8007110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4432      	add	r2, r6
 8007116:	609a      	str	r2, [r3, #8]
}
 8007118:	bf00      	nop
 800711a:	377c      	adds	r7, #124	; 0x7c
 800711c:	46bd      	mov	sp, r7
 800711e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007122:	bf00      	nop
 8007124:	40011000 	.word	0x40011000
 8007128:	40011400 	.word	0x40011400
 800712c:	51eb851f 	.word	0x51eb851f

08007130 <__errno>:
 8007130:	4b01      	ldr	r3, [pc, #4]	; (8007138 <__errno+0x8>)
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	2000001c 	.word	0x2000001c

0800713c <__libc_init_array>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	4d0d      	ldr	r5, [pc, #52]	; (8007174 <__libc_init_array+0x38>)
 8007140:	4c0d      	ldr	r4, [pc, #52]	; (8007178 <__libc_init_array+0x3c>)
 8007142:	1b64      	subs	r4, r4, r5
 8007144:	10a4      	asrs	r4, r4, #2
 8007146:	2600      	movs	r6, #0
 8007148:	42a6      	cmp	r6, r4
 800714a:	d109      	bne.n	8007160 <__libc_init_array+0x24>
 800714c:	4d0b      	ldr	r5, [pc, #44]	; (800717c <__libc_init_array+0x40>)
 800714e:	4c0c      	ldr	r4, [pc, #48]	; (8007180 <__libc_init_array+0x44>)
 8007150:	f000 fc4e 	bl	80079f0 <_init>
 8007154:	1b64      	subs	r4, r4, r5
 8007156:	10a4      	asrs	r4, r4, #2
 8007158:	2600      	movs	r6, #0
 800715a:	42a6      	cmp	r6, r4
 800715c:	d105      	bne.n	800716a <__libc_init_array+0x2e>
 800715e:	bd70      	pop	{r4, r5, r6, pc}
 8007160:	f855 3b04 	ldr.w	r3, [r5], #4
 8007164:	4798      	blx	r3
 8007166:	3601      	adds	r6, #1
 8007168:	e7ee      	b.n	8007148 <__libc_init_array+0xc>
 800716a:	f855 3b04 	ldr.w	r3, [r5], #4
 800716e:	4798      	blx	r3
 8007170:	3601      	adds	r6, #1
 8007172:	e7f2      	b.n	800715a <__libc_init_array+0x1e>
 8007174:	08009160 	.word	0x08009160
 8007178:	08009160 	.word	0x08009160
 800717c:	08009160 	.word	0x08009160
 8007180:	08009164 	.word	0x08009164

08007184 <memset>:
 8007184:	4402      	add	r2, r0
 8007186:	4603      	mov	r3, r0
 8007188:	4293      	cmp	r3, r2
 800718a:	d100      	bne.n	800718e <memset+0xa>
 800718c:	4770      	bx	lr
 800718e:	f803 1b01 	strb.w	r1, [r3], #1
 8007192:	e7f9      	b.n	8007188 <memset+0x4>

08007194 <siprintf>:
 8007194:	b40e      	push	{r1, r2, r3}
 8007196:	b500      	push	{lr}
 8007198:	b09c      	sub	sp, #112	; 0x70
 800719a:	ab1d      	add	r3, sp, #116	; 0x74
 800719c:	9002      	str	r0, [sp, #8]
 800719e:	9006      	str	r0, [sp, #24]
 80071a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071a4:	4809      	ldr	r0, [pc, #36]	; (80071cc <siprintf+0x38>)
 80071a6:	9107      	str	r1, [sp, #28]
 80071a8:	9104      	str	r1, [sp, #16]
 80071aa:	4909      	ldr	r1, [pc, #36]	; (80071d0 <siprintf+0x3c>)
 80071ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b0:	9105      	str	r1, [sp, #20]
 80071b2:	6800      	ldr	r0, [r0, #0]
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	a902      	add	r1, sp, #8
 80071b8:	f000 f868 	bl	800728c <_svfiprintf_r>
 80071bc:	9b02      	ldr	r3, [sp, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	b01c      	add	sp, #112	; 0x70
 80071c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c8:	b003      	add	sp, #12
 80071ca:	4770      	bx	lr
 80071cc:	2000001c 	.word	0x2000001c
 80071d0:	ffff0208 	.word	0xffff0208

080071d4 <__ssputs_r>:
 80071d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d8:	688e      	ldr	r6, [r1, #8]
 80071da:	429e      	cmp	r6, r3
 80071dc:	4682      	mov	sl, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	4690      	mov	r8, r2
 80071e2:	461f      	mov	r7, r3
 80071e4:	d838      	bhi.n	8007258 <__ssputs_r+0x84>
 80071e6:	898a      	ldrh	r2, [r1, #12]
 80071e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071ec:	d032      	beq.n	8007254 <__ssputs_r+0x80>
 80071ee:	6825      	ldr	r5, [r4, #0]
 80071f0:	6909      	ldr	r1, [r1, #16]
 80071f2:	eba5 0901 	sub.w	r9, r5, r1
 80071f6:	6965      	ldr	r5, [r4, #20]
 80071f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007200:	3301      	adds	r3, #1
 8007202:	444b      	add	r3, r9
 8007204:	106d      	asrs	r5, r5, #1
 8007206:	429d      	cmp	r5, r3
 8007208:	bf38      	it	cc
 800720a:	461d      	movcc	r5, r3
 800720c:	0553      	lsls	r3, r2, #21
 800720e:	d531      	bpl.n	8007274 <__ssputs_r+0xa0>
 8007210:	4629      	mov	r1, r5
 8007212:	f000 fb47 	bl	80078a4 <_malloc_r>
 8007216:	4606      	mov	r6, r0
 8007218:	b950      	cbnz	r0, 8007230 <__ssputs_r+0x5c>
 800721a:	230c      	movs	r3, #12
 800721c:	f8ca 3000 	str.w	r3, [sl]
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007226:	81a3      	strh	r3, [r4, #12]
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007230:	6921      	ldr	r1, [r4, #16]
 8007232:	464a      	mov	r2, r9
 8007234:	f000 fabe 	bl	80077b4 <memcpy>
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007242:	81a3      	strh	r3, [r4, #12]
 8007244:	6126      	str	r6, [r4, #16]
 8007246:	6165      	str	r5, [r4, #20]
 8007248:	444e      	add	r6, r9
 800724a:	eba5 0509 	sub.w	r5, r5, r9
 800724e:	6026      	str	r6, [r4, #0]
 8007250:	60a5      	str	r5, [r4, #8]
 8007252:	463e      	mov	r6, r7
 8007254:	42be      	cmp	r6, r7
 8007256:	d900      	bls.n	800725a <__ssputs_r+0x86>
 8007258:	463e      	mov	r6, r7
 800725a:	4632      	mov	r2, r6
 800725c:	6820      	ldr	r0, [r4, #0]
 800725e:	4641      	mov	r1, r8
 8007260:	f000 fab6 	bl	80077d0 <memmove>
 8007264:	68a3      	ldr	r3, [r4, #8]
 8007266:	6822      	ldr	r2, [r4, #0]
 8007268:	1b9b      	subs	r3, r3, r6
 800726a:	4432      	add	r2, r6
 800726c:	60a3      	str	r3, [r4, #8]
 800726e:	6022      	str	r2, [r4, #0]
 8007270:	2000      	movs	r0, #0
 8007272:	e7db      	b.n	800722c <__ssputs_r+0x58>
 8007274:	462a      	mov	r2, r5
 8007276:	f000 fb6f 	bl	8007958 <_realloc_r>
 800727a:	4606      	mov	r6, r0
 800727c:	2800      	cmp	r0, #0
 800727e:	d1e1      	bne.n	8007244 <__ssputs_r+0x70>
 8007280:	6921      	ldr	r1, [r4, #16]
 8007282:	4650      	mov	r0, sl
 8007284:	f000 fabe 	bl	8007804 <_free_r>
 8007288:	e7c7      	b.n	800721a <__ssputs_r+0x46>
	...

0800728c <_svfiprintf_r>:
 800728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	4698      	mov	r8, r3
 8007292:	898b      	ldrh	r3, [r1, #12]
 8007294:	061b      	lsls	r3, r3, #24
 8007296:	b09d      	sub	sp, #116	; 0x74
 8007298:	4607      	mov	r7, r0
 800729a:	460d      	mov	r5, r1
 800729c:	4614      	mov	r4, r2
 800729e:	d50e      	bpl.n	80072be <_svfiprintf_r+0x32>
 80072a0:	690b      	ldr	r3, [r1, #16]
 80072a2:	b963      	cbnz	r3, 80072be <_svfiprintf_r+0x32>
 80072a4:	2140      	movs	r1, #64	; 0x40
 80072a6:	f000 fafd 	bl	80078a4 <_malloc_r>
 80072aa:	6028      	str	r0, [r5, #0]
 80072ac:	6128      	str	r0, [r5, #16]
 80072ae:	b920      	cbnz	r0, 80072ba <_svfiprintf_r+0x2e>
 80072b0:	230c      	movs	r3, #12
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	e0d1      	b.n	800745e <_svfiprintf_r+0x1d2>
 80072ba:	2340      	movs	r3, #64	; 0x40
 80072bc:	616b      	str	r3, [r5, #20]
 80072be:	2300      	movs	r3, #0
 80072c0:	9309      	str	r3, [sp, #36]	; 0x24
 80072c2:	2320      	movs	r3, #32
 80072c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80072cc:	2330      	movs	r3, #48	; 0x30
 80072ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007478 <_svfiprintf_r+0x1ec>
 80072d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072d6:	f04f 0901 	mov.w	r9, #1
 80072da:	4623      	mov	r3, r4
 80072dc:	469a      	mov	sl, r3
 80072de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072e2:	b10a      	cbz	r2, 80072e8 <_svfiprintf_r+0x5c>
 80072e4:	2a25      	cmp	r2, #37	; 0x25
 80072e6:	d1f9      	bne.n	80072dc <_svfiprintf_r+0x50>
 80072e8:	ebba 0b04 	subs.w	fp, sl, r4
 80072ec:	d00b      	beq.n	8007306 <_svfiprintf_r+0x7a>
 80072ee:	465b      	mov	r3, fp
 80072f0:	4622      	mov	r2, r4
 80072f2:	4629      	mov	r1, r5
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7ff ff6d 	bl	80071d4 <__ssputs_r>
 80072fa:	3001      	adds	r0, #1
 80072fc:	f000 80aa 	beq.w	8007454 <_svfiprintf_r+0x1c8>
 8007300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007302:	445a      	add	r2, fp
 8007304:	9209      	str	r2, [sp, #36]	; 0x24
 8007306:	f89a 3000 	ldrb.w	r3, [sl]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 80a2 	beq.w	8007454 <_svfiprintf_r+0x1c8>
 8007310:	2300      	movs	r3, #0
 8007312:	f04f 32ff 	mov.w	r2, #4294967295
 8007316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800731a:	f10a 0a01 	add.w	sl, sl, #1
 800731e:	9304      	str	r3, [sp, #16]
 8007320:	9307      	str	r3, [sp, #28]
 8007322:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007326:	931a      	str	r3, [sp, #104]	; 0x68
 8007328:	4654      	mov	r4, sl
 800732a:	2205      	movs	r2, #5
 800732c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007330:	4851      	ldr	r0, [pc, #324]	; (8007478 <_svfiprintf_r+0x1ec>)
 8007332:	f7f8 ff6d 	bl	8000210 <memchr>
 8007336:	9a04      	ldr	r2, [sp, #16]
 8007338:	b9d8      	cbnz	r0, 8007372 <_svfiprintf_r+0xe6>
 800733a:	06d0      	lsls	r0, r2, #27
 800733c:	bf44      	itt	mi
 800733e:	2320      	movmi	r3, #32
 8007340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007344:	0711      	lsls	r1, r2, #28
 8007346:	bf44      	itt	mi
 8007348:	232b      	movmi	r3, #43	; 0x2b
 800734a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800734e:	f89a 3000 	ldrb.w	r3, [sl]
 8007352:	2b2a      	cmp	r3, #42	; 0x2a
 8007354:	d015      	beq.n	8007382 <_svfiprintf_r+0xf6>
 8007356:	9a07      	ldr	r2, [sp, #28]
 8007358:	4654      	mov	r4, sl
 800735a:	2000      	movs	r0, #0
 800735c:	f04f 0c0a 	mov.w	ip, #10
 8007360:	4621      	mov	r1, r4
 8007362:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007366:	3b30      	subs	r3, #48	; 0x30
 8007368:	2b09      	cmp	r3, #9
 800736a:	d94e      	bls.n	800740a <_svfiprintf_r+0x17e>
 800736c:	b1b0      	cbz	r0, 800739c <_svfiprintf_r+0x110>
 800736e:	9207      	str	r2, [sp, #28]
 8007370:	e014      	b.n	800739c <_svfiprintf_r+0x110>
 8007372:	eba0 0308 	sub.w	r3, r0, r8
 8007376:	fa09 f303 	lsl.w	r3, r9, r3
 800737a:	4313      	orrs	r3, r2
 800737c:	9304      	str	r3, [sp, #16]
 800737e:	46a2      	mov	sl, r4
 8007380:	e7d2      	b.n	8007328 <_svfiprintf_r+0x9c>
 8007382:	9b03      	ldr	r3, [sp, #12]
 8007384:	1d19      	adds	r1, r3, #4
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	9103      	str	r1, [sp, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	bfbb      	ittet	lt
 800738e:	425b      	neglt	r3, r3
 8007390:	f042 0202 	orrlt.w	r2, r2, #2
 8007394:	9307      	strge	r3, [sp, #28]
 8007396:	9307      	strlt	r3, [sp, #28]
 8007398:	bfb8      	it	lt
 800739a:	9204      	strlt	r2, [sp, #16]
 800739c:	7823      	ldrb	r3, [r4, #0]
 800739e:	2b2e      	cmp	r3, #46	; 0x2e
 80073a0:	d10c      	bne.n	80073bc <_svfiprintf_r+0x130>
 80073a2:	7863      	ldrb	r3, [r4, #1]
 80073a4:	2b2a      	cmp	r3, #42	; 0x2a
 80073a6:	d135      	bne.n	8007414 <_svfiprintf_r+0x188>
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	1d1a      	adds	r2, r3, #4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	9203      	str	r2, [sp, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	bfb8      	it	lt
 80073b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80073b8:	3402      	adds	r4, #2
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007488 <_svfiprintf_r+0x1fc>
 80073c0:	7821      	ldrb	r1, [r4, #0]
 80073c2:	2203      	movs	r2, #3
 80073c4:	4650      	mov	r0, sl
 80073c6:	f7f8 ff23 	bl	8000210 <memchr>
 80073ca:	b140      	cbz	r0, 80073de <_svfiprintf_r+0x152>
 80073cc:	2340      	movs	r3, #64	; 0x40
 80073ce:	eba0 000a 	sub.w	r0, r0, sl
 80073d2:	fa03 f000 	lsl.w	r0, r3, r0
 80073d6:	9b04      	ldr	r3, [sp, #16]
 80073d8:	4303      	orrs	r3, r0
 80073da:	3401      	adds	r4, #1
 80073dc:	9304      	str	r3, [sp, #16]
 80073de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e2:	4826      	ldr	r0, [pc, #152]	; (800747c <_svfiprintf_r+0x1f0>)
 80073e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073e8:	2206      	movs	r2, #6
 80073ea:	f7f8 ff11 	bl	8000210 <memchr>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d038      	beq.n	8007464 <_svfiprintf_r+0x1d8>
 80073f2:	4b23      	ldr	r3, [pc, #140]	; (8007480 <_svfiprintf_r+0x1f4>)
 80073f4:	bb1b      	cbnz	r3, 800743e <_svfiprintf_r+0x1b2>
 80073f6:	9b03      	ldr	r3, [sp, #12]
 80073f8:	3307      	adds	r3, #7
 80073fa:	f023 0307 	bic.w	r3, r3, #7
 80073fe:	3308      	adds	r3, #8
 8007400:	9303      	str	r3, [sp, #12]
 8007402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007404:	4433      	add	r3, r6
 8007406:	9309      	str	r3, [sp, #36]	; 0x24
 8007408:	e767      	b.n	80072da <_svfiprintf_r+0x4e>
 800740a:	fb0c 3202 	mla	r2, ip, r2, r3
 800740e:	460c      	mov	r4, r1
 8007410:	2001      	movs	r0, #1
 8007412:	e7a5      	b.n	8007360 <_svfiprintf_r+0xd4>
 8007414:	2300      	movs	r3, #0
 8007416:	3401      	adds	r4, #1
 8007418:	9305      	str	r3, [sp, #20]
 800741a:	4619      	mov	r1, r3
 800741c:	f04f 0c0a 	mov.w	ip, #10
 8007420:	4620      	mov	r0, r4
 8007422:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007426:	3a30      	subs	r2, #48	; 0x30
 8007428:	2a09      	cmp	r2, #9
 800742a:	d903      	bls.n	8007434 <_svfiprintf_r+0x1a8>
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0c5      	beq.n	80073bc <_svfiprintf_r+0x130>
 8007430:	9105      	str	r1, [sp, #20]
 8007432:	e7c3      	b.n	80073bc <_svfiprintf_r+0x130>
 8007434:	fb0c 2101 	mla	r1, ip, r1, r2
 8007438:	4604      	mov	r4, r0
 800743a:	2301      	movs	r3, #1
 800743c:	e7f0      	b.n	8007420 <_svfiprintf_r+0x194>
 800743e:	ab03      	add	r3, sp, #12
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	462a      	mov	r2, r5
 8007444:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <_svfiprintf_r+0x1f8>)
 8007446:	a904      	add	r1, sp, #16
 8007448:	4638      	mov	r0, r7
 800744a:	f3af 8000 	nop.w
 800744e:	1c42      	adds	r2, r0, #1
 8007450:	4606      	mov	r6, r0
 8007452:	d1d6      	bne.n	8007402 <_svfiprintf_r+0x176>
 8007454:	89ab      	ldrh	r3, [r5, #12]
 8007456:	065b      	lsls	r3, r3, #25
 8007458:	f53f af2c 	bmi.w	80072b4 <_svfiprintf_r+0x28>
 800745c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800745e:	b01d      	add	sp, #116	; 0x74
 8007460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007464:	ab03      	add	r3, sp, #12
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	462a      	mov	r2, r5
 800746a:	4b06      	ldr	r3, [pc, #24]	; (8007484 <_svfiprintf_r+0x1f8>)
 800746c:	a904      	add	r1, sp, #16
 800746e:	4638      	mov	r0, r7
 8007470:	f000 f87a 	bl	8007568 <_printf_i>
 8007474:	e7eb      	b.n	800744e <_svfiprintf_r+0x1c2>
 8007476:	bf00      	nop
 8007478:	08009122 	.word	0x08009122
 800747c:	0800912c 	.word	0x0800912c
 8007480:	00000000 	.word	0x00000000
 8007484:	080071d5 	.word	0x080071d5
 8007488:	08009128 	.word	0x08009128

0800748c <_printf_common>:
 800748c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007490:	4616      	mov	r6, r2
 8007492:	4699      	mov	r9, r3
 8007494:	688a      	ldr	r2, [r1, #8]
 8007496:	690b      	ldr	r3, [r1, #16]
 8007498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800749c:	4293      	cmp	r3, r2
 800749e:	bfb8      	it	lt
 80074a0:	4613      	movlt	r3, r2
 80074a2:	6033      	str	r3, [r6, #0]
 80074a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074a8:	4607      	mov	r7, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	b10a      	cbz	r2, 80074b2 <_printf_common+0x26>
 80074ae:	3301      	adds	r3, #1
 80074b0:	6033      	str	r3, [r6, #0]
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	0699      	lsls	r1, r3, #26
 80074b6:	bf42      	ittt	mi
 80074b8:	6833      	ldrmi	r3, [r6, #0]
 80074ba:	3302      	addmi	r3, #2
 80074bc:	6033      	strmi	r3, [r6, #0]
 80074be:	6825      	ldr	r5, [r4, #0]
 80074c0:	f015 0506 	ands.w	r5, r5, #6
 80074c4:	d106      	bne.n	80074d4 <_printf_common+0x48>
 80074c6:	f104 0a19 	add.w	sl, r4, #25
 80074ca:	68e3      	ldr	r3, [r4, #12]
 80074cc:	6832      	ldr	r2, [r6, #0]
 80074ce:	1a9b      	subs	r3, r3, r2
 80074d0:	42ab      	cmp	r3, r5
 80074d2:	dc26      	bgt.n	8007522 <_printf_common+0x96>
 80074d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074d8:	1e13      	subs	r3, r2, #0
 80074da:	6822      	ldr	r2, [r4, #0]
 80074dc:	bf18      	it	ne
 80074de:	2301      	movne	r3, #1
 80074e0:	0692      	lsls	r2, r2, #26
 80074e2:	d42b      	bmi.n	800753c <_printf_common+0xb0>
 80074e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074e8:	4649      	mov	r1, r9
 80074ea:	4638      	mov	r0, r7
 80074ec:	47c0      	blx	r8
 80074ee:	3001      	adds	r0, #1
 80074f0:	d01e      	beq.n	8007530 <_printf_common+0xa4>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	68e5      	ldr	r5, [r4, #12]
 80074f6:	6832      	ldr	r2, [r6, #0]
 80074f8:	f003 0306 	and.w	r3, r3, #6
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	bf08      	it	eq
 8007500:	1aad      	subeq	r5, r5, r2
 8007502:	68a3      	ldr	r3, [r4, #8]
 8007504:	6922      	ldr	r2, [r4, #16]
 8007506:	bf0c      	ite	eq
 8007508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800750c:	2500      	movne	r5, #0
 800750e:	4293      	cmp	r3, r2
 8007510:	bfc4      	itt	gt
 8007512:	1a9b      	subgt	r3, r3, r2
 8007514:	18ed      	addgt	r5, r5, r3
 8007516:	2600      	movs	r6, #0
 8007518:	341a      	adds	r4, #26
 800751a:	42b5      	cmp	r5, r6
 800751c:	d11a      	bne.n	8007554 <_printf_common+0xc8>
 800751e:	2000      	movs	r0, #0
 8007520:	e008      	b.n	8007534 <_printf_common+0xa8>
 8007522:	2301      	movs	r3, #1
 8007524:	4652      	mov	r2, sl
 8007526:	4649      	mov	r1, r9
 8007528:	4638      	mov	r0, r7
 800752a:	47c0      	blx	r8
 800752c:	3001      	adds	r0, #1
 800752e:	d103      	bne.n	8007538 <_printf_common+0xac>
 8007530:	f04f 30ff 	mov.w	r0, #4294967295
 8007534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007538:	3501      	adds	r5, #1
 800753a:	e7c6      	b.n	80074ca <_printf_common+0x3e>
 800753c:	18e1      	adds	r1, r4, r3
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	2030      	movs	r0, #48	; 0x30
 8007542:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007546:	4422      	add	r2, r4
 8007548:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800754c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007550:	3302      	adds	r3, #2
 8007552:	e7c7      	b.n	80074e4 <_printf_common+0x58>
 8007554:	2301      	movs	r3, #1
 8007556:	4622      	mov	r2, r4
 8007558:	4649      	mov	r1, r9
 800755a:	4638      	mov	r0, r7
 800755c:	47c0      	blx	r8
 800755e:	3001      	adds	r0, #1
 8007560:	d0e6      	beq.n	8007530 <_printf_common+0xa4>
 8007562:	3601      	adds	r6, #1
 8007564:	e7d9      	b.n	800751a <_printf_common+0x8e>
	...

08007568 <_printf_i>:
 8007568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800756c:	460c      	mov	r4, r1
 800756e:	4691      	mov	r9, r2
 8007570:	7e27      	ldrb	r7, [r4, #24]
 8007572:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007574:	2f78      	cmp	r7, #120	; 0x78
 8007576:	4680      	mov	r8, r0
 8007578:	469a      	mov	sl, r3
 800757a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800757e:	d807      	bhi.n	8007590 <_printf_i+0x28>
 8007580:	2f62      	cmp	r7, #98	; 0x62
 8007582:	d80a      	bhi.n	800759a <_printf_i+0x32>
 8007584:	2f00      	cmp	r7, #0
 8007586:	f000 80d8 	beq.w	800773a <_printf_i+0x1d2>
 800758a:	2f58      	cmp	r7, #88	; 0x58
 800758c:	f000 80a3 	beq.w	80076d6 <_printf_i+0x16e>
 8007590:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007598:	e03a      	b.n	8007610 <_printf_i+0xa8>
 800759a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800759e:	2b15      	cmp	r3, #21
 80075a0:	d8f6      	bhi.n	8007590 <_printf_i+0x28>
 80075a2:	a001      	add	r0, pc, #4	; (adr r0, 80075a8 <_printf_i+0x40>)
 80075a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80075a8:	08007601 	.word	0x08007601
 80075ac:	08007615 	.word	0x08007615
 80075b0:	08007591 	.word	0x08007591
 80075b4:	08007591 	.word	0x08007591
 80075b8:	08007591 	.word	0x08007591
 80075bc:	08007591 	.word	0x08007591
 80075c0:	08007615 	.word	0x08007615
 80075c4:	08007591 	.word	0x08007591
 80075c8:	08007591 	.word	0x08007591
 80075cc:	08007591 	.word	0x08007591
 80075d0:	08007591 	.word	0x08007591
 80075d4:	08007721 	.word	0x08007721
 80075d8:	08007645 	.word	0x08007645
 80075dc:	08007703 	.word	0x08007703
 80075e0:	08007591 	.word	0x08007591
 80075e4:	08007591 	.word	0x08007591
 80075e8:	08007743 	.word	0x08007743
 80075ec:	08007591 	.word	0x08007591
 80075f0:	08007645 	.word	0x08007645
 80075f4:	08007591 	.word	0x08007591
 80075f8:	08007591 	.word	0x08007591
 80075fc:	0800770b 	.word	0x0800770b
 8007600:	680b      	ldr	r3, [r1, #0]
 8007602:	1d1a      	adds	r2, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	600a      	str	r2, [r1, #0]
 8007608:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800760c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007610:	2301      	movs	r3, #1
 8007612:	e0a3      	b.n	800775c <_printf_i+0x1f4>
 8007614:	6825      	ldr	r5, [r4, #0]
 8007616:	6808      	ldr	r0, [r1, #0]
 8007618:	062e      	lsls	r6, r5, #24
 800761a:	f100 0304 	add.w	r3, r0, #4
 800761e:	d50a      	bpl.n	8007636 <_printf_i+0xce>
 8007620:	6805      	ldr	r5, [r0, #0]
 8007622:	600b      	str	r3, [r1, #0]
 8007624:	2d00      	cmp	r5, #0
 8007626:	da03      	bge.n	8007630 <_printf_i+0xc8>
 8007628:	232d      	movs	r3, #45	; 0x2d
 800762a:	426d      	negs	r5, r5
 800762c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007630:	485e      	ldr	r0, [pc, #376]	; (80077ac <_printf_i+0x244>)
 8007632:	230a      	movs	r3, #10
 8007634:	e019      	b.n	800766a <_printf_i+0x102>
 8007636:	f015 0f40 	tst.w	r5, #64	; 0x40
 800763a:	6805      	ldr	r5, [r0, #0]
 800763c:	600b      	str	r3, [r1, #0]
 800763e:	bf18      	it	ne
 8007640:	b22d      	sxthne	r5, r5
 8007642:	e7ef      	b.n	8007624 <_printf_i+0xbc>
 8007644:	680b      	ldr	r3, [r1, #0]
 8007646:	6825      	ldr	r5, [r4, #0]
 8007648:	1d18      	adds	r0, r3, #4
 800764a:	6008      	str	r0, [r1, #0]
 800764c:	0628      	lsls	r0, r5, #24
 800764e:	d501      	bpl.n	8007654 <_printf_i+0xec>
 8007650:	681d      	ldr	r5, [r3, #0]
 8007652:	e002      	b.n	800765a <_printf_i+0xf2>
 8007654:	0669      	lsls	r1, r5, #25
 8007656:	d5fb      	bpl.n	8007650 <_printf_i+0xe8>
 8007658:	881d      	ldrh	r5, [r3, #0]
 800765a:	4854      	ldr	r0, [pc, #336]	; (80077ac <_printf_i+0x244>)
 800765c:	2f6f      	cmp	r7, #111	; 0x6f
 800765e:	bf0c      	ite	eq
 8007660:	2308      	moveq	r3, #8
 8007662:	230a      	movne	r3, #10
 8007664:	2100      	movs	r1, #0
 8007666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800766a:	6866      	ldr	r6, [r4, #4]
 800766c:	60a6      	str	r6, [r4, #8]
 800766e:	2e00      	cmp	r6, #0
 8007670:	bfa2      	ittt	ge
 8007672:	6821      	ldrge	r1, [r4, #0]
 8007674:	f021 0104 	bicge.w	r1, r1, #4
 8007678:	6021      	strge	r1, [r4, #0]
 800767a:	b90d      	cbnz	r5, 8007680 <_printf_i+0x118>
 800767c:	2e00      	cmp	r6, #0
 800767e:	d04d      	beq.n	800771c <_printf_i+0x1b4>
 8007680:	4616      	mov	r6, r2
 8007682:	fbb5 f1f3 	udiv	r1, r5, r3
 8007686:	fb03 5711 	mls	r7, r3, r1, r5
 800768a:	5dc7      	ldrb	r7, [r0, r7]
 800768c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007690:	462f      	mov	r7, r5
 8007692:	42bb      	cmp	r3, r7
 8007694:	460d      	mov	r5, r1
 8007696:	d9f4      	bls.n	8007682 <_printf_i+0x11a>
 8007698:	2b08      	cmp	r3, #8
 800769a:	d10b      	bne.n	80076b4 <_printf_i+0x14c>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	07df      	lsls	r7, r3, #31
 80076a0:	d508      	bpl.n	80076b4 <_printf_i+0x14c>
 80076a2:	6923      	ldr	r3, [r4, #16]
 80076a4:	6861      	ldr	r1, [r4, #4]
 80076a6:	4299      	cmp	r1, r3
 80076a8:	bfde      	ittt	le
 80076aa:	2330      	movle	r3, #48	; 0x30
 80076ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076b4:	1b92      	subs	r2, r2, r6
 80076b6:	6122      	str	r2, [r4, #16]
 80076b8:	f8cd a000 	str.w	sl, [sp]
 80076bc:	464b      	mov	r3, r9
 80076be:	aa03      	add	r2, sp, #12
 80076c0:	4621      	mov	r1, r4
 80076c2:	4640      	mov	r0, r8
 80076c4:	f7ff fee2 	bl	800748c <_printf_common>
 80076c8:	3001      	adds	r0, #1
 80076ca:	d14c      	bne.n	8007766 <_printf_i+0x1fe>
 80076cc:	f04f 30ff 	mov.w	r0, #4294967295
 80076d0:	b004      	add	sp, #16
 80076d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d6:	4835      	ldr	r0, [pc, #212]	; (80077ac <_printf_i+0x244>)
 80076d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	680e      	ldr	r6, [r1, #0]
 80076e0:	061f      	lsls	r7, r3, #24
 80076e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80076e6:	600e      	str	r6, [r1, #0]
 80076e8:	d514      	bpl.n	8007714 <_printf_i+0x1ac>
 80076ea:	07d9      	lsls	r1, r3, #31
 80076ec:	bf44      	itt	mi
 80076ee:	f043 0320 	orrmi.w	r3, r3, #32
 80076f2:	6023      	strmi	r3, [r4, #0]
 80076f4:	b91d      	cbnz	r5, 80076fe <_printf_i+0x196>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	f023 0320 	bic.w	r3, r3, #32
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	2310      	movs	r3, #16
 8007700:	e7b0      	b.n	8007664 <_printf_i+0xfc>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	f043 0320 	orr.w	r3, r3, #32
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	2378      	movs	r3, #120	; 0x78
 800770c:	4828      	ldr	r0, [pc, #160]	; (80077b0 <_printf_i+0x248>)
 800770e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007712:	e7e3      	b.n	80076dc <_printf_i+0x174>
 8007714:	065e      	lsls	r6, r3, #25
 8007716:	bf48      	it	mi
 8007718:	b2ad      	uxthmi	r5, r5
 800771a:	e7e6      	b.n	80076ea <_printf_i+0x182>
 800771c:	4616      	mov	r6, r2
 800771e:	e7bb      	b.n	8007698 <_printf_i+0x130>
 8007720:	680b      	ldr	r3, [r1, #0]
 8007722:	6826      	ldr	r6, [r4, #0]
 8007724:	6960      	ldr	r0, [r4, #20]
 8007726:	1d1d      	adds	r5, r3, #4
 8007728:	600d      	str	r5, [r1, #0]
 800772a:	0635      	lsls	r5, r6, #24
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	d501      	bpl.n	8007734 <_printf_i+0x1cc>
 8007730:	6018      	str	r0, [r3, #0]
 8007732:	e002      	b.n	800773a <_printf_i+0x1d2>
 8007734:	0671      	lsls	r1, r6, #25
 8007736:	d5fb      	bpl.n	8007730 <_printf_i+0x1c8>
 8007738:	8018      	strh	r0, [r3, #0]
 800773a:	2300      	movs	r3, #0
 800773c:	6123      	str	r3, [r4, #16]
 800773e:	4616      	mov	r6, r2
 8007740:	e7ba      	b.n	80076b8 <_printf_i+0x150>
 8007742:	680b      	ldr	r3, [r1, #0]
 8007744:	1d1a      	adds	r2, r3, #4
 8007746:	600a      	str	r2, [r1, #0]
 8007748:	681e      	ldr	r6, [r3, #0]
 800774a:	6862      	ldr	r2, [r4, #4]
 800774c:	2100      	movs	r1, #0
 800774e:	4630      	mov	r0, r6
 8007750:	f7f8 fd5e 	bl	8000210 <memchr>
 8007754:	b108      	cbz	r0, 800775a <_printf_i+0x1f2>
 8007756:	1b80      	subs	r0, r0, r6
 8007758:	6060      	str	r0, [r4, #4]
 800775a:	6863      	ldr	r3, [r4, #4]
 800775c:	6123      	str	r3, [r4, #16]
 800775e:	2300      	movs	r3, #0
 8007760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007764:	e7a8      	b.n	80076b8 <_printf_i+0x150>
 8007766:	6923      	ldr	r3, [r4, #16]
 8007768:	4632      	mov	r2, r6
 800776a:	4649      	mov	r1, r9
 800776c:	4640      	mov	r0, r8
 800776e:	47d0      	blx	sl
 8007770:	3001      	adds	r0, #1
 8007772:	d0ab      	beq.n	80076cc <_printf_i+0x164>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	079b      	lsls	r3, r3, #30
 8007778:	d413      	bmi.n	80077a2 <_printf_i+0x23a>
 800777a:	68e0      	ldr	r0, [r4, #12]
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	4298      	cmp	r0, r3
 8007780:	bfb8      	it	lt
 8007782:	4618      	movlt	r0, r3
 8007784:	e7a4      	b.n	80076d0 <_printf_i+0x168>
 8007786:	2301      	movs	r3, #1
 8007788:	4632      	mov	r2, r6
 800778a:	4649      	mov	r1, r9
 800778c:	4640      	mov	r0, r8
 800778e:	47d0      	blx	sl
 8007790:	3001      	adds	r0, #1
 8007792:	d09b      	beq.n	80076cc <_printf_i+0x164>
 8007794:	3501      	adds	r5, #1
 8007796:	68e3      	ldr	r3, [r4, #12]
 8007798:	9903      	ldr	r1, [sp, #12]
 800779a:	1a5b      	subs	r3, r3, r1
 800779c:	42ab      	cmp	r3, r5
 800779e:	dcf2      	bgt.n	8007786 <_printf_i+0x21e>
 80077a0:	e7eb      	b.n	800777a <_printf_i+0x212>
 80077a2:	2500      	movs	r5, #0
 80077a4:	f104 0619 	add.w	r6, r4, #25
 80077a8:	e7f5      	b.n	8007796 <_printf_i+0x22e>
 80077aa:	bf00      	nop
 80077ac:	08009133 	.word	0x08009133
 80077b0:	08009144 	.word	0x08009144

080077b4 <memcpy>:
 80077b4:	440a      	add	r2, r1
 80077b6:	4291      	cmp	r1, r2
 80077b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077bc:	d100      	bne.n	80077c0 <memcpy+0xc>
 80077be:	4770      	bx	lr
 80077c0:	b510      	push	{r4, lr}
 80077c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ca:	4291      	cmp	r1, r2
 80077cc:	d1f9      	bne.n	80077c2 <memcpy+0xe>
 80077ce:	bd10      	pop	{r4, pc}

080077d0 <memmove>:
 80077d0:	4288      	cmp	r0, r1
 80077d2:	b510      	push	{r4, lr}
 80077d4:	eb01 0402 	add.w	r4, r1, r2
 80077d8:	d902      	bls.n	80077e0 <memmove+0x10>
 80077da:	4284      	cmp	r4, r0
 80077dc:	4623      	mov	r3, r4
 80077de:	d807      	bhi.n	80077f0 <memmove+0x20>
 80077e0:	1e43      	subs	r3, r0, #1
 80077e2:	42a1      	cmp	r1, r4
 80077e4:	d008      	beq.n	80077f8 <memmove+0x28>
 80077e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ee:	e7f8      	b.n	80077e2 <memmove+0x12>
 80077f0:	4402      	add	r2, r0
 80077f2:	4601      	mov	r1, r0
 80077f4:	428a      	cmp	r2, r1
 80077f6:	d100      	bne.n	80077fa <memmove+0x2a>
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007802:	e7f7      	b.n	80077f4 <memmove+0x24>

08007804 <_free_r>:
 8007804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007806:	2900      	cmp	r1, #0
 8007808:	d048      	beq.n	800789c <_free_r+0x98>
 800780a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780e:	9001      	str	r0, [sp, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	f1a1 0404 	sub.w	r4, r1, #4
 8007816:	bfb8      	it	lt
 8007818:	18e4      	addlt	r4, r4, r3
 800781a:	f000 f8d3 	bl	80079c4 <__malloc_lock>
 800781e:	4a20      	ldr	r2, [pc, #128]	; (80078a0 <_free_r+0x9c>)
 8007820:	9801      	ldr	r0, [sp, #4]
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	4615      	mov	r5, r2
 8007826:	b933      	cbnz	r3, 8007836 <_free_r+0x32>
 8007828:	6063      	str	r3, [r4, #4]
 800782a:	6014      	str	r4, [r2, #0]
 800782c:	b003      	add	sp, #12
 800782e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007832:	f000 b8cd 	b.w	80079d0 <__malloc_unlock>
 8007836:	42a3      	cmp	r3, r4
 8007838:	d90b      	bls.n	8007852 <_free_r+0x4e>
 800783a:	6821      	ldr	r1, [r4, #0]
 800783c:	1862      	adds	r2, r4, r1
 800783e:	4293      	cmp	r3, r2
 8007840:	bf04      	itt	eq
 8007842:	681a      	ldreq	r2, [r3, #0]
 8007844:	685b      	ldreq	r3, [r3, #4]
 8007846:	6063      	str	r3, [r4, #4]
 8007848:	bf04      	itt	eq
 800784a:	1852      	addeq	r2, r2, r1
 800784c:	6022      	streq	r2, [r4, #0]
 800784e:	602c      	str	r4, [r5, #0]
 8007850:	e7ec      	b.n	800782c <_free_r+0x28>
 8007852:	461a      	mov	r2, r3
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	b10b      	cbz	r3, 800785c <_free_r+0x58>
 8007858:	42a3      	cmp	r3, r4
 800785a:	d9fa      	bls.n	8007852 <_free_r+0x4e>
 800785c:	6811      	ldr	r1, [r2, #0]
 800785e:	1855      	adds	r5, r2, r1
 8007860:	42a5      	cmp	r5, r4
 8007862:	d10b      	bne.n	800787c <_free_r+0x78>
 8007864:	6824      	ldr	r4, [r4, #0]
 8007866:	4421      	add	r1, r4
 8007868:	1854      	adds	r4, r2, r1
 800786a:	42a3      	cmp	r3, r4
 800786c:	6011      	str	r1, [r2, #0]
 800786e:	d1dd      	bne.n	800782c <_free_r+0x28>
 8007870:	681c      	ldr	r4, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	6053      	str	r3, [r2, #4]
 8007876:	4421      	add	r1, r4
 8007878:	6011      	str	r1, [r2, #0]
 800787a:	e7d7      	b.n	800782c <_free_r+0x28>
 800787c:	d902      	bls.n	8007884 <_free_r+0x80>
 800787e:	230c      	movs	r3, #12
 8007880:	6003      	str	r3, [r0, #0]
 8007882:	e7d3      	b.n	800782c <_free_r+0x28>
 8007884:	6825      	ldr	r5, [r4, #0]
 8007886:	1961      	adds	r1, r4, r5
 8007888:	428b      	cmp	r3, r1
 800788a:	bf04      	itt	eq
 800788c:	6819      	ldreq	r1, [r3, #0]
 800788e:	685b      	ldreq	r3, [r3, #4]
 8007890:	6063      	str	r3, [r4, #4]
 8007892:	bf04      	itt	eq
 8007894:	1949      	addeq	r1, r1, r5
 8007896:	6021      	streq	r1, [r4, #0]
 8007898:	6054      	str	r4, [r2, #4]
 800789a:	e7c7      	b.n	800782c <_free_r+0x28>
 800789c:	b003      	add	sp, #12
 800789e:	bd30      	pop	{r4, r5, pc}
 80078a0:	200000a8 	.word	0x200000a8

080078a4 <_malloc_r>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	1ccd      	adds	r5, r1, #3
 80078a8:	f025 0503 	bic.w	r5, r5, #3
 80078ac:	3508      	adds	r5, #8
 80078ae:	2d0c      	cmp	r5, #12
 80078b0:	bf38      	it	cc
 80078b2:	250c      	movcc	r5, #12
 80078b4:	2d00      	cmp	r5, #0
 80078b6:	4606      	mov	r6, r0
 80078b8:	db01      	blt.n	80078be <_malloc_r+0x1a>
 80078ba:	42a9      	cmp	r1, r5
 80078bc:	d903      	bls.n	80078c6 <_malloc_r+0x22>
 80078be:	230c      	movs	r3, #12
 80078c0:	6033      	str	r3, [r6, #0]
 80078c2:	2000      	movs	r0, #0
 80078c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c6:	f000 f87d 	bl	80079c4 <__malloc_lock>
 80078ca:	4921      	ldr	r1, [pc, #132]	; (8007950 <_malloc_r+0xac>)
 80078cc:	680a      	ldr	r2, [r1, #0]
 80078ce:	4614      	mov	r4, r2
 80078d0:	b99c      	cbnz	r4, 80078fa <_malloc_r+0x56>
 80078d2:	4f20      	ldr	r7, [pc, #128]	; (8007954 <_malloc_r+0xb0>)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	b923      	cbnz	r3, 80078e2 <_malloc_r+0x3e>
 80078d8:	4621      	mov	r1, r4
 80078da:	4630      	mov	r0, r6
 80078dc:	f000 f862 	bl	80079a4 <_sbrk_r>
 80078e0:	6038      	str	r0, [r7, #0]
 80078e2:	4629      	mov	r1, r5
 80078e4:	4630      	mov	r0, r6
 80078e6:	f000 f85d 	bl	80079a4 <_sbrk_r>
 80078ea:	1c43      	adds	r3, r0, #1
 80078ec:	d123      	bne.n	8007936 <_malloc_r+0x92>
 80078ee:	230c      	movs	r3, #12
 80078f0:	6033      	str	r3, [r6, #0]
 80078f2:	4630      	mov	r0, r6
 80078f4:	f000 f86c 	bl	80079d0 <__malloc_unlock>
 80078f8:	e7e3      	b.n	80078c2 <_malloc_r+0x1e>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	1b5b      	subs	r3, r3, r5
 80078fe:	d417      	bmi.n	8007930 <_malloc_r+0x8c>
 8007900:	2b0b      	cmp	r3, #11
 8007902:	d903      	bls.n	800790c <_malloc_r+0x68>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	441c      	add	r4, r3
 8007908:	6025      	str	r5, [r4, #0]
 800790a:	e004      	b.n	8007916 <_malloc_r+0x72>
 800790c:	6863      	ldr	r3, [r4, #4]
 800790e:	42a2      	cmp	r2, r4
 8007910:	bf0c      	ite	eq
 8007912:	600b      	streq	r3, [r1, #0]
 8007914:	6053      	strne	r3, [r2, #4]
 8007916:	4630      	mov	r0, r6
 8007918:	f000 f85a 	bl	80079d0 <__malloc_unlock>
 800791c:	f104 000b 	add.w	r0, r4, #11
 8007920:	1d23      	adds	r3, r4, #4
 8007922:	f020 0007 	bic.w	r0, r0, #7
 8007926:	1ac2      	subs	r2, r0, r3
 8007928:	d0cc      	beq.n	80078c4 <_malloc_r+0x20>
 800792a:	1a1b      	subs	r3, r3, r0
 800792c:	50a3      	str	r3, [r4, r2]
 800792e:	e7c9      	b.n	80078c4 <_malloc_r+0x20>
 8007930:	4622      	mov	r2, r4
 8007932:	6864      	ldr	r4, [r4, #4]
 8007934:	e7cc      	b.n	80078d0 <_malloc_r+0x2c>
 8007936:	1cc4      	adds	r4, r0, #3
 8007938:	f024 0403 	bic.w	r4, r4, #3
 800793c:	42a0      	cmp	r0, r4
 800793e:	d0e3      	beq.n	8007908 <_malloc_r+0x64>
 8007940:	1a21      	subs	r1, r4, r0
 8007942:	4630      	mov	r0, r6
 8007944:	f000 f82e 	bl	80079a4 <_sbrk_r>
 8007948:	3001      	adds	r0, #1
 800794a:	d1dd      	bne.n	8007908 <_malloc_r+0x64>
 800794c:	e7cf      	b.n	80078ee <_malloc_r+0x4a>
 800794e:	bf00      	nop
 8007950:	200000a8 	.word	0x200000a8
 8007954:	200000ac 	.word	0x200000ac

08007958 <_realloc_r>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	4607      	mov	r7, r0
 800795c:	4614      	mov	r4, r2
 800795e:	460e      	mov	r6, r1
 8007960:	b921      	cbnz	r1, 800796c <_realloc_r+0x14>
 8007962:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007966:	4611      	mov	r1, r2
 8007968:	f7ff bf9c 	b.w	80078a4 <_malloc_r>
 800796c:	b922      	cbnz	r2, 8007978 <_realloc_r+0x20>
 800796e:	f7ff ff49 	bl	8007804 <_free_r>
 8007972:	4625      	mov	r5, r4
 8007974:	4628      	mov	r0, r5
 8007976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007978:	f000 f830 	bl	80079dc <_malloc_usable_size_r>
 800797c:	42a0      	cmp	r0, r4
 800797e:	d20f      	bcs.n	80079a0 <_realloc_r+0x48>
 8007980:	4621      	mov	r1, r4
 8007982:	4638      	mov	r0, r7
 8007984:	f7ff ff8e 	bl	80078a4 <_malloc_r>
 8007988:	4605      	mov	r5, r0
 800798a:	2800      	cmp	r0, #0
 800798c:	d0f2      	beq.n	8007974 <_realloc_r+0x1c>
 800798e:	4631      	mov	r1, r6
 8007990:	4622      	mov	r2, r4
 8007992:	f7ff ff0f 	bl	80077b4 <memcpy>
 8007996:	4631      	mov	r1, r6
 8007998:	4638      	mov	r0, r7
 800799a:	f7ff ff33 	bl	8007804 <_free_r>
 800799e:	e7e9      	b.n	8007974 <_realloc_r+0x1c>
 80079a0:	4635      	mov	r5, r6
 80079a2:	e7e7      	b.n	8007974 <_realloc_r+0x1c>

080079a4 <_sbrk_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4d06      	ldr	r5, [pc, #24]	; (80079c0 <_sbrk_r+0x1c>)
 80079a8:	2300      	movs	r3, #0
 80079aa:	4604      	mov	r4, r0
 80079ac:	4608      	mov	r0, r1
 80079ae:	602b      	str	r3, [r5, #0]
 80079b0:	f7f9 f99e 	bl	8000cf0 <_sbrk>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_sbrk_r+0x1a>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_sbrk_r+0x1a>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	200001b0 	.word	0x200001b0

080079c4 <__malloc_lock>:
 80079c4:	4801      	ldr	r0, [pc, #4]	; (80079cc <__malloc_lock+0x8>)
 80079c6:	f000 b811 	b.w	80079ec <__retarget_lock_acquire_recursive>
 80079ca:	bf00      	nop
 80079cc:	200001b8 	.word	0x200001b8

080079d0 <__malloc_unlock>:
 80079d0:	4801      	ldr	r0, [pc, #4]	; (80079d8 <__malloc_unlock+0x8>)
 80079d2:	f000 b80c 	b.w	80079ee <__retarget_lock_release_recursive>
 80079d6:	bf00      	nop
 80079d8:	200001b8 	.word	0x200001b8

080079dc <_malloc_usable_size_r>:
 80079dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e0:	1f18      	subs	r0, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bfbc      	itt	lt
 80079e6:	580b      	ldrlt	r3, [r1, r0]
 80079e8:	18c0      	addlt	r0, r0, r3
 80079ea:	4770      	bx	lr

080079ec <__retarget_lock_acquire_recursive>:
 80079ec:	4770      	bx	lr

080079ee <__retarget_lock_release_recursive>:
 80079ee:	4770      	bx	lr

080079f0 <_init>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	bf00      	nop
 80079f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f6:	bc08      	pop	{r3}
 80079f8:	469e      	mov	lr, r3
 80079fa:	4770      	bx	lr

080079fc <_fini>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr
